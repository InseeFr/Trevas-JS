// Generated from Vtl.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var VtlListener = require('./VtlListener').VtlListener;
var VtlVisitor = require('./VtlVisitor').VtlVisitor;

var grammarFileName = "Vtl.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00f1\u053d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00c8\n\u0002\f\u0002\u000e",
    "\u0002\u00cb\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0005\u0003\u00d8\n\u0003\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00eb\n\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u0109\n\u0004\u0007",
    "\u0004\u010b\n\u0004\f\u0004\u000e\u0004\u010e\u000b\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u011d\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0127",
    "\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007",
    "\u012d\n\u0007\f\u0007\u000e\u0007\u0130\u000b\u0007\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0005\b\u0136\n\b\u0005\b\u0138\n\b\u0003\t\u0003\t",
    "\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0141\n\n\f\n\u000e",
    "\n\u0144\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007",
    "\u000b\u014a\n\u000b\f\u000b\u000e\u000b\u014d\u000b\u000b\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0007\r\u015c\n\r\f\r\u000e\r\u015f\u000b\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0165\n\u000e",
    "\f\u000e\u000e\u000e\u0168\u000b\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0176\n\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0007\u0010\u017f\n\u0010\f\u0010\u000e\u0010\u0182\u000b",
    "\u0010\u0005\u0010\u0184\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0189\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01aa\n\u0010",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u01b1\n\u0011\f\u0011\u000e\u0011\u01b4\u000b\u0011\u0005\u0011\u01b6",
    "\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u01c0\n\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u01c5\n\u0011\u0007\u0011",
    "\u01c7\n\u0011\f\u0011\u000e\u0011\u01ca\u000b\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u01cf\n\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u01d3\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u01dd",
    "\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u01e1\n\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u01e5\n\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u01ea\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u01fa\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01fe\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0209\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0214\n\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0218\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u021c\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0221",
    "\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u022e\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u0239\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0257\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u025b",
    "\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0260\n\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u0268\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u027d\n\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u0281\n\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u0285\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u028b\n\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0006\u0017\u0292\n\u0017\r\u0017\u000e",
    "\u0017\u0293\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0006\u0017\u029d\n\u0017\r\u0017\u000e\u0017",
    "\u029e\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02aa\n\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u02b2\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u02b6",
    "\n\u0018\u0003\u0018\u0005\u0018\u02b9\n\u0018\u0003\u0018\u0005\u0018",
    "\u02bc\n\u0018\u0003\u0018\u0005\u0018\u02bf\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u02cc\n\u0019",
    "\f\u0019\u000e\u0019\u02cf\u000b\u0019\u0005\u0019\u02d1\n\u0019\u0003",
    "\u0019\u0005\u0019\u02d4\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u02de\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02e2\n\u0019\u0003",
    "\u0019\u0005\u0019\u02e5\n\u0019\u0003\u0019\u0005\u0019\u02e8\n\u0019",
    "\u0003\u0019\u0005\u0019\u02eb\n\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02f3\n\u0019",
    "\u0003\u0019\u0005\u0019\u02f6\n\u0019\u0003\u0019\u0005\u0019\u02f9",
    "\n\u0019\u0003\u0019\u0005\u0019\u02fc\n\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u0300\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u030e\n\u001b\u0005\u001b",
    "\u0310\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u031a\n\u001c",
    "\u0003\u001c\u0005\u001c\u031d\n\u001c\u0003\u001c\u0005\u001c\u0320",
    "\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u032b\n",
    "\u001c\u0005\u001c\u032d\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0005\u001c\u0332\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0342",
    "\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0352\n\u001f\f\u001f",
    "\u000e\u001f\u0355\u000b\u001f\u0003 \u0005 \u0358\n \u0003 \u0003 ",
    "\u0003 \u0003 \u0003!\u0005!\u035f\n!\u0003!\u0003!\u0003!\u0003!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0007#\u036c\n#\f#\u000e",
    "#\u036f\u000b#\u0003$\u0003$\u0003$\u0007$\u0374\n$\f$\u000e$\u0377",
    "\u000b$\u0003$\u0003$\u0003$\u0003$\u0007$\u037d\n$\f$\u000e$\u0380",
    "\u000b$\u0005$\u0382\n$\u0003%\u0003%\u0003%\u0005%\u0387\n%\u0003&",
    "\u0005&\u038a\n&\u0003&\u0003&\u0003&\u0005&\u038f\n&\u0003&\u0005&",
    "\u0392\n&\u0003&\u0005&\u0395\n&\u0003\'\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0007(\u039f\n(\f(\u000e(\u03a2\u000b(\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0007)\u03a9\n)\f)\u000e)\u03ac\u000b",
    ")\u0003*\u0003*\u0005*\u03b0\n*\u0003+\u0003+\u0003+\u0005+\u03b5\n",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u03c9",
    "\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u03d0\n.\f.\u000e.\u03d3",
    "\u000b.\u0003.\u0003.\u0003.\u0005.\u03d8\n.\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00030\u00050\u03e1\n0\u00031\u00031\u00031\u00051\u03e6",
    "\n1\u00032\u00032\u00052\u03ea\n2\u00033\u00033\u00033\u00033\u0003",
    "3\u00053\u03f1\n3\u00034\u00034\u00034\u00054\u03f6\n4\u00035\u0003",
    "5\u00055\u03fa\n5\u00035\u00055\u03fd\n5\u00035\u00055\u0400\n5\u0003",
    "5\u00055\u0403\n5\u00036\u00036\u00036\u00036\u00036\u00056\u040a\n",
    "6\u00037\u00037\u00037\u00037\u00037\u00077\u0411\n7\f7\u000e7\u0414",
    "\u000b7\u00037\u00037\u00057\u0418\n7\u00038\u00038\u00038\u00038\u0003",
    "8\u00058\u041f\n8\u00039\u00039\u00039\u00039\u00039\u00039\u00079\u0427",
    "\n9\f9\u000e9\u042a\u000b9\u00039\u00039\u00059\u042e\n9\u00039\u0003",
    "9\u00039\u00039\u00039\u00079\u0435\n9\f9\u000e9\u0438\u000b9\u0003",
    "9\u00039\u00059\u043c\n9\u00059\u043e\n9\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0007:\u0448\n:\f:\u000e:\u044b\u000b",
    ":\u0003:\u0003:\u0005:\u044f\n:\u0003:\u0005:\u0452\n:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0007:\u045b\n:\f:\u000e:\u045e",
    "\u000b:\u0003:\u0003:\u0005:\u0462\n:\u0003:\u0003:\u0005:\u0466\n:",
    "\u0005:\u0468\n:\u0003;\u0003;\u0003<\u0003<\u0003=\u0003=\u0003=\u0003",
    "=\u0007=\u0472\n=\f=\u000e=\u0475\u000b=\u0003>\u0003>\u0003>\u0005",
    ">\u047a\n>\u0003?\u0003?\u0003?\u0007?\u047f\n?\f?\u000e?\u0482\u000b",
    "?\u0003@\u0003@\u0005@\u0486\n@\u0003@\u0003@\u0003@\u0003@\u0005@\u048c",
    "\n@\u0003@\u0003@\u0005@\u0490\n@\u0003@\u0005@\u0493\n@\u0003A\u0003",
    "A\u0003A\u0007A\u0498\nA\fA\u000eA\u049b\u000bA\u0003B\u0003B\u0005",
    "B\u049f\nB\u0003B\u0003B\u0005B\u04a3\nB\u0003B\u0005B\u04a6\nB\u0003",
    "C\u0003C\u0003C\u0005C\u04ab\nC\u0003C\u0003C\u0003C\u0003D\u0003D\u0003",
    "D\u0007D\u04b3\nD\fD\u000eD\u04b6\u000bD\u0003E\u0003E\u0003E\u0003",
    "E\u0005E\u04bc\nE\u0003E\u0003E\u0005E\u04c0\nE\u0003E\u0003E\u0007",
    "E\u04c4\nE\fE\u000eE\u04c7\u000bE\u0003F\u0005F\u04ca\nF\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u04d1\nF\u0003G\u0003G\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0007H\u04dd\nH\fH\u000eH\u04e0",
    "\u000bH\u0003H\u0003H\u0005H\u04e4\nH\u0003I\u0003I\u0003I\u0005I\u04e9",
    "\nI\u0003J\u0003J\u0005J\u04ed\nJ\u0003K\u0003K\u0003L\u0003L\u0003",
    "M\u0003M\u0003M\u0003M\u0007M\u04f7\nM\fM\u000eM\u04fa\u000bM\u0003",
    "N\u0003N\u0003O\u0003O\u0003O\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003",
    "R\u0003S\u0003S\u0003T\u0003T\u0003U\u0003U\u0003U\u0005U\u050e\nU\u0003",
    "V\u0003V\u0003V\u0003V\u0007V\u0514\nV\fV\u000eV\u0517\u000bV\u0003",
    "V\u0003V\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003",
    "Z\u0003Z\u0005Z\u0525\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u052c",
    "\n[\u0003\\\u0003\\\u0003\\\u0003]\u0003]\u0003^\u0003^\u0003_\u0003",
    "_\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0003b\u0002\u0003\u0006",
    "c\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u0002\'\u0004",
    "\u0002\u000f\u0010))\u0003\u0002\u0011\u0012\u0004\u0002\u000f\u0010",
    "TT\u0003\u0002\'(\u0003\u0002+,\u0003\u0002 !\u0004\u0002\u00c2\u00c2",
    "\u00c4\u00c4\u0003\u0002\u00b9\u00ba\u0003\u0002\u00bb\u00bc\u0005\u0002",
    "SSUWz{\u0006\u0002KKMMbb~\u0080\u0003\u0002OP\u0004\u0002NNQR\u0004",
    "\u0002>>\u00c9\u00c9\u0003\u0002\u009a\u009b\u0004\u0002ii\u00ec\u00ec",
    "\u0003\u0002HI\u0004\u000222\u0083\u0083\u0004\u0002>>jj\u0005\u0002",
    "FGY\\\u0084\u0087\u0006\u0002FGY\\\u0084\u0087\u008b\u008c\u0003\u0002",
    "\u008d\u008e\u0003\u0002DE\u0004\u0002BB\u0089\u0089\u0003\u0002lm\u0003",
    "\u0002\u000f\u0010\u0004\u0002\u00e9\u00ea\u00ed\u00ed\u0004\u0002\u000f",
    "\u000f\u0011\u0011\u0005\u0002>>jj\u00e0\u00e0\u0003\u0002\u00d9\u00de",
    "\u0004\u0002pp\u00d4\u00d4\u0005\u0002ppww\u00d3\u00d3\u0004\u0002>",
    ">\u00d8\u00d8\u0003\u0002\t\u000e\u0004\u0002--\u00e9\u00ec\u0005\u0002",
    "\u00a0\u00a6\u00ca\u00ca\u00e1\u00e1\u0004\u0002>>\u00eb\u00eb\u0002",
    "\u05ac\u0002\u00c9\u0003\u0002\u0002\u0002\u0004\u00d7\u0003\u0002\u0002",
    "\u0002\u0006\u00ea\u0003\u0002\u0002\u0002\b\u011c\u0003\u0002\u0002",
    "\u0002\n\u0126\u0003\u0002\u0002\u0002\f\u0128\u0003\u0002\u0002\u0002",
    "\u000e\u0131\u0003\u0002\u0002\u0002\u0010\u0139\u0003\u0002\u0002\u0002",
    "\u0012\u013c\u0003\u0002\u0002\u0002\u0014\u0145\u0003\u0002\u0002\u0002",
    "\u0016\u014e\u0003\u0002\u0002\u0002\u0018\u0153\u0003\u0002\u0002\u0002",
    "\u001a\u0160\u0003\u0002\u0002\u0002\u001c\u0175\u0003\u0002\u0002\u0002",
    "\u001e\u01a9\u0003\u0002\u0002\u0002 \u01e4\u0003\u0002\u0002\u0002",
    "\"\u01e9\u0003\u0002\u0002\u0002$\u021b\u0003\u0002\u0002\u0002&\u0238",
    "\u0003\u0002\u0002\u0002(\u025a\u0003\u0002\u0002\u0002*\u028a\u0003",
    "\u0002\u0002\u0002,\u02a9\u0003\u0002\u0002\u0002.\u02ab\u0003\u0002",
    "\u0002\u00020\u02ff\u0003\u0002\u0002\u00022\u0301\u0003\u0002\u0002",
    "\u00024\u0308\u0003\u0002\u0002\u00026\u0341\u0003\u0002\u0002\u0002",
    "8\u0343\u0003\u0002\u0002\u0002:\u034a\u0003\u0002\u0002\u0002<\u034e",
    "\u0003\u0002\u0002\u0002>\u0357\u0003\u0002\u0002\u0002@\u035e\u0003",
    "\u0002\u0002\u0002B\u0364\u0003\u0002\u0002\u0002D\u0368\u0003\u0002",
    "\u0002\u0002F\u0370\u0003\u0002\u0002\u0002H\u0383\u0003\u0002\u0002",
    "\u0002J\u0389\u0003\u0002\u0002\u0002L\u0396\u0003\u0002\u0002\u0002",
    "N\u0399\u0003\u0002\u0002\u0002P\u03a3\u0003\u0002\u0002\u0002R\u03ad",
    "\u0003\u0002\u0002\u0002T\u03b4\u0003\u0002\u0002\u0002V\u03bb\u0003",
    "\u0002\u0002\u0002X\u03c8\u0003\u0002\u0002\u0002Z\u03d7\u0003\u0002",
    "\u0002\u0002\\\u03d9\u0003\u0002\u0002\u0002^\u03dc\u0003\u0002\u0002",
    "\u0002`\u03e5\u0003\u0002\u0002\u0002b\u03e9\u0003\u0002\u0002\u0002",
    "d\u03f0\u0003\u0002\u0002\u0002f\u03f5\u0003\u0002\u0002\u0002h\u03f9",
    "\u0003\u0002\u0002\u0002j\u0404\u0003\u0002\u0002\u0002l\u040b\u0003",
    "\u0002\u0002\u0002n\u0419\u0003\u0002\u0002\u0002p\u043d\u0003\u0002",
    "\u0002\u0002r\u0467\u0003\u0002\u0002\u0002t\u0469\u0003\u0002\u0002",
    "\u0002v\u046b\u0003\u0002\u0002\u0002x\u046d\u0003\u0002\u0002\u0002",
    "z\u0476\u0003\u0002\u0002\u0002|\u047b\u0003\u0002\u0002\u0002~\u0485",
    "\u0003\u0002\u0002\u0002\u0080\u0494\u0003\u0002\u0002\u0002\u0082\u049e",
    "\u0003\u0002\u0002\u0002\u0084\u04a7\u0003\u0002\u0002\u0002\u0086\u04af",
    "\u0003\u0002\u0002\u0002\u0088\u04bb\u0003\u0002\u0002\u0002\u008a\u04c9",
    "\u0003\u0002\u0002\u0002\u008c\u04d2\u0003\u0002\u0002\u0002\u008e\u04e3",
    "\u0003\u0002\u0002\u0002\u0090\u04e5\u0003\u0002\u0002\u0002\u0092\u04ea",
    "\u0003\u0002\u0002\u0002\u0094\u04ee\u0003\u0002\u0002\u0002\u0096\u04f0",
    "\u0003\u0002\u0002\u0002\u0098\u04f2\u0003\u0002\u0002\u0002\u009a\u04fb",
    "\u0003\u0002\u0002\u0002\u009c\u04fd\u0003\u0002\u0002\u0002\u009e\u0500",
    "\u0003\u0002\u0002\u0002\u00a0\u0502\u0003\u0002\u0002\u0002\u00a2\u0504",
    "\u0003\u0002\u0002\u0002\u00a4\u0506\u0003\u0002\u0002\u0002\u00a6\u0508",
    "\u0003\u0002\u0002\u0002\u00a8\u050a\u0003\u0002\u0002\u0002\u00aa\u050f",
    "\u0003\u0002\u0002\u0002\u00ac\u051a\u0003\u0002\u0002\u0002\u00ae\u051d",
    "\u0003\u0002\u0002\u0002\u00b0\u0520\u0003\u0002\u0002\u0002\u00b2\u0524",
    "\u0003\u0002\u0002\u0002\u00b4\u052b\u0003\u0002\u0002\u0002\u00b6\u052d",
    "\u0003\u0002\u0002\u0002\u00b8\u0530\u0003\u0002\u0002\u0002\u00ba\u0532",
    "\u0003\u0002\u0002\u0002\u00bc\u0534\u0003\u0002\u0002\u0002\u00be\u0536",
    "\u0003\u0002\u0002\u0002\u00c0\u0538\u0003\u0002\u0002\u0002\u00c2\u053a",
    "\u0003\u0002\u0002\u0002\u00c4\u00c5\u0005\u0004\u0003\u0002\u00c5\u00c6",
    "\u0007\u00ef\u0002\u0002\u00c6\u00c8\u0003\u0002\u0002\u0002\u00c7\u00c4",
    "\u0003\u0002\u0002\u0002\u00c8\u00cb\u0003\u0002\u0002\u0002\u00c9\u00c7",
    "\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u00cc",
    "\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc\u00cd",
    "\u0007\u0002\u0002\u0003\u00cd\u0003\u0003\u0002\u0002\u0002\u00ce\u00cf",
    "\u0005\u00a4S\u0002\u00cf\u00d0\u0007\u0016\u0002\u0002\u00d0\u00d1",
    "\u0005\u0006\u0004\u0002\u00d1\u00d8\u0003\u0002\u0002\u0002\u00d2\u00d3",
    "\u0005\u00a4S\u0002\u00d3\u00d4\u0007s\u0002\u0002\u00d4\u00d5\u0005",
    "\u0006\u0004\u0002\u00d5\u00d8\u0003\u0002\u0002\u0002\u00d6\u00d8\u0005",
    "\u001e\u0010\u0002\u00d7\u00ce\u0003\u0002\u0002\u0002\u00d7\u00d2\u0003",
    "\u0002\u0002\u0002\u00d7\u00d6\u0003\u0002\u0002\u0002\u00d8\u0005\u0003",
    "\u0002\u0002\u0002\u00d9\u00da\b\u0004\u0001\u0002\u00da\u00db\u0007",
    "\u0003\u0002\u0002\u00db\u00dc\u0005\u0006\u0004\u0002\u00dc\u00dd\u0007",
    "\u0004\u0002\u0002\u00dd\u00eb\u0003\u0002\u0002\u0002\u00de\u00eb\u0005",
    "\b\u0005\u0002\u00df\u00e0\t\u0002\u0002\u0002\u00e0\u00eb\u0005\u0006",
    "\u0004\f\u00e1\u00e2\u0007\u0019\u0002\u0002\u00e2\u00e3\u0005\u0006",
    "\u0004\u0002\u00e3\u00e4\u0007\u001a\u0002\u0002\u00e4\u00e5\u0005\u0006",
    "\u0004\u0002\u00e5\u00e6\u0007\u001b\u0002\u0002\u00e6\u00e7\u0005\u0006",
    "\u0004\u0005\u00e7\u00eb\u0003\u0002\u0002\u0002\u00e8\u00eb\u0005\u00be",
    "`\u0002\u00e9\u00eb\u0005\u00a4S\u0002\u00ea\u00d9\u0003\u0002\u0002",
    "\u0002\u00ea\u00de\u0003\u0002\u0002\u0002\u00ea\u00df\u0003\u0002\u0002",
    "\u0002\u00ea\u00e1\u0003\u0002\u0002\u0002\u00ea\u00e8\u0003\u0002\u0002",
    "\u0002\u00ea\u00e9\u0003\u0002\u0002\u0002\u00eb\u010c\u0003\u0002\u0002",
    "\u0002\u00ec\u00ed\f\u000b\u0002\u0002\u00ed\u00ee\t\u0003\u0002\u0002",
    "\u00ee\u010b\u0005\u0006\u0004\f\u00ef\u00f0\f\n\u0002\u0002\u00f0\u00f1",
    "\t\u0004\u0002\u0002\u00f1\u010b\u0005\u0006\u0004\u000b\u00f2\u00f3",
    "\f\t\u0002\u0002\u00f3\u00f4\u0005\u00b0Y\u0002\u00f4\u00f5\u0005\u0006",
    "\u0004\n\u00f5\u010b\u0003\u0002\u0002\u0002\u00f6\u00f7\f\u0007\u0002",
    "\u0002\u00f7\u00f8\u0007&\u0002\u0002\u00f8\u010b\u0005\u0006\u0004",
    "\b\u00f9\u00fa\f\u0006\u0002\u0002\u00fa\u00fb\t\u0005\u0002\u0002\u00fb",
    "\u010b\u0005\u0006\u0004\u0007\u00fc\u00fd\f\u000e\u0002\u0002\u00fd",
    "\u00fe\u0007\u0005\u0002\u0002\u00fe\u00ff\u0005\n\u0006\u0002\u00ff",
    "\u0100\u0007\u0006\u0002\u0002\u0100\u010b\u0003\u0002\u0002\u0002\u0101",
    "\u0102\f\r\u0002\u0002\u0102\u0103\u0007\u0017\u0002\u0002\u0103\u010b",
    "\u0005\u00a6T\u0002\u0104\u0105\f\b\u0002\u0002\u0105\u0108\t\u0006",
    "\u0002\u0002\u0106\u0109\u0005\u00aaV\u0002\u0107\u0109\u0005\u00b8",
    "]\u0002\u0108\u0106\u0003\u0002\u0002\u0002\u0108\u0107\u0003\u0002",
    "\u0002\u0002\u0109\u010b\u0003\u0002\u0002\u0002\u010a\u00ec\u0003\u0002",
    "\u0002\u0002\u010a\u00ef\u0003\u0002\u0002\u0002\u010a\u00f2\u0003\u0002",
    "\u0002\u0002\u010a\u00f6\u0003\u0002\u0002\u0002\u010a\u00f9\u0003\u0002",
    "\u0002\u0002\u010a\u00fc\u0003\u0002\u0002\u0002\u010a\u0101\u0003\u0002",
    "\u0002\u0002\u010a\u0104\u0003\u0002\u0002\u0002\u010b\u010e\u0003\u0002",
    "\u0002\u0002\u010c\u010a\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002",
    "\u0002\u0002\u010d\u0007\u0003\u0002\u0002\u0002\u010e\u010c\u0003\u0002",
    "\u0002\u0002\u010f\u011d\u0005\u001c\u000f\u0002\u0110\u011d\u0005 ",
    "\u0011\u0002\u0111\u011d\u0005$\u0013\u0002\u0112\u011d\u0005&\u0014",
    "\u0002\u0113\u011d\u0005(\u0015\u0002\u0114\u011d\u0005*\u0016\u0002",
    "\u0115\u011d\u0005,\u0017\u0002\u0116\u011d\u0005.\u0018\u0002\u0117",
    "\u011d\u00050\u0019\u0002\u0118\u011d\u00052\u001a\u0002\u0119\u011d",
    "\u00054\u001b\u0002\u011a\u011d\u00056\u001c\u0002\u011b\u011d\u0005",
    "8\u001d\u0002\u011c\u010f\u0003\u0002\u0002\u0002\u011c\u0110\u0003",
    "\u0002\u0002\u0002\u011c\u0111\u0003\u0002\u0002\u0002\u011c\u0112\u0003",
    "\u0002\u0002\u0002\u011c\u0113\u0003\u0002\u0002\u0002\u011c\u0114\u0003",
    "\u0002\u0002\u0002\u011c\u0115\u0003\u0002\u0002\u0002\u011c\u0116\u0003",
    "\u0002\u0002\u0002\u011c\u0117\u0003\u0002\u0002\u0002\u011c\u0118\u0003",
    "\u0002\u0002\u0002\u011c\u0119\u0003\u0002\u0002\u0002\u011c\u011a\u0003",
    "\u0002\u0002\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011d\t\u0003",
    "\u0002\u0002\u0002\u011e\u0127\u0005\f\u0007\u0002\u011f\u0127\u0005",
    "\u000e\b\u0002\u0120\u0127\u0005\u0010\t\u0002\u0121\u0127\u0005\u0012",
    "\n\u0002\u0122\u0127\u0005\u0014\u000b\u0002\u0123\u0127\u0005\u0016",
    "\f\u0002\u0124\u0127\u0005\u0018\r\u0002\u0125\u0127\u0005\u001a\u000e",
    "\u0002\u0126\u011e\u0003\u0002\u0002\u0002\u0126\u011f\u0003\u0002\u0002",
    "\u0002\u0126\u0120\u0003\u0002\u0002\u0002\u0126\u0121\u0003\u0002\u0002",
    "\u0002\u0126\u0122\u0003\u0002\u0002\u0002\u0126\u0123\u0003\u0002\u0002",
    "\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0125\u0003\u0002\u0002",
    "\u0002\u0127\u000b\u0003\u0002\u0002\u0002\u0128\u0129\u0007$\u0002",
    "\u0002\u0129\u012e\u0005:\u001e\u0002\u012a\u012b\u0007\u0013\u0002",
    "\u0002\u012b\u012d\u0005:\u001e\u0002\u012c\u012a\u0003\u0002\u0002",
    "\u0002\u012d\u0130\u0003\u0002\u0002\u0002\u012e\u012c\u0003\u0002\u0002",
    "\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\r\u0003\u0002\u0002",
    "\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0132\u0007?\u0002",
    "\u0002\u0132\u0137\u0005<\u001f\u0002\u0133\u0135\u0005Z.\u0002\u0134",
    "\u0136\u0005\\/\u0002\u0135\u0134\u0003\u0002\u0002\u0002\u0135\u0136",
    "\u0003\u0002\u0002\u0002\u0136\u0138\u0003\u0002\u0002\u0002\u0137\u0133",
    "\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138\u000f",
    "\u0003\u0002\u0002\u0002\u0139\u013a\u0007`\u0002\u0002\u013a\u013b",
    "\u0005\u0006\u0004\u0002\u013b\u0011\u0003\u0002\u0002\u0002\u013c\u013d",
    "\u0007\"\u0002\u0002\u013d\u0142\u0005@!\u0002\u013e\u013f\u0007\u0013",
    "\u0002\u0002\u013f\u0141\u0005@!\u0002\u0140\u013e\u0003\u0002\u0002",
    "\u0002\u0141\u0144\u0003\u0002\u0002\u0002\u0142\u0140\u0003\u0002\u0002",
    "\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u0013\u0003\u0002\u0002",
    "\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0145\u0146\t\u0007\u0002",
    "\u0002\u0146\u014b\u0005\u00a8U\u0002\u0147\u0148\u0007\u0013\u0002",
    "\u0002\u0148\u014a\u0005\u00a8U\u0002\u0149\u0147\u0003\u0002\u0002",
    "\u0002\u014a\u014d\u0003\u0002\u0002\u0002\u014b\u0149\u0003\u0002\u0002",
    "\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u0015\u0003\u0002\u0002",
    "\u0002\u014d\u014b\u0003\u0002\u0002\u0002\u014e\u014f\t\b\u0002\u0002",
    "\u014f\u0150\u0005\u00a8U\u0002\u0150\u0151\u0007\u0013\u0002\u0002",
    "\u0151\u0152\u0005\u00a8U\u0002\u0152\u0017\u0003\u0002\u0002\u0002",
    "\u0153\u0154\u0007\u00c3\u0002\u0002\u0154\u0155\u0005\u00a8U\u0002",
    "\u0155\u0156\u0007\u0013\u0002\u0002\u0156\u0157\u0005\u00a8U\u0002",
    "\u0157\u0158\u0007+\u0002\u0002\u0158\u015d\u0005\u00be`\u0002\u0159",
    "\u015a\u0007\u0013\u0002\u0002\u015a\u015c\u0005\u00be`\u0002\u015b",
    "\u0159\u0003\u0002\u0002\u0002\u015c\u015f\u0003\u0002\u0002\u0002\u015d",
    "\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015e",
    "\u0019\u0003\u0002\u0002\u0002\u015f\u015d\u0003\u0002\u0002\u0002\u0160",
    "\u0161\u0007\u00c5\u0002\u0002\u0161\u0166\u0005B\"\u0002\u0162\u0163",
    "\u0007\u0013\u0002\u0002\u0163\u0165\u0005B\"\u0002\u0164\u0162\u0003",
    "\u0002\u0002\u0002\u0165\u0168\u0003\u0002\u0002\u0002\u0166\u0164\u0003",
    "\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u001b\u0003",
    "\u0002\u0002\u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0169\u016a\t",
    "\t\u0002\u0002\u016a\u016b\u0007\u0003\u0002\u0002\u016b\u016c\u0005",
    "F$\u0002\u016c\u016d\u0005J&\u0002\u016d\u016e\u0007\u0004\u0002\u0002",
    "\u016e\u0176\u0003\u0002\u0002\u0002\u016f\u0170\t\n\u0002\u0002\u0170",
    "\u0171\u0007\u0003\u0002\u0002\u0171\u0172\u0005D#\u0002\u0172\u0173",
    "\u0005J&\u0002\u0173\u0174\u0007\u0004\u0002\u0002\u0174\u0176\u0003",
    "\u0002\u0002\u0002\u0175\u0169\u0003\u0002\u0002\u0002\u0175\u016f\u0003",
    "\u0002\u0002\u0002\u0176\u001d\u0003\u0002\u0002\u0002\u0177\u0178\u0007",
    "r\u0002\u0002\u0178\u0179\u0007q\u0002\u0002\u0179\u017a\u0005\u00ba",
    "^\u0002\u017a\u0183\u0007\u0003\u0002\u0002\u017b\u0180\u0005^0\u0002",
    "\u017c\u017d\u0007\u0013\u0002\u0002\u017d\u017f\u0005^0\u0002\u017e",
    "\u017c\u0003\u0002\u0002\u0002\u017f\u0182\u0003\u0002\u0002\u0002\u0180",
    "\u017e\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181",
    "\u0184\u0003\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0183",
    "\u017b\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184",
    "\u0185\u0003\u0002\u0002\u0002\u0185\u0188\u0007\u0004\u0002\u0002\u0186",
    "\u0187\u0007\u00c1\u0002\u0002\u0187\u0189\u0005`1\u0002\u0188\u0186",
    "\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u018a",
    "\u0003\u0002\u0002\u0002\u018a\u018b\u0007\u00b0\u0002\u0002\u018b\u018c",
    "\u0005\u0006\u0004\u0002\u018c\u018d\u0007x\u0002\u0002\u018d\u018e",
    "\u0007q\u0002\u0002\u018e\u01aa\u0003\u0002\u0002\u0002\u018f\u0190",
    "\u0007r\u0002\u0002\u0190\u0191\u0007t\u0002\u0002\u0191\u0192\u0007",
    "v\u0002\u0002\u0192\u0193\u0005v<\u0002\u0193\u0194\u0007\u0003\u0002",
    "\u0002\u0194\u0195\u0005x=\u0002\u0195\u0196\u0007\u0004\u0002\u0002",
    "\u0196\u0197\u0007\u00b0\u0002\u0002\u0197\u0198\u0005|?\u0002\u0198",
    "\u0199\u0007x\u0002\u0002\u0199\u019a\u0007t\u0002\u0002\u019a\u019b",
    "\u0007v\u0002\u0002\u019b\u01aa\u0003\u0002\u0002\u0002\u019c\u019d",
    "\u0007r\u0002\u0002\u019d\u019e\u0007u\u0002\u0002\u019e\u019f\u0007",
    "v\u0002\u0002\u019f\u01a0\u0005v<\u0002\u01a0\u01a1\u0007\u0003\u0002",
    "\u0002\u01a1\u01a2\u0005\u0084C\u0002\u01a2\u01a3\u0007\u0004\u0002",
    "\u0002\u01a3\u01a4\u0007\u00b0\u0002\u0002\u01a4\u01a5\u0005\u0080A",
    "\u0002\u01a5\u01a6\u0007x\u0002\u0002\u01a6\u01a7\u0007u\u0002\u0002",
    "\u01a7\u01a8\u0007v\u0002\u0002\u01a8\u01aa\u0003\u0002\u0002\u0002",
    "\u01a9\u0177\u0003\u0002\u0002\u0002\u01a9\u018f\u0003\u0002\u0002\u0002",
    "\u01a9\u019c\u0003\u0002\u0002\u0002\u01aa\u001f\u0003\u0002\u0002\u0002",
    "\u01ab\u01ac\u0005\u00ba^\u0002\u01ac\u01b5\u0007\u0003\u0002\u0002",
    "\u01ad\u01b2\u0005\"\u0012\u0002\u01ae\u01af\u0007\u0013\u0002\u0002",
    "\u01af\u01b1\u0005\"\u0012\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002",
    "\u01b1\u01b4\u0003\u0002\u0002\u0002\u01b2\u01b0\u0003\u0002\u0002\u0002",
    "\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b6\u0003\u0002\u0002\u0002",
    "\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b5\u01ad\u0003\u0002\u0002\u0002",
    "\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002\u0002\u0002",
    "\u01b7\u01b8\u0007\u0004\u0002\u0002\u01b8\u01e5\u0003\u0002\u0002\u0002",
    "\u01b9\u01ba\u0007\u0018\u0002\u0002\u01ba\u01bb\u0007\u0003\u0002\u0002",
    "\u01bb\u01bc\u0005\u00bc_\u0002\u01bc\u01bf\u0007\u0003\u0002\u0002",
    "\u01bd\u01c0\u0005\u00a4S\u0002\u01be\u01c0\u0005\u00be`\u0002\u01bf",
    "\u01bd\u0003\u0002\u0002\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01bf",
    "\u01c0\u0003\u0002\u0002\u0002\u01c0\u01c8\u0003\u0002\u0002\u0002\u01c1",
    "\u01c4\u0007\u0013\u0002\u0002\u01c2\u01c5\u0005\u00a4S\u0002\u01c3",
    "\u01c5\u0005\u00be`\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002\u01c4",
    "\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c7\u0003\u0002\u0002\u0002\u01c6",
    "\u01c1\u0003\u0002\u0002\u0002\u01c7\u01ca\u0003\u0002\u0002\u0002\u01c8",
    "\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9",
    "\u01cb\u0003\u0002\u0002\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002\u01cb",
    "\u01ce\u0007\u0004\u0002\u0002\u01cc\u01cd\u0007\u00e8\u0002\u0002\u01cd",
    "\u01cf\u0007\u00ec\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002\u0002\u01ce",
    "\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d2\u0003\u0002\u0002\u0002\u01d0",
    "\u01d1\u0007\u00c1\u0002\u0002\u01d1\u01d3\u0005l7\u0002\u01d2\u01d0",
    "\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d4",
    "\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007\u0004\u0002\u0002\u01d5\u01e5",
    "\u0003\u0002\u0002\u0002\u01d6\u01d7\u0007\u00d2\u0002\u0002\u01d7\u01d8",
    "\u0007\u0003\u0002\u0002\u01d8\u01d9\u0005\u0006\u0004\u0002\u01d9\u01dc",
    "\u0007\u0013\u0002\u0002\u01da\u01dd\u0005\u00c0a\u0002\u01db\u01dd",
    "\u0005t;\u0002\u01dc\u01da\u0003\u0002\u0002\u0002\u01dc\u01db\u0003",
    "\u0002\u0002\u0002\u01dd\u01e0\u0003\u0002\u0002\u0002\u01de\u01df\u0007",
    "\u0013\u0002\u0002\u01df\u01e1\u0007\u00ec\u0002\u0002\u01e0\u01de\u0003",
    "\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0007\u0004\u0002\u0002\u01e3\u01e5\u0003",
    "\u0002\u0002\u0002\u01e4\u01ab\u0003\u0002\u0002\u0002\u01e4\u01b9\u0003",
    "\u0002\u0002\u0002\u01e4\u01d6\u0003\u0002\u0002\u0002\u01e5!\u0003",
    "\u0002\u0002\u0002\u01e6\u01ea\u0005\u00a4S\u0002\u01e7\u01ea\u0005",
    "\u00be`\u0002\u01e8\u01ea\u0007i\u0002\u0002\u01e9\u01e6\u0003\u0002",
    "\u0002\u0002\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9\u01e8\u0003\u0002",
    "\u0002\u0002\u01ea#\u0003\u0002\u0002\u0002\u01eb\u01ec\t\u000b\u0002",
    "\u0002\u01ec\u01ed\u0007\u0003\u0002\u0002\u01ed\u01ee\u0005\u0006\u0004",
    "\u0002\u01ee\u01ef\u0007\u0004\u0002\u0002\u01ef\u021c\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0007X\u0002\u0002\u01f1\u01f2\u0007\u0003\u0002",
    "\u0002\u01f2\u01fd\u0005\u0006\u0004\u0002\u01f3\u01f4\u0007\u0013\u0002",
    "\u0002\u01f4\u01f5\u0005\u00b2Z\u0002\u01f5\u01f6\u0003\u0002\u0002",
    "\u0002\u01f6\u01f7\u0007\u0013\u0002\u0002\u01f7\u01f8\u0005\u00b2Z",
    "\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9\u01f3\u0003\u0002\u0002",
    "\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa\u01fe\u0003\u0002\u0002",
    "\u0002\u01fb\u01fc\u0007\u0013\u0002\u0002\u01fc\u01fe\u0005\u00b2Z",
    "\u0002\u01fd\u01f9\u0003\u0002\u0002\u0002\u01fd\u01fb\u0003\u0002\u0002",
    "\u0002\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u0200\u0007\u0004\u0002",
    "\u0002\u0200\u021c\u0003\u0002\u0002\u0002\u0201\u0202\u0007}\u0002",
    "\u0002\u0202\u0203\u0007\u0003\u0002\u0002\u0203\u0204\u0005\u0006\u0004",
    "\u0002\u0204\u0205\u0007\u0013\u0002\u0002\u0205\u0208\u0005\u0006\u0004",
    "\u0002\u0206\u0207\u0007\u0013\u0002\u0002\u0207\u0209\u0005\u00b2Z",
    "\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002",
    "\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020b\u0007\u0004\u0002",
    "\u0002\u020b\u021c\u0003\u0002\u0002\u0002\u020c\u020d\u0007|\u0002",
    "\u0002\u020d\u020e\u0007\u0003\u0002\u0002\u020e\u020f\u0005\u0006\u0004",
    "\u0002\u020f\u0210\u0007\u0013\u0002\u0002\u0210\u0213\u0005\u0006\u0004",
    "\u0002\u0211\u0212\u0007\u0013\u0002\u0002\u0212\u0214\u0005\u00b2Z",
    "\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002",
    "\u0002\u0214\u0217\u0003\u0002\u0002\u0002\u0215\u0216\u0007\u0013\u0002",
    "\u0002\u0216\u0218\u0005\u00b2Z\u0002\u0217\u0215\u0003\u0002\u0002",
    "\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002",
    "\u0002\u0219\u021a\u0007\u0004\u0002\u0002\u021a\u021c\u0003\u0002\u0002",
    "\u0002\u021b\u01eb\u0003\u0002\u0002\u0002\u021b\u01f0\u0003\u0002\u0002",
    "\u0002\u021b\u0201\u0003\u0002\u0002\u0002\u021b\u020c\u0003\u0002\u0002",
    "\u0002\u021c%\u0003\u0002\u0002\u0002\u021d\u021e\u0007\u0081\u0002",
    "\u0002\u021e\u0220\u0007\u0003\u0002\u0002\u021f\u0221\u0005\u00b2Z",
    "\u0002\u0220\u021f\u0003\u0002\u0002\u0002\u0220\u0221\u0003\u0002\u0002",
    "\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222\u0239\u0007\u0004\u0002",
    "\u0002\u0223\u0224\t\f\u0002\u0002\u0224\u0225\u0007\u0003\u0002\u0002",
    "\u0225\u0226\u0005\u0006\u0004\u0002\u0226\u0227\u0007\u0004\u0002\u0002",
    "\u0227\u0239\u0003\u0002\u0002\u0002\u0228\u0229\t\r\u0002\u0002\u0229",
    "\u022a\u0007\u0003\u0002\u0002\u022a\u022d\u0005\u0006\u0004\u0002\u022b",
    "\u022c\u0007\u0013\u0002\u0002\u022c\u022e\u0005\u00b2Z\u0002\u022d",
    "\u022b\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022e",
    "\u022f\u0003\u0002\u0002\u0002\u022f\u0230\u0007\u0004\u0002\u0002\u0230",
    "\u0239\u0003\u0002\u0002\u0002\u0231\u0232\t\u000e\u0002\u0002\u0232",
    "\u0233\u0007\u0003\u0002\u0002\u0233\u0234\u0005\u0006\u0004\u0002\u0234",
    "\u0235\u0007\u0013\u0002\u0002\u0235\u0236\u0005\u0006\u0004\u0002\u0236",
    "\u0237\u0007\u0004\u0002\u0002\u0237\u0239\u0003\u0002\u0002\u0002\u0238",
    "\u021d\u0003\u0002\u0002\u0002\u0238\u0223\u0003\u0002\u0002\u0002\u0238",
    "\u0228\u0003\u0002\u0002\u0002\u0238\u0231\u0003\u0002\u0002\u0002\u0239",
    "\'\u0003\u0002\u0002\u0002\u023a\u023b\u0007*\u0002\u0002\u023b\u023c",
    "\u0007\u0003\u0002\u0002\u023c\u023d\u0005\u0006\u0004\u0002\u023d\u023e",
    "\u0007\u0013\u0002\u0002\u023e\u023f\u0005\u0006\u0004\u0002\u023f\u0240",
    "\u0007\u0013\u0002\u0002\u0240\u0241\u0005\u0006\u0004\u0002\u0241\u0242",
    "\u0007\u0004\u0002\u0002\u0242\u025b\u0003\u0002\u0002\u0002\u0243\u0244",
    "\u0007e\u0002\u0002\u0244\u0245\u0007\u0003\u0002\u0002\u0245\u0246",
    "\u0005\u0006\u0004\u0002\u0246\u0247\u0007\u0013\u0002\u0002\u0247\u0248",
    "\u0005\u0006\u0004\u0002\u0248\u0249\u0007\u0004\u0002\u0002\u0249\u025b",
    "\u0003\u0002\u0002\u0002\u024a\u024b\u0007.\u0002\u0002\u024b\u024c",
    "\u0007\u0003\u0002\u0002\u024c\u024d\u0005\u0006\u0004\u0002\u024d\u024e",
    "\u0007\u0004\u0002\u0002\u024e\u025b\u0003\u0002\u0002\u0002\u024f\u0250",
    "\u00079\u0002\u0002\u0250\u0251\u0007\u0003\u0002\u0002\u0251\u0252",
    "\u0005\u0006\u0004\u0002\u0252\u0253\u0007\u0013\u0002\u0002\u0253\u0256",
    "\u0005\u0006\u0004\u0002\u0254\u0255\u0007\u0013\u0002\u0002\u0255\u0257",
    "\u0005\u00c2b\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0257",
    "\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u0259",
    "\u0007\u0004\u0002\u0002\u0259\u025b\u0003\u0002\u0002\u0002\u025a\u023a",
    "\u0003\u0002\u0002\u0002\u025a\u0243\u0003\u0002\u0002\u0002\u025a\u024a",
    "\u0003\u0002\u0002\u0002\u025a\u024f\u0003\u0002\u0002\u0002\u025b)",
    "\u0003\u0002\u0002\u0002\u025c\u025d\u0007\u00c8\u0002\u0002\u025d\u025f",
    "\u0007\u0003\u0002\u0002\u025e\u0260\u0005\u0006\u0004\u0002\u025f\u025e",
    "\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002\u0260\u0261",
    "\u0003\u0002\u0002\u0002\u0261\u028b\u0007\u0004\u0002\u0002\u0262\u0263",
    "\u0007\u0099\u0002\u0002\u0263\u0264\u0007\u0003\u0002\u0002\u0264\u0267",
    "\u0005\u0006\u0004\u0002\u0265\u0266\u0007\u0013\u0002\u0002\u0266\u0268",
    "\t\u000f\u0002\u0002\u0267\u0265\u0003\u0002\u0002\u0002\u0267\u0268",
    "\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002\u0002\u0269\u026a",
    "\u0007\u0004\u0002\u0002\u026a\u028b\u0003\u0002\u0002\u0002\u026b\u026c",
    "\t\u0010\u0002\u0002\u026c\u026d\u0007\u0003\u0002\u0002\u026d\u026e",
    "\u0005\u0006\u0004\u0002\u026e\u026f\u0007\u0004\u0002\u0002\u026f\u028b",
    "\u0003\u0002\u0002\u0002\u0270\u0271\u0007\u009c\u0002\u0002\u0271\u0272",
    "\u0007\u0003\u0002\u0002\u0272\u0273\u0005\u0006\u0004\u0002\u0273\u0274",
    "\u0007\u0013\u0002\u0002\u0274\u0275\u0005V,\u0002\u0275\u0276\u0007",
    "\u0004\u0002\u0002\u0276\u028b\u0003\u0002\u0002\u0002\u0277\u0278\u0007",
    "\u00cb\u0002\u0002\u0278\u0279\u0007\u0003\u0002\u0002\u0279\u027c\u0007",
    "\u00ec\u0002\u0002\u027a\u027b\u0007\u0013\u0002\u0002\u027b\u027d\t",
    "\u0011\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c\u027d\u0003",
    "\u0002\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002\u027e\u027f\u0007",
    "\u0013\u0002\u0002\u027f\u0281\u0005\u00b2Z\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u0284\u0003",
    "\u0002\u0002\u0002\u0282\u0283\u0007\u0013\u0002\u0002\u0283\u0285\t",
    "\u0012\u0002\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0284\u0285\u0003",
    "\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u028b\u0007",
    "\u0004\u0002\u0002\u0287\u0288\u0007\u001e\u0002\u0002\u0288\u0289\u0007",
    "\u0003\u0002\u0002\u0289\u028b\u0007\u0004\u0002\u0002\u028a\u025c\u0003",
    "\u0002\u0002\u0002\u028a\u0262\u0003\u0002\u0002\u0002\u028a\u026b\u0003",
    "\u0002\u0002\u0002\u028a\u0270\u0003\u0002\u0002\u0002\u028a\u0277\u0003",
    "\u0002\u0002\u0002\u028a\u0287\u0003\u0002\u0002\u0002\u028b+\u0003",
    "\u0002\u0002\u0002\u028c\u028d\u00070\u0002\u0002\u028d\u028e\u0007",
    "\u0003\u0002\u0002\u028e\u0291\u0005\u0006\u0004\u0002\u028f\u0290\u0007",
    "\u0013\u0002\u0002\u0290\u0292\u0005\u0006\u0004\u0002\u0291\u028f\u0003",
    "\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293\u0291\u0003",
    "\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0295\u0003",
    "\u0002\u0002\u0002\u0295\u0296\u0007\u0004\u0002\u0002\u0296\u02aa\u0003",
    "\u0002\u0002\u0002\u0297\u0298\u00073\u0002\u0002\u0298\u0299\u0007",
    "\u0003\u0002\u0002\u0299\u029c\u0005\u0006\u0004\u0002\u029a\u029b\u0007",
    "\u0013\u0002\u0002\u029b\u029d\u0005\u0006\u0004\u0002\u029c\u029a\u0003",
    "\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002\u029e\u029c\u0003",
    "\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u02a0\u0003",
    "\u0002\u0002\u0002\u02a0\u02a1\u0007\u0004\u0002\u0002\u02a1\u02aa\u0003",
    "\u0002\u0002\u0002\u02a2\u02a3\t\u0013\u0002\u0002\u02a3\u02a4\u0007",
    "\u0003\u0002\u0002\u02a4\u02a5\u0005\u0006\u0004\u0002\u02a5\u02a6\u0007",
    "\u0013\u0002\u0002\u02a6\u02a7\u0005\u0006\u0004\u0002\u02a7\u02a8\u0007",
    "\u0004\u0002\u0002\u02a8\u02aa\u0003\u0002\u0002\u0002\u02a9\u028c\u0003",
    "\u0002\u0002\u0002\u02a9\u0297\u0003\u0002\u0002\u0002\u02a9\u02a2\u0003",
    "\u0002\u0002\u0002\u02aa-\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007",
    "h\u0002\u0002\u02ac\u02ad\u0007\u0003\u0002\u0002\u02ad\u02ae\u0005",
    "\u0006\u0004\u0002\u02ae\u02af\u0007\u0013\u0002\u0002\u02af\u02b1\u0007",
    "\u00ed\u0002\u0002\u02b0\u02b2\u0005\u0098M\u0002\u02b1\u02b0\u0003",
    "\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b5\u0003",
    "\u0002\u0002\u0002\u02b3\u02b4\u0007w\u0002\u0002\u02b4\u02b6\u0005",
    "\u00a8U\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003",
    "\u0002\u0002\u0002\u02b6\u02b8\u0003\u0002\u0002\u0002\u02b7\u02b9\u0005",
    "\u0096L\u0002\u02b8\u02b7\u0003\u0002\u0002\u0002\u02b8\u02b9\u0003",
    "\u0002\u0002\u0002\u02b9\u02bb\u0003\u0002\u0002\u0002\u02ba\u02bc\u0005",
    "\u009eP\u0002\u02bb\u02ba\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003",
    "\u0002\u0002\u0002\u02bc\u02be\u0003\u0002\u0002\u0002\u02bd\u02bf\u0005",
    "\u00a0Q\u0002\u02be\u02bd\u0003\u0002\u0002\u0002\u02be\u02bf\u0003",
    "\u0002\u0002\u0002\u02bf\u02c0\u0003\u0002\u0002\u0002\u02c0\u02c1\u0007",
    "\u0004\u0002\u0002\u02c1/\u0003\u0002\u0002\u0002\u02c2\u02c3\u0007",
    "\u00d6\u0002\u0002\u02c3\u02c4\u0007\u0003\u0002\u0002\u02c4\u02c5\u0005",
    "\u0006\u0004\u0002\u02c5\u02c6\u0007\u0013\u0002\u0002\u02c6\u02d0\u0007",
    "\u00ed\u0002\u0002\u02c7\u02c8\u0007\u00df\u0002\u0002\u02c8\u02cd\u0005",
    "\u00a8U\u0002\u02c9\u02ca\u0007\u0013\u0002\u0002\u02ca\u02cc\u0005",
    "\u00a8U\u0002\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cc\u02cf\u0003",
    "\u0002\u0002\u0002\u02cd\u02cb\u0003\u0002\u0002\u0002\u02cd\u02ce\u0003",
    "\u0002\u0002\u0002\u02ce\u02d1\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003",
    "\u0002\u0002\u0002\u02d0\u02c7\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003",
    "\u0002\u0002\u0002\u02d1\u02d3\u0003\u0002\u0002\u0002\u02d2\u02d4\u0005",
    "\u0094K\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003",
    "\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007",
    "\u0004\u0002\u0002\u02d6\u0300\u0003\u0002\u0002\u0002\u02d7\u02d8\u0007",
    "\u00d7\u0002\u0002\u02d8\u02d9\u0007\u0003\u0002\u0002\u02d9\u02da\u0005",
    "\u0006\u0004\u0002\u02da\u02db\u0007\u0013\u0002\u0002\u02db\u02dd\u0007",
    "\u00ed\u0002\u0002\u02dc\u02de\u0005\u0098M\u0002\u02dd\u02dc\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u02e1\u0003",
    "\u0002\u0002\u0002\u02df\u02e0\u0007w\u0002\u0002\u02e0\u02e2\u0005",
    "\u00a8U\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003",
    "\u0002\u0002\u0002\u02e2\u02e4\u0003\u0002\u0002\u0002\u02e3\u02e5\u0005",
    "\u0096L\u0002\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003",
    "\u0002\u0002\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002\u02e6\u02e8\u0005",
    "\u009aN\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003",
    "\u0002\u0002\u0002\u02e8\u02ea\u0003\u0002\u0002\u0002\u02e9\u02eb\u0005",
    "\u0094K\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02ea\u02eb\u0003",
    "\u0002\u0002\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ed\u0007",
    "\u0004\u0002\u0002\u02ed\u0300\u0003\u0002\u0002\u0002\u02ee\u02ef\u0007",
    "8\u0002\u0002\u02ef\u02f0\u0007\u0003\u0002\u0002\u02f0\u02f2\u0005",
    "\u0006\u0004\u0002\u02f1\u02f3\u0005\u00acW\u0002\u02f2\u02f1\u0003",
    "\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f5\u0003",
    "\u0002\u0002\u0002\u02f4\u02f6\u0005\u00aeX\u0002\u02f5\u02f4\u0003",
    "\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f8\u0003",
    "\u0002\u0002\u0002\u02f7\u02f9\u0005\u009cO\u0002\u02f8\u02f7\u0003",
    "\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fb\u0003",
    "\u0002\u0002\u0002\u02fa\u02fc\t\u0014\u0002\u0002\u02fb\u02fa\u0003",
    "\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\u0007\u0004\u0002\u0002\u02fe\u0300\u0003",
    "\u0002\u0002\u0002\u02ff\u02c2\u0003\u0002\u0002\u0002\u02ff\u02d7\u0003",
    "\u0002\u0002\u0002\u02ff\u02ee\u0003\u0002\u0002\u0002\u03001\u0003",
    "\u0002\u0002\u0002\u0301\u0302\u0007g\u0002\u0002\u0302\u0303\u0007",
    "\u0003\u0002\u0002\u0303\u0304\u0005\u0006\u0004\u0002\u0304\u0305\u0007",
    "\u0013\u0002\u0002\u0305\u0306\u0005\u0006\u0004\u0002\u0306\u0307\u0007",
    "\u0004\u0002\u0002\u03073\u0003\u0002\u0002\u0002\u0308\u0309\t\u0015",
    "\u0002\u0002\u0309\u030a\u0007\u0003\u0002\u0002\u030a\u030f\u0005\u0006",
    "\u0004\u0002\u030b\u030d\u0005Z.\u0002\u030c\u030e\u0005\\/\u0002\u030d",
    "\u030c\u0003\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e",
    "\u0310\u0003\u0002\u0002\u0002\u030f\u030b\u0003\u0002\u0002\u0002\u030f",
    "\u0310\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311",
    "\u0312\u0007\u0004\u0002\u0002\u03125\u0003\u0002\u0002\u0002\u0313",
    "\u0314\t\u0016\u0002\u0002\u0314\u0315\u0007\u0003\u0002\u0002\u0315",
    "\u0316\u0005\u0006\u0004\u0002\u0316\u0317\u0007\u0090\u0002\u0002\u0317",
    "\u0319\u0007\u0003\u0002\u0002\u0318\u031a\u0005N(\u0002\u0319\u0318",
    "\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031c",
    "\u0003\u0002\u0002\u0002\u031b\u031d\u0005P)\u0002\u031c\u031b\u0003",
    "\u0002\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031d\u031f\u0003",
    "\u0002\u0002\u0002\u031e\u0320\u0005T+\u0002\u031f\u031e\u0003\u0002",
    "\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0321\u0003\u0002",
    "\u0002\u0002\u0321\u0322\u0007\u0004\u0002\u0002\u0322\u0323\u0007\u0004",
    "\u0002\u0002\u0323\u0342\u0003\u0002\u0002\u0002\u0324\u0325\t\u0017",
    "\u0002\u0002\u0325\u0326\u0007\u0003\u0002\u0002\u0326\u032c\u0005\u0006",
    "\u0004\u0002\u0327\u0328\u0007\u0013\u0002\u0002\u0328\u032a\u0005V",
    ",\u0002\u0329\u032b\u0005\u00be`\u0002\u032a\u0329\u0003\u0002\u0002",
    "\u0002\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u032d\u0003\u0002\u0002",
    "\u0002\u032c\u0327\u0003\u0002\u0002\u0002\u032c\u032d\u0003\u0002\u0002",
    "\u0002\u032d\u032e\u0003\u0002\u0002\u0002\u032e\u032f\u0007\u0090\u0002",
    "\u0002\u032f\u0331\u0007\u0003\u0002\u0002\u0330\u0332\u0005N(\u0002",
    "\u0331\u0330\u0003\u0002\u0002\u0002\u0331\u0332\u0003\u0002\u0002\u0002",
    "\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0005P)\u0002\u0334",
    "\u0335\u0003\u0002\u0002\u0002\u0335\u0336\u0007\u0004\u0002\u0002\u0336",
    "\u0337\u0007\u0004\u0002\u0002\u0337\u0342\u0003\u0002\u0002\u0002\u0338",
    "\u0339\u0007\u008f\u0002\u0002\u0339\u033a\u0007\u0003\u0002\u0002\u033a",
    "\u033b\u0005\u0006\u0004\u0002\u033b\u033c\u0007\u0090\u0002\u0002\u033c",
    "\u033d\u0007\u0003\u0002\u0002\u033d\u033e\u0005N(\u0002\u033e\u033f",
    "\u0007\u0004\u0002\u0002\u033f\u0340\u0007\u0004\u0002\u0002\u0340\u0342",
    "\u0003\u0002\u0002\u0002\u0341\u0313\u0003\u0002\u0002\u0002\u0341\u0324",
    "\u0003\u0002\u0002\u0002\u0341\u0338\u0003\u0002\u0002\u0002\u03427",
    "\u0003\u0002\u0002\u0002\u0343\u0344\u0007k\u0002\u0002\u0344\u0345",
    "\u0007\u0003\u0002\u0002\u0345\u0346\u0005\u0006\u0004\u0002\u0346\u0347",
    "\u0007\u0013\u0002\u0002\u0347\u0348\u0005\u0006\u0004\u0002\u0348\u0349",
    "\u0007\u0004\u0002\u0002\u03499\u0003\u0002\u0002\u0002\u034a\u034b",
    "\u0005\u00a8U\u0002\u034b\u034c\u0007:\u0002\u0002\u034c\u034d\u0005",
    "\u00a8U\u0002\u034d;\u0003\u0002\u0002\u0002\u034e\u0353\u0005> \u0002",
    "\u034f\u0350\u0007\u0013\u0002\u0002\u0350\u0352\u0005> \u0002\u0351",
    "\u034f\u0003\u0002\u0002\u0002\u0352\u0355\u0003\u0002\u0002\u0002\u0353",
    "\u0351\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354",
    "=\u0003\u0002\u0002\u0002\u0355\u0353\u0003\u0002\u0002\u0002\u0356",
    "\u0358\u0005\u00b4[\u0002\u0357\u0356\u0003\u0002\u0002\u0002\u0357",
    "\u0358\u0003\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359",
    "\u035a\u0005\u00a8U\u0002\u035a\u035b\u0007\u0016\u0002\u0002\u035b",
    "\u035c\u00054\u001b\u0002\u035c?\u0003\u0002\u0002\u0002\u035d\u035f",
    "\u0005\u00b4[\u0002\u035e\u035d\u0003\u0002\u0002\u0002\u035e\u035f",
    "\u0003\u0002\u0002\u0002\u035f\u0360\u0003\u0002\u0002\u0002\u0360\u0361",
    "\u0005\u00a8U\u0002\u0361\u0362\u0007\u0016\u0002\u0002\u0362\u0363",
    "\u0005\u0006\u0004\u0002\u0363A\u0003\u0002\u0002\u0002\u0364\u0365",
    "\u0005\u00a8U\u0002\u0365\u0366\u0007\t\u0002\u0002\u0366\u0367\u0005",
    "\u00be`\u0002\u0367C\u0003\u0002\u0002\u0002\u0368\u036d\u0005H%\u0002",
    "\u0369\u036a\u0007\u0013\u0002\u0002\u036a\u036c\u0005H%\u0002\u036b",
    "\u0369\u0003\u0002\u0002\u0002\u036c\u036f\u0003\u0002\u0002\u0002\u036d",
    "\u036b\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036e",
    "E\u0003\u0002\u0002\u0002\u036f\u036d\u0003\u0002\u0002\u0002\u0370",
    "\u0375\u0005H%\u0002\u0371\u0372\u0007\u0013\u0002\u0002\u0372\u0374",
    "\u0005H%\u0002\u0373\u0371\u0003\u0002\u0002\u0002\u0374\u0377\u0003",
    "\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002\u0375\u0376\u0003",
    "\u0002\u0002\u0002\u0376\u0381\u0003\u0002\u0002\u0002\u0377\u0375\u0003",
    "\u0002\u0002\u0002\u0378\u0379\u0007\u001c\u0002\u0002\u0379\u037e\u0005",
    "\u00a8U\u0002\u037a\u037b\u0007\u0013\u0002\u0002\u037b\u037d\u0005",
    "\u00a8U\u0002\u037c\u037a\u0003\u0002\u0002\u0002\u037d\u0380\u0003",
    "\u0002\u0002\u0002\u037e\u037c\u0003\u0002\u0002\u0002\u037e\u037f\u0003",
    "\u0002\u0002\u0002\u037f\u0382\u0003\u0002\u0002\u0002\u0380\u037e\u0003",
    "\u0002\u0002\u0002\u0381\u0378\u0003\u0002\u0002\u0002\u0381\u0382\u0003",
    "\u0002\u0002\u0002\u0382G\u0003\u0002\u0002\u0002\u0383\u0386\u0005",
    "\u0006\u0004\u0002\u0384\u0385\u0007%\u0002\u0002\u0385\u0387\u0005",
    "\u00a2R\u0002\u0386\u0384\u0003\u0002\u0002\u0002\u0386\u0387\u0003",
    "\u0002\u0002\u0002\u0387I\u0003\u0002\u0002\u0002\u0388\u038a\u0005",
    "\u0010\t\u0002\u0389\u0388\u0003\u0002\u0002\u0002\u0389\u038a\u0003",
    "\u0002\u0002\u0002\u038a\u038e\u0003\u0002\u0002\u0002\u038b\u038f\u0005",
    "\u0012\n\u0002\u038c\u038f\u0005L\'\u0002\u038d\u038f\u0005\u000e\b",
    "\u0002\u038e\u038b\u0003\u0002\u0002\u0002\u038e\u038c\u0003\u0002\u0002",
    "\u0002\u038e\u038d\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002",
    "\u0002\u038f\u0391\u0003\u0002\u0002\u0002\u0390\u0392\u0005\u0014\u000b",
    "\u0002\u0391\u0390\u0003\u0002\u0002\u0002\u0391\u0392\u0003\u0002\u0002",
    "\u0002\u0392\u0394\u0003\u0002\u0002\u0002\u0393\u0395\u0005\f\u0007",
    "\u0002\u0394\u0393\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002",
    "\u0002\u0395K\u0003\u0002\u0002\u0002\u0396\u0397\u0007\u00c6\u0002",
    "\u0002\u0397\u0398\u0005\u0006\u0004\u0002\u0398M\u0003\u0002\u0002",
    "\u0002\u0399\u039a\u0007\u0094\u0002\u0002\u039a\u039b\u0007B\u0002",
    "\u0002\u039b\u03a0\u0005\u00a8U\u0002\u039c\u039d\u0007\u0013\u0002",
    "\u0002\u039d\u039f\u0005\u00a8U\u0002\u039e\u039c\u0003\u0002\u0002",
    "\u0002\u039f\u03a2\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002\u0002",
    "\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1O\u0003\u0002\u0002",
    "\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007A\u0002",
    "\u0002\u03a4\u03a5\u0007B\u0002\u0002\u03a5\u03aa\u0005R*\u0002\u03a6",
    "\u03a7\u0007\u0013\u0002\u0002\u03a7\u03a9\u0005R*\u0002\u03a8\u03a6",
    "\u0003\u0002\u0002\u0002\u03a9\u03ac\u0003\u0002\u0002\u0002\u03aa\u03a8",
    "\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03abQ",
    "\u0003\u0002\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ad\u03af",
    "\u0005\u00a8U\u0002\u03ae\u03b0\t\u0018\u0002\u0002\u03af\u03ae\u0003",
    "\u0002\u0002\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0S\u0003",
    "\u0002\u0002\u0002\u03b1\u03b2\u0007n\u0002\u0002\u03b2\u03b5\u0007",
    "\u00b4\u0002\u0002\u03b3\u03b5\u0007\u0096\u0002\u0002\u03b4\u03b1\u0003",
    "\u0002\u0002\u0002\u03b4\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003",
    "\u0002\u0002\u0002\u03b6\u03b7\u0007*\u0002\u0002\u03b7\u03b8\u0005",
    "X-\u0002\u03b8\u03b9\u0007&\u0002\u0002\u03b9\u03ba\u0005X-\u0002\u03ba",
    "U\u0003\u0002\u0002\u0002\u03bb\u03bc\u0007\u00e9\u0002\u0002\u03bc",
    "W\u0003\u0002\u0002\u0002\u03bd\u03be\u0007\u00e9\u0002\u0002\u03be",
    "\u03c9\u0007\u0091\u0002\u0002\u03bf\u03c0\u0007\u00e9\u0002\u0002\u03c0",
    "\u03c9\u0007\u0092\u0002\u0002\u03c1\u03c2\u0007\u0097\u0002\u0002\u03c2",
    "\u03c3\u0007n\u0002\u0002\u03c3\u03c9\u0007\u00b5\u0002\u0002\u03c4",
    "\u03c5\u0007\u0093\u0002\u0002\u03c5\u03c9\u0007\u0091\u0002\u0002\u03c6",
    "\u03c7\u0007\u0093\u0002\u0002\u03c7\u03c9\u0007\u0092\u0002\u0002\u03c8",
    "\u03bd\u0003\u0002\u0002\u0002\u03c8\u03bf\u0003\u0002\u0002\u0002\u03c8",
    "\u03c1\u0003\u0002\u0002\u0002\u03c8\u03c4\u0003\u0002\u0002\u0002\u03c8",
    "\u03c6\u0003\u0002\u0002\u0002\u03c9Y\u0003\u0002\u0002\u0002\u03ca",
    "\u03cb\u0007\u0088\u0002\u0002\u03cb\u03cc\t\u0019\u0002\u0002\u03cc",
    "\u03d1\u0005\u00a8U\u0002\u03cd\u03ce\u0007\u0013\u0002\u0002\u03ce",
    "\u03d0\u0005\u00a8U\u0002\u03cf\u03cd\u0003\u0002\u0002\u0002\u03d0",
    "\u03d3\u0003\u0002\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d1",
    "\u03d2\u0003\u0002\u0002\u0002\u03d2\u03d8\u0003\u0002\u0002\u0002\u03d3",
    "\u03d1\u0003\u0002\u0002\u0002\u03d4\u03d5\u0007\u0088\u0002\u0002\u03d5",
    "\u03d6\u0007>\u0002\u0002\u03d6\u03d8\u0005\u0006\u0004\u0002\u03d7",
    "\u03ca\u0003\u0002\u0002\u0002\u03d7\u03d4\u0003\u0002\u0002\u0002\u03d8",
    "[\u0003\u0002\u0002\u0002\u03d9\u03da\u0007\u008a\u0002\u0002\u03da",
    "\u03db\u0005\u0006\u0004\u0002\u03db]\u0003\u0002\u0002\u0002\u03dc",
    "\u03dd\u0005\u00a4S\u0002\u03dd\u03e0\u0005d3\u0002\u03de\u03df\u0007",
    "\u00d5\u0002\u0002\u03df\u03e1\u0005\u00be`\u0002\u03e0\u03de\u0003",
    "\u0002\u0002\u0002\u03e0\u03e1\u0003\u0002\u0002\u0002\u03e1_\u0003",
    "\u0002\u0002\u0002\u03e2\u03e6\u0005h5\u0002\u03e3\u03e6\u0005l7\u0002",
    "\u03e4\u03e6\u0005j6\u0002\u03e5\u03e2\u0003\u0002\u0002\u0002\u03e5",
    "\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e4\u0003\u0002\u0002\u0002\u03e6",
    "a\u0003\u0002\u0002\u0002\u03e7\u03ea\u0005j6\u0002\u03e8\u03ea\u0005",
    "h5\u0002\u03e9\u03e7\u0003\u0002\u0002\u0002\u03e9\u03e8\u0003\u0002",
    "\u0002\u0002\u03eac\u0003\u0002\u0002\u0002\u03eb\u03f1\u0005h5\u0002",
    "\u03ec\u03f1\u0005l7\u0002\u03ed\u03f1\u0005n8\u0002\u03ee\u03f1\u0005",
    "f4\u0002\u03ef\u03f1\u0005j6\u0002\u03f0\u03eb\u0003\u0002\u0002\u0002",
    "\u03f0\u03ec\u0003\u0002\u0002\u0002\u03f0\u03ed\u0003\u0002\u0002\u0002",
    "\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0\u03ef\u0003\u0002\u0002\u0002",
    "\u03f1e\u0003\u0002\u0002\u0002\u03f2\u03f6\u0007v\u0002\u0002\u03f3",
    "\u03f6\u0005p9\u0002\u03f4\u03f6\u0005r:\u0002\u03f5\u03f2\u0003\u0002",
    "\u0002\u0002\u03f5\u03f3\u0003\u0002\u0002\u0002\u03f5\u03f4\u0003\u0002",
    "\u0002\u0002\u03f6g\u0003\u0002\u0002\u0002\u03f7\u03fa\u0005\u00c0",
    "a\u0002\u03f8\u03fa\u0005t;\u0002\u03f9\u03f7\u0003\u0002\u0002\u0002",
    "\u03f9\u03f8\u0003\u0002\u0002\u0002\u03fa\u03fc\u0003\u0002\u0002\u0002",
    "\u03fb\u03fd\u0005\u008eH\u0002\u03fc\u03fb\u0003\u0002\u0002\u0002",
    "\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u0402\u0003\u0002\u0002\u0002",
    "\u03fe\u0400\u0007)\u0002\u0002\u03ff\u03fe\u0003\u0002\u0002\u0002",
    "\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002",
    "\u0401\u0403\u0007-\u0002\u0002\u0402\u03ff\u0003\u0002\u0002\u0002",
    "\u0402\u0403\u0003\u0002\u0002\u0002\u0403i\u0003\u0002\u0002\u0002",
    "\u0404\u0409\u0005\u00b4[\u0002\u0405\u0406\u0007\n\u0002\u0002\u0406",
    "\u0407\u0005h5\u0002\u0407\u0408\u0007\u000b\u0002\u0002\u0408\u040a",
    "\u0003\u0002\u0002\u0002\u0409\u0405\u0003\u0002\u0002\u0002\u0409\u040a",
    "\u0003\u0002\u0002\u0002\u040ak\u0003\u0002\u0002\u0002\u040b\u0417",
    "\u0007p\u0002\u0002\u040c\u040d\u0007\u0007\u0002\u0002\u040d\u0412",
    "\u0005\u0090I\u0002\u040e\u040f\u0007\u0013\u0002\u0002\u040f\u0411",
    "\u0005\u0090I\u0002\u0410\u040e\u0003\u0002\u0002\u0002\u0411\u0414",
    "\u0003\u0002\u0002\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0412\u0413",
    "\u0003\u0002\u0002\u0002\u0413\u0415\u0003\u0002\u0002\u0002\u0414\u0412",
    "\u0003\u0002\u0002\u0002\u0415\u0416\u0007\b\u0002\u0002\u0416\u0418",
    "\u0003\u0002\u0002\u0002\u0417\u040c\u0003\u0002\u0002\u0002\u0417\u0418",
    "\u0003\u0002\u0002\u0002\u0418m\u0003\u0002\u0002\u0002\u0419\u041e",
    "\u0007\u00e7\u0002\u0002\u041a\u041b\u0007\n\u0002\u0002\u041b\u041c",
    "\u0005h5\u0002\u041c\u041d\u0007\u000b\u0002\u0002\u041d\u041f\u0003",
    "\u0002\u0002\u0002\u041e\u041a\u0003\u0002\u0002\u0002\u041e\u041f\u0003",
    "\u0002\u0002\u0002\u041fo\u0003\u0002\u0002\u0002\u0420\u043e\u0007",
    "t\u0002\u0002\u0421\u042d\u0007\u00e3\u0002\u0002\u0422\u0423\u0007",
    "\u0007\u0002\u0002\u0423\u0428\u0005t;\u0002\u0424\u0425\u0007\u0011",
    "\u0002\u0002\u0425\u0427\u0005t;\u0002\u0426\u0424\u0003\u0002\u0002",
    "\u0002\u0427\u042a\u0003\u0002\u0002\u0002\u0428\u0426\u0003\u0002\u0002",
    "\u0002\u0428\u0429\u0003\u0002\u0002\u0002\u0429\u042b\u0003\u0002\u0002",
    "\u0002\u042a\u0428\u0003\u0002\u0002\u0002\u042b\u042c\u0007\b\u0002",
    "\u0002\u042c\u042e\u0003\u0002\u0002\u0002\u042d\u0422\u0003\u0002\u0002",
    "\u0002\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u043e\u0003\u0002\u0002",
    "\u0002\u042f\u043b\u0007\u00e4\u0002\u0002\u0430\u0431\u0007\u0007\u0002",
    "\u0002\u0431\u0436\u0005\u00a4S\u0002\u0432\u0433\u0007\u0011\u0002",
    "\u0002\u0433\u0435\u0005\u00a4S\u0002\u0434\u0432\u0003\u0002\u0002",
    "\u0002\u0435\u0438\u0003\u0002\u0002\u0002\u0436\u0434\u0003\u0002\u0002",
    "\u0002\u0436\u0437\u0003\u0002\u0002\u0002\u0437\u0439\u0003\u0002\u0002",
    "\u0002\u0438\u0436\u0003\u0002\u0002\u0002\u0439\u043a\u0007\b\u0002",
    "\u0002\u043a\u043c\u0003\u0002\u0002\u0002\u043b\u0430\u0003\u0002\u0002",
    "\u0002\u043b\u043c\u0003\u0002\u0002\u0002\u043c\u043e\u0003\u0002\u0002",
    "\u0002\u043d\u0420\u0003\u0002\u0002\u0002\u043d\u0421\u0003\u0002\u0002",
    "\u0002\u043d\u042f\u0003\u0002\u0002\u0002\u043eq\u0003\u0002\u0002",
    "\u0002\u043f\u0468\u0007u\u0002\u0002\u0440\u0451\u0007\u00e5\u0002",
    "\u0002\u0441\u0442\u0007\u0007\u0002\u0002\u0442\u044e\u0007\u00ed\u0002",
    "\u0002\u0443\u0444\u0007\u0003\u0002\u0002\u0444\u0449\u0005t;\u0002",
    "\u0445\u0446\u0007\u0011\u0002\u0002\u0446\u0448\u0005t;\u0002\u0447",
    "\u0445\u0003\u0002\u0002\u0002\u0448\u044b\u0003\u0002\u0002\u0002\u0449",
    "\u0447\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a",
    "\u044c\u0003\u0002\u0002\u0002\u044b\u0449\u0003\u0002\u0002\u0002\u044c",
    "\u044d\u0007\u0004\u0002\u0002\u044d\u044f\u0003\u0002\u0002\u0002\u044e",
    "\u0443\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f",
    "\u0450\u0003\u0002\u0002\u0002\u0450\u0452\u0007\b\u0002\u0002\u0451",
    "\u0441\u0003\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452",
    "\u0468\u0003\u0002\u0002\u0002\u0453\u0465\u0007\u00e6\u0002\u0002\u0454",
    "\u0455\u0007\u0007\u0002\u0002\u0455\u0461\u0005\u00a4S\u0002\u0456",
    "\u0457\u0007\u0003\u0002\u0002\u0457\u045c\u0005\u00a4S\u0002\u0458",
    "\u0459\u0007\u0011\u0002\u0002\u0459\u045b\u0005\u00a4S\u0002\u045a",
    "\u0458\u0003\u0002\u0002\u0002\u045b\u045e\u0003\u0002\u0002\u0002\u045c",
    "\u045a\u0003\u0002\u0002\u0002\u045c\u045d\u0003\u0002\u0002\u0002\u045d",
    "\u045f\u0003\u0002\u0002\u0002\u045e\u045c\u0003\u0002\u0002\u0002\u045f",
    "\u0460\u0007\u0004\u0002\u0002\u0460\u0462\u0003\u0002\u0002\u0002\u0461",
    "\u0456\u0003\u0002\u0002\u0002\u0461\u0462\u0003\u0002\u0002\u0002\u0462",
    "\u0463\u0003\u0002\u0002\u0002\u0463\u0464\u0007\b\u0002\u0002\u0464",
    "\u0466\u0003\u0002\u0002\u0002\u0465\u0454\u0003\u0002\u0002\u0002\u0465",
    "\u0466\u0003\u0002\u0002\u0002\u0466\u0468\u0003\u0002\u0002\u0002\u0467",
    "\u043f\u0003\u0002\u0002\u0002\u0467\u0440\u0003\u0002\u0002\u0002\u0467",
    "\u0453\u0003\u0002\u0002\u0002\u0468s\u0003\u0002\u0002\u0002\u0469",
    "\u046a\u0007\u00ed\u0002\u0002\u046au\u0003\u0002\u0002\u0002\u046b",
    "\u046c\u0007\u00ed\u0002\u0002\u046cw\u0003\u0002\u0002\u0002\u046d",
    "\u046e\t\u001a\u0002\u0002\u046e\u0473\u0005z>\u0002\u046f\u0470\u0007",
    "\u0013\u0002\u0002\u0470\u0472\u0005z>\u0002\u0471\u046f\u0003\u0002",
    "\u0002\u0002\u0472\u0475\u0003\u0002\u0002\u0002\u0473\u0471\u0003\u0002",
    "\u0002\u0002\u0473\u0474\u0003\u0002\u0002\u0002\u0474y\u0003\u0002",
    "\u0002\u0002\u0475\u0473\u0003\u0002\u0002\u0002\u0476\u0479\u0005\u00a4",
    "S\u0002\u0477\u0478\u0007%\u0002\u0002\u0478\u047a\u0005\u00a2R\u0002",
    "\u0479\u0477\u0003\u0002\u0002\u0002\u0479\u047a\u0003\u0002\u0002\u0002",
    "\u047a{\u0003\u0002\u0002\u0002\u047b\u0480\u0005~@\u0002\u047c\u047d",
    "\u0007\u00ef\u0002\u0002\u047d\u047f\u0005~@\u0002\u047e\u047c\u0003",
    "\u0002\u0002\u0002\u047f\u0482\u0003\u0002\u0002\u0002\u0480\u047e\u0003",
    "\u0002\u0002\u0002\u0480\u0481\u0003\u0002\u0002\u0002\u0481}\u0003",
    "\u0002\u0002\u0002\u0482\u0480\u0003\u0002\u0002\u0002\u0483\u0484\u0007",
    "\u00ed\u0002\u0002\u0484\u0486\u0007\u0015\u0002\u0002\u0485\u0483\u0003",
    "\u0002\u0002\u0002\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u048b\u0003",
    "\u0002\u0002\u0002\u0487\u0488\u0007\u00b1\u0002\u0002\u0488\u0489\u0005",
    "\u0006\u0004\u0002\u0489\u048a\u0007\u001a\u0002\u0002\u048a\u048c\u0003",
    "\u0002\u0002\u0002\u048b\u0487\u0003\u0002\u0002\u0002\u048b\u048c\u0003",
    "\u0002\u0002\u0002\u048c\u048d\u0003\u0002\u0002\u0002\u048d\u048f\u0005",
    "\u0006\u0004\u0002\u048e\u0490\u0005\u00acW\u0002\u048f\u048e\u0003",
    "\u0002\u0002\u0002\u048f\u0490\u0003\u0002\u0002\u0002\u0490\u0492\u0003",
    "\u0002\u0002\u0002\u0491\u0493\u0005\u00aeX\u0002\u0492\u0491\u0003",
    "\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u007f\u0003",
    "\u0002\u0002\u0002\u0494\u0499\u0005\u0082B\u0002\u0495\u0496\u0007",
    "\u00ef\u0002\u0002\u0496\u0498\u0005\u0082B\u0002\u0497\u0495\u0003",
    "\u0002\u0002\u0002\u0498\u049b\u0003\u0002\u0002\u0002\u0499\u0497\u0003",
    "\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u0081\u0003",
    "\u0002\u0002\u0002\u049b\u0499\u0003\u0002\u0002\u0002\u049c\u049d\u0007",
    "\u00ed\u0002\u0002\u049d\u049f\u0007\u0015\u0002\u0002\u049e\u049c\u0003",
    "\u0002\u0002\u0002\u049e\u049f\u0003\u0002\u0002\u0002\u049f\u04a0\u0003",
    "\u0002\u0002\u0002\u04a0\u04a2\u0005\u0088E\u0002\u04a1\u04a3\u0005",
    "\u00acW\u0002\u04a2\u04a1\u0003\u0002\u0002\u0002\u04a2\u04a3\u0003",
    "\u0002\u0002\u0002\u04a3\u04a5\u0003\u0002\u0002\u0002\u04a4\u04a6\u0005",
    "\u00aeX\u0002\u04a5\u04a4\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003",
    "\u0002\u0002\u0002\u04a6\u0083\u0003\u0002\u0002\u0002\u04a7\u04aa\t",
    "\u001a\u0002\u0002\u04a8\u04a9\u0007\u009f\u0002\u0002\u04a9\u04ab\u0005",
    "\u0086D\u0002\u04aa\u04a8\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003",
    "\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04ad\u0007",
    "w\u0002\u0002\u04ad\u04ae\u0007\u00ed\u0002\u0002\u04ae\u0085\u0003",
    "\u0002\u0002\u0002\u04af\u04b4\u0005z>\u0002\u04b0\u04b1\u0007\u0013",
    "\u0002\u0002\u04b1\u04b3\u0005z>\u0002\u04b2\u04b0\u0003\u0002\u0002",
    "\u0002\u04b3\u04b6\u0003\u0002\u0002\u0002\u04b4\u04b2\u0003\u0002\u0002",
    "\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5\u0087\u0003\u0002\u0002",
    "\u0002\u04b6\u04b4\u0003\u0002\u0002\u0002\u04b7\u04b8\u0007\u00b1\u0002",
    "\u0002\u04b8\u04b9\u0005\u0006\u0004\u0002\u04b9\u04ba\u0007\u001a\u0002",
    "\u0002\u04ba\u04bc\u0003\u0002\u0002\u0002\u04bb\u04b7\u0003\u0002\u0002",
    "\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002",
    "\u0002\u04bd\u04bf\u0005\u008cG\u0002\u04be\u04c0\u0005\u00b0Y\u0002",
    "\u04bf\u04be\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002",
    "\u04c0\u04c1\u0003\u0002\u0002\u0002\u04c1\u04c5\u0005\u008aF\u0002",
    "\u04c2\u04c4\u0005\u008aF\u0002\u04c3\u04c2\u0003\u0002\u0002\u0002",
    "\u04c4\u04c7\u0003\u0002\u0002\u0002\u04c5\u04c3\u0003\u0002\u0002\u0002",
    "\u04c5\u04c6\u0003\u0002\u0002\u0002\u04c6\u0089\u0003\u0002\u0002\u0002",
    "\u04c7\u04c5\u0003\u0002\u0002\u0002\u04c8\u04ca\t\u001b\u0002\u0002",
    "\u04c9\u04c8\u0003\u0002\u0002\u0002\u04c9\u04ca\u0003\u0002\u0002\u0002",
    "\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb\u04d0\u0005\u008cG\u0002",
    "\u04cc\u04cd\u0007\u0005\u0002\u0002\u04cd\u04ce\u0005\u0006\u0004\u0002",
    "\u04ce\u04cf\u0007\u0006\u0002\u0002\u04cf\u04d1\u0003\u0002\u0002\u0002",
    "\u04d0\u04cc\u0003\u0002\u0002\u0002\u04d0\u04d1\u0003\u0002\u0002\u0002",
    "\u04d1\u008b\u0003\u0002\u0002\u0002\u04d2\u04d3\t\u001c\u0002\u0002",
    "\u04d3\u008d\u0003\u0002\u0002\u0002\u04d4\u04d5\u0007\u0005\u0002\u0002",
    "\u04d5\u04d6\u0005\u0006\u0004\u0002\u04d6\u04d7\u0007\u0006\u0002\u0002",
    "\u04d7\u04e4\u0003\u0002\u0002\u0002\u04d8\u04d9\u0007\u0007\u0002\u0002",
    "\u04d9\u04de\u0005\u00be`\u0002\u04da\u04db\u0007\u0013\u0002\u0002",
    "\u04db\u04dd\u0005\u00be`\u0002\u04dc\u04da\u0003\u0002\u0002\u0002",
    "\u04dd\u04e0\u0003\u0002\u0002\u0002\u04de\u04dc\u0003\u0002\u0002\u0002",
    "\u04de\u04df\u0003\u0002\u0002\u0002\u04df\u04e1\u0003\u0002\u0002\u0002",
    "\u04e0\u04de\u0003\u0002\u0002\u0002\u04e1\u04e2\u0007\b\u0002\u0002",
    "\u04e2\u04e4\u0003\u0002\u0002\u0002\u04e3\u04d4\u0003\u0002\u0002\u0002",
    "\u04e3\u04d8\u0003\u0002\u0002\u0002\u04e4\u008f\u0003\u0002\u0002\u0002",
    "\u04e5\u04e8\u0005j6\u0002\u04e6\u04e9\u0005\u00a8U\u0002\u04e7\u04e9",
    "\u0005\u0092J\u0002\u04e8\u04e6\u0003\u0002\u0002\u0002\u04e8\u04e7",
    "\u0003\u0002\u0002\u0002\u04e9\u0091\u0003\u0002\u0002\u0002\u04ea\u04ec",
    "\u0007i\u0002\u0002\u04eb\u04ed\t\u001d\u0002\u0002\u04ec\u04eb\u0003",
    "\u0002\u0002\u0002\u04ec\u04ed\u0003\u0002\u0002\u0002\u04ed\u0093\u0003",
    "\u0002\u0002\u0002\u04ee\u04ef\t\u001e\u0002\u0002\u04ef\u0095\u0003",
    "\u0002\u0002\u0002\u04f0\u04f1\t\u001f\u0002\u0002\u04f1\u0097\u0003",
    "\u0002\u0002\u0002\u04f2\u04f3\u0007\u009f\u0002\u0002\u04f3\u04f8\u0005",
    "\u00a8U\u0002\u04f4\u04f5\u0007\u0013\u0002\u0002\u04f5\u04f7\u0005",
    "\u00a8U\u0002\u04f6\u04f4\u0003\u0002\u0002\u0002\u04f7\u04fa\u0003",
    "\u0002\u0002\u0002\u04f8\u04f6\u0003\u0002\u0002\u0002\u04f8\u04f9\u0003",
    "\u0002\u0002\u0002\u04f9\u0099\u0003\u0002\u0002\u0002\u04fa\u04f8\u0003",
    "\u0002\u0002\u0002\u04fb\u04fc\t \u0002\u0002\u04fc\u009b\u0003\u0002",
    "\u0002\u0002\u04fd\u04fe\u0007<\u0002\u0002\u04fe\u04ff\u0005\u0006",
    "\u0004\u0002\u04ff\u009d\u0003\u0002\u0002\u0002\u0500\u0501\t!\u0002",
    "\u0002\u0501\u009f\u0003\u0002\u0002\u0002\u0502\u0503\t\"\u0002\u0002",
    "\u0503\u00a1\u0003\u0002\u0002\u0002\u0504\u0505\u0007\u00ed\u0002\u0002",
    "\u0505\u00a3\u0003\u0002\u0002\u0002\u0506\u0507\u0007\u00ed\u0002\u0002",
    "\u0507\u00a5\u0003\u0002\u0002\u0002\u0508\u0509\u0007\u00ed\u0002\u0002",
    "\u0509\u00a7\u0003\u0002\u0002\u0002\u050a\u050d\u0007\u00ed\u0002\u0002",
    "\u050b\u050c\u0007\u0017\u0002\u0002\u050c\u050e\u0007\u00ed\u0002\u0002",
    "\u050d\u050b\u0003\u0002\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002",
    "\u050e\u00a9\u0003\u0002\u0002\u0002\u050f\u0510\u0007\u0007\u0002\u0002",
    "\u0510\u0515\u0005\u00be`\u0002\u0511\u0512\u0007\u0013\u0002\u0002",
    "\u0512\u0514\u0005\u00be`\u0002\u0513\u0511\u0003\u0002\u0002\u0002",
    "\u0514\u0517\u0003\u0002\u0002\u0002\u0515\u0513\u0003\u0002\u0002\u0002",
    "\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u0518\u0003\u0002\u0002\u0002",
    "\u0517\u0515\u0003\u0002\u0002\u0002\u0518\u0519\u0007\b\u0002\u0002",
    "\u0519\u00ab\u0003\u0002\u0002\u0002\u051a\u051b\u0007=\u0002\u0002",
    "\u051b\u051c\u0005\u00be`\u0002\u051c\u00ad\u0003\u0002\u0002\u0002",
    "\u051d\u051e\u0007@\u0002\u0002\u051e\u051f\u0005\u00be`\u0002\u051f",
    "\u00af\u0003\u0002\u0002\u0002\u0520\u0521\t#\u0002\u0002\u0521\u00b1",
    "\u0003\u0002\u0002\u0002\u0522\u0525\u0005\u0006\u0004\u0002\u0523\u0525",
    "\u0007i\u0002\u0002\u0524\u0522\u0003\u0002\u0002\u0002\u0524\u0523",
    "\u0003\u0002\u0002\u0002\u0525\u00b3\u0003\u0002\u0002\u0002\u0526\u052c",
    "\u0007^\u0002\u0002\u0527\u052c\u0007\u00e2\u0002\u0002\u0528\u052c",
    "\u0007]\u0002\u0002\u0529\u052c\u0007_\u0002\u0002\u052a\u052c\u0005",
    "\u00b6\\\u0002\u052b\u0526\u0003\u0002\u0002\u0002\u052b\u0527\u0003",
    "\u0002\u0002\u0002\u052b\u0528\u0003\u0002\u0002\u0002\u052b\u0529\u0003",
    "\u0002\u0002\u0002\u052b\u052a\u0003\u0002\u0002\u0002\u052c\u00b5\u0003",
    "\u0002\u0002\u0002\u052d\u052e\u0007d\u0002\u0002\u052e\u052f\u0007",
    "_\u0002\u0002\u052f\u00b7\u0003\u0002\u0002\u0002\u0530\u0531\u0007",
    "\u00ed\u0002\u0002\u0531\u00b9\u0003\u0002\u0002\u0002\u0532\u0533\u0007",
    "\u00ed\u0002\u0002\u0533\u00bb\u0003\u0002\u0002\u0002\u0534\u0535\u0007",
    "\u00ed\u0002\u0002\u0535\u00bd\u0003\u0002\u0002\u0002\u0536\u0537\t",
    "$\u0002\u0002\u0537\u00bf\u0003\u0002\u0002\u0002\u0538\u0539\t%\u0002",
    "\u0002\u0539\u00c1\u0003\u0002\u0002\u0002\u053a\u053b\t&\u0002\u0002",
    "\u053b\u00c3\u0003\u0002\u0002\u0002\u0097\u00c9\u00d7\u00ea\u0108\u010a",
    "\u010c\u011c\u0126\u012e\u0135\u0137\u0142\u014b\u015d\u0166\u0175\u0180",
    "\u0183\u0188\u01a9\u01b2\u01b5\u01bf\u01c4\u01c8\u01ce\u01d2\u01dc\u01e0",
    "\u01e4\u01e9\u01f9\u01fd\u0208\u0213\u0217\u021b\u0220\u022d\u0238\u0256",
    "\u025a\u025f\u0267\u027c\u0280\u0284\u028a\u0293\u029e\u02a9\u02b1\u02b5",
    "\u02b8\u02bb\u02be\u02cd\u02d0\u02d3\u02dd\u02e1\u02e4\u02e7\u02ea\u02f2",
    "\u02f5\u02f8\u02fb\u02ff\u030d\u030f\u0319\u031c\u031f\u032a\u032c\u0331",
    "\u0341\u0353\u0357\u035e\u036d\u0375\u037e\u0381\u0386\u0389\u038e\u0391",
    "\u0394\u03a0\u03aa\u03af\u03b4\u03c8\u03d1\u03d7\u03e0\u03e5\u03e9\u03f0",
    "\u03f5\u03f9\u03fc\u03ff\u0402\u0409\u0412\u0417\u041e\u0428\u042d\u0436",
    "\u043b\u043d\u0449\u044e\u0451\u045c\u0461\u0465\u0467\u0473\u0479\u0480",
    "\u0485\u048b\u048f\u0492\u0499\u049e\u04a2\u04a5\u04aa\u04b4\u04bb\u04bf",
    "\u04c5\u04c9\u04d0\u04de\u04e3\u04e8\u04ec\u04f8\u050d\u0515\u0524\u052b"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", 
                     "'<'", "'>'", "'>='", "'<>'", "'<='", "'+'", "'-'", 
                     "'*'", "'/'", "','", "'->'", "':'", "':='", "'#'", 
                     "'eval'", "'if'", "'then'", "'else'", "'using'", "'with'", 
                     "'current_date'", "'on'", "'drop'", "'keep'", "'calc'", 
                     "'attrcalc'", "'rename'", "'as'", "'and'", "'or'", 
                     "'xor'", "'not'", "'between'", "'in'", "'not_in'", 
                     "'null'", "'isnull'", "'ex'", "'union'", "'diff'", 
                     "'symdiff'", "'intersect'", "'keys'", "'intyear'", 
                     "'intmonth'", "'intday'", "'check'", "'exists_in'", 
                     "'to'", "'return'", "'imbalance'", "'errorcode'", "'all'", 
                     "'aggr'", "'errorlevel'", "'order'", "'by'", "'rank'", 
                     "'asc'", "'desc'", "'min'", "'max'", "'first'", "'last'", 
                     "'indexof'", "'abs'", "'key'", "'ln'", "'log'", "'trunc'", 
                     "'round'", "'power'", "'mod'", "'length'", "'||'", 
                     "'trim'", "'upper'", "'lower'", "'substr'", "'sum'", 
                     "'avg'", "'median'", "'count'", "'identifier'", "'measure'", 
                     "'attribute'", "'filter'", "'merge'", "'exp'", "'componentRole'", 
                     "'viral'", "'match_characters'", "'type'", "'nvl'", 
                     "'hierarchy'", "'_'", "'invalid'", "'levenshtein'", 
                     "'valuedomain'", "'variable'", "'data'", "'structure'", 
                     "'dataset'", "'operator'", "'define'", "'<-'", "'datapoint'", 
                     "'hierarchical'", "'ruleset'", "'rule'", "'end'", "'alterDataset'", 
                     "'ltrim'", "'rtrim'", "'instr'", "'replace'", "'ceil'", 
                     "'floor'", "'sqrt'", "'random'", "'any'", "'setdiff'", 
                     "'stddev_pop'", "'stddev_samp'", "'var_pop'", "'var_samp'", 
                     "'group'", "'except'", "'having'", "'first_value'", 
                     "'last_value'", "'lag'", "'lead'", "'ratio_to_report'", 
                     "'over'", "'preceding'", "'following'", "'unbounded'", 
                     "'partition'", "'rows'", "'range'", "'current'", "'valid'", 
                     "'fill_time_series'", "'flow_to_stock'", "'stock_to_flow'", 
                     "'timeshift'", "'measures'", "'no_measures'", "'condition'", 
                     "'boolean'", "'date'", "'time_period'", "'number'", 
                     "'string'", "'time'", "'integer'", "'float'", "'list'", 
                     "'record'", "'restrict'", "'yyyy'", "'mm'", "'dd'", 
                     "'maxLength'", "'regexp'", "'is'", "'when'", "'from'", 
                     "'aggregates'", "'points'", "'point'", "'total'", "'partial'", 
                     "'always'", "'inner_join'", "'left_join'", "'cross_join'", 
                     "'full_join'", "'maps_from'", "'maps_to'", "'map_to'", 
                     "'map_from'", "'returns'", "'pivot'", "'customPivot'", 
                     "'unpivot'", "'sub'", "'apply'", "'conditioned'", "'period_indicator'", 
                     "'single'", "'duration'", "'time_agg'", "'unit'", "'Value'", 
                     "'valuedomains'", "'variables'", "'input'", "'output'", 
                     "'cast'", "'rule_priority'", "'dataset_priority'", 
                     "'default'", "'check_datapoint'", "'check_hierarchy'", 
                     "'computed'", "'non_null'", "'non_zero'", "'partial_null'", 
                     "'partial_zero'", "'always_null'", "'always_zero'", 
                     "'components'", "'all_measures'", "'scalar'", "'component'", 
                     "'datapoint_on_valuedomains'", "'datapoint_on_variables'", 
                     "'hierarchical_on_valuedomains'", "'hierarchical_on_variables'", 
                     "'set'", "'language'", null, null, null, null, null, 
                     null, "';'" ];

var symbolicNames = [ null, "LPAREN", "RPAREN", "QLPAREN", "QRPAREN", "GLPAREN", 
                      "GRPAREN", "EQ", "LT", "MT", "ME", "NEQ", "LE", "PLUS", 
                      "MINUS", "MUL", "DIV", "COMMA", "POINTER", "COLON", 
                      "ASSIGN", "MEMBERSHIP", "EVAL", "IF", "THEN", "ELSE", 
                      "USING", "WITH", "CURRENT_DATE", "ON", "DROP", "KEEP", 
                      "CALC", "ATTRCALC", "RENAME", "AS", "AND", "OR", "XOR", 
                      "NOT", "BETWEEN", "IN", "NOT_IN", "NULL_CONSTANT", 
                      "ISNULL", "EX", "UNION", "DIFF", "SYMDIFF", "INTERSECT", 
                      "KEYS", "INTYEAR", "INTMONTH", "INTDAY", "CHECK", 
                      "EXISTS_IN", "TO", "RETURN", "IMBALANCE", "ERRORCODE", 
                      "ALL", "AGGREGATE", "ERRORLEVEL", "ORDER", "BY", "RANK", 
                      "ASC", "DESC", "MIN", "MAX", "FIRST", "LAST", "INDEXOF", 
                      "ABS", "KEY", "LN", "LOG", "TRUNC", "ROUND", "POWER", 
                      "MOD", "LEN", "CONCAT", "TRIM", "UCASE", "LCASE", 
                      "SUBSTR", "SUM", "AVG", "MEDIAN", "COUNT", "DIMENSION", 
                      "MEASURE", "ATTRIBUTE", "FILTER", "MERGE", "EXP", 
                      "ROLE", "VIRAL", "CHARSET_MATCH", "TYPE", "NVL", "HIERARCHY", 
                      "OPTIONAL", "INVALID", "LEVENSHTEIN", "VALUE_DOMAIN", 
                      "VARIABLE", "DATA", "STRUCTURE", "DATASET", "OPERATOR", 
                      "DEFINE", "PUT_SYMBOL", "DATAPOINT", "HIERARCHICAL", 
                      "RULESET", "RULE", "END", "ALTER_DATASET", "LTRIM", 
                      "RTRIM", "INSTR", "REPLACE", "CEIL", "FLOOR", "SQRT", 
                      "RANDOM", "ANY", "SETDIFF", "STDDEV_POP", "STDDEV_SAMP", 
                      "VAR_POP", "VAR_SAMP", "GROUP", "EXCEPT", "HAVING", 
                      "FIRST_VALUE", "LAST_VALUE", "LAG", "LEAD", "RATIO_TO_REPORT", 
                      "OVER", "PRECEDING", "FOLLOWING", "UNBOUNDED", "PARTITION", 
                      "ROWS", "RANGE", "CURRENT", "VALID", "FILL_TIME_SERIES", 
                      "FLOW_TO_STOCK", "STOCK_TO_FLOW", "TIMESHIFT", "MEASURES", 
                      "NO_MEASURES", "CONDITION", "BOOLEAN", "DATE", "TIME_PERIOD", 
                      "NUMBER", "STRING", "TIME", "INTEGER", "FLOAT", "LIST", 
                      "RECORD", "RESTRICT", "YYYY", "MM", "DD", "MAX_LENGTH", 
                      "REGEXP", "IS", "WHEN", "FROM", "AGGREGATES", "POINTS", 
                      "POINT", "TOTAL", "PARTIAL", "ALWAYS", "INNER_JOIN", 
                      "LEFT_JOIN", "CROSS_JOIN", "FULL_JOIN", "MAPS_FROM", 
                      "MAPS_TO", "MAP_TO", "MAP_FROM", "RETURNS", "PIVOT", 
                      "CUSTOMPIVOT", "UNPIVOT", "SUBSPACE", "APPLY", "CONDITIONED", 
                      "PERIOD_INDICATOR", "SINGLE", "DURATION", "TIME_AGG", 
                      "UNIT", "VALUE", "VALUEDOMAINS", "VARIABLES", "INPUT", 
                      "OUTPUT", "CAST", "RULE_PRIORITY", "DATASET_PRIORITY", 
                      "DEFAULT", "CHECK_DATAPOINT", "CHECK_HIERARCHY", "COMPUTED", 
                      "NON_NULL", "NON_ZERO", "PARTIAL_NULL", "PARTIAL_ZERO", 
                      "ALWAYS_NULL", "ALWAYS_ZERO", "COMPONENTS", "ALL_MEASURES", 
                      "SCALAR", "COMPONENT", "DATAPOINT_ON_VD", "DATAPOINT_ON_VAR", 
                      "HIERARCHICAL_ON_VD", "HIERARCHICAL_ON_VAR", "SET", 
                      "LANGUAGE", "INTEGER_CONSTANT", "NUMBER_CONSTANT", 
                      "BOOLEAN_CONSTANT", "STRING_CONSTANT", "IDENTIFIER", 
                      "WS", "EOL", "ML_COMMENT", "SL_COMMENT" ];

var ruleNames =  [ "start", "statement", "expr", "functions", "datasetClause", 
                   "renameClause", "aggrClause", "filterClause", "calcClause", 
                   "keepOrDropClause", "pivotOrUnpivotClause", "customPivotClause", 
                   "subspaceClause", "joinOperators", "defOperators", "genericOperators", 
                   "parameter", "stringOperators", "numericOperators", "comparisonOperators", 
                   "timeOperators", "setOperators", "hierarchyOperators", 
                   "validationOperators", "conditionalOperators", "aggrOperatorsGrouping", 
                   "anFunction", "distanceOperators", "renameClauseItem", 
                   "aggregateClause", "aggrFunctionClause", "calcClauseItem", 
                   "subspaceClauseItem", "joinClauseWithoutUsing", "joinClause", 
                   "joinClauseItem", "joinBody", "joinApplyClause", "partitionByClause", 
                   "orderByClause", "orderByItem", "windowingClause", "signedInteger", 
                   "limitClauseItem", "groupingClause", "havingClause", 
                   "parameterItem", "outputParameterType", "outputParameterTypeComponent", 
                   "inputParameterType", "rulesetType", "scalarType", "componentType", 
                   "datasetType", "scalarSetType", "dpRuleset", "hrRuleset", 
                   "valueDomainName", "rulesetID", "rulesetSignature", "signature", 
                   "ruleClauseDatapoint", "ruleItemDatapoint", "ruleClauseHierarchical", 
                   "ruleItemHierarchical", "hierRuleSignature", "valueDomainSignature", 
                   "codeItemRelation", "codeItemRelationClause", "valueDomainValue", 
                   "scalarTypeConstraint", "compConstraint", "multModifier", 
                   "validationOutput", "validationMode", "conditionClause", 
                   "inputMode", "imbalanceExpr", "inputModeHierarchy", "outputModeHierarchy", 
                   "alias", "varID", "simpleComponentId", "componentID", 
                   "lists", "erCode", "erLevel", "comparisonOperand", "optionalExpr", 
                   "componentRole", "viralAttribute", "valueDomainID", "operatorID", 
                   "routineName", "constant", "basicScalarType", "retainType" ];

function VtlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

VtlParser.prototype = Object.create(antlr4.Parser.prototype);
VtlParser.prototype.constructor = VtlParser;

Object.defineProperty(VtlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

VtlParser.EOF = antlr4.Token.EOF;
VtlParser.LPAREN = 1;
VtlParser.RPAREN = 2;
VtlParser.QLPAREN = 3;
VtlParser.QRPAREN = 4;
VtlParser.GLPAREN = 5;
VtlParser.GRPAREN = 6;
VtlParser.EQ = 7;
VtlParser.LT = 8;
VtlParser.MT = 9;
VtlParser.ME = 10;
VtlParser.NEQ = 11;
VtlParser.LE = 12;
VtlParser.PLUS = 13;
VtlParser.MINUS = 14;
VtlParser.MUL = 15;
VtlParser.DIV = 16;
VtlParser.COMMA = 17;
VtlParser.POINTER = 18;
VtlParser.COLON = 19;
VtlParser.ASSIGN = 20;
VtlParser.MEMBERSHIP = 21;
VtlParser.EVAL = 22;
VtlParser.IF = 23;
VtlParser.THEN = 24;
VtlParser.ELSE = 25;
VtlParser.USING = 26;
VtlParser.WITH = 27;
VtlParser.CURRENT_DATE = 28;
VtlParser.ON = 29;
VtlParser.DROP = 30;
VtlParser.KEEP = 31;
VtlParser.CALC = 32;
VtlParser.ATTRCALC = 33;
VtlParser.RENAME = 34;
VtlParser.AS = 35;
VtlParser.AND = 36;
VtlParser.OR = 37;
VtlParser.XOR = 38;
VtlParser.NOT = 39;
VtlParser.BETWEEN = 40;
VtlParser.IN = 41;
VtlParser.NOT_IN = 42;
VtlParser.NULL_CONSTANT = 43;
VtlParser.ISNULL = 44;
VtlParser.EX = 45;
VtlParser.UNION = 46;
VtlParser.DIFF = 47;
VtlParser.SYMDIFF = 48;
VtlParser.INTERSECT = 49;
VtlParser.KEYS = 50;
VtlParser.INTYEAR = 51;
VtlParser.INTMONTH = 52;
VtlParser.INTDAY = 53;
VtlParser.CHECK = 54;
VtlParser.EXISTS_IN = 55;
VtlParser.TO = 56;
VtlParser.RETURN = 57;
VtlParser.IMBALANCE = 58;
VtlParser.ERRORCODE = 59;
VtlParser.ALL = 60;
VtlParser.AGGREGATE = 61;
VtlParser.ERRORLEVEL = 62;
VtlParser.ORDER = 63;
VtlParser.BY = 64;
VtlParser.RANK = 65;
VtlParser.ASC = 66;
VtlParser.DESC = 67;
VtlParser.MIN = 68;
VtlParser.MAX = 69;
VtlParser.FIRST = 70;
VtlParser.LAST = 71;
VtlParser.INDEXOF = 72;
VtlParser.ABS = 73;
VtlParser.KEY = 74;
VtlParser.LN = 75;
VtlParser.LOG = 76;
VtlParser.TRUNC = 77;
VtlParser.ROUND = 78;
VtlParser.POWER = 79;
VtlParser.MOD = 80;
VtlParser.LEN = 81;
VtlParser.CONCAT = 82;
VtlParser.TRIM = 83;
VtlParser.UCASE = 84;
VtlParser.LCASE = 85;
VtlParser.SUBSTR = 86;
VtlParser.SUM = 87;
VtlParser.AVG = 88;
VtlParser.MEDIAN = 89;
VtlParser.COUNT = 90;
VtlParser.DIMENSION = 91;
VtlParser.MEASURE = 92;
VtlParser.ATTRIBUTE = 93;
VtlParser.FILTER = 94;
VtlParser.MERGE = 95;
VtlParser.EXP = 96;
VtlParser.ROLE = 97;
VtlParser.VIRAL = 98;
VtlParser.CHARSET_MATCH = 99;
VtlParser.TYPE = 100;
VtlParser.NVL = 101;
VtlParser.HIERARCHY = 102;
VtlParser.OPTIONAL = 103;
VtlParser.INVALID = 104;
VtlParser.LEVENSHTEIN = 105;
VtlParser.VALUE_DOMAIN = 106;
VtlParser.VARIABLE = 107;
VtlParser.DATA = 108;
VtlParser.STRUCTURE = 109;
VtlParser.DATASET = 110;
VtlParser.OPERATOR = 111;
VtlParser.DEFINE = 112;
VtlParser.PUT_SYMBOL = 113;
VtlParser.DATAPOINT = 114;
VtlParser.HIERARCHICAL = 115;
VtlParser.RULESET = 116;
VtlParser.RULE = 117;
VtlParser.END = 118;
VtlParser.ALTER_DATASET = 119;
VtlParser.LTRIM = 120;
VtlParser.RTRIM = 121;
VtlParser.INSTR = 122;
VtlParser.REPLACE = 123;
VtlParser.CEIL = 124;
VtlParser.FLOOR = 125;
VtlParser.SQRT = 126;
VtlParser.RANDOM = 127;
VtlParser.ANY = 128;
VtlParser.SETDIFF = 129;
VtlParser.STDDEV_POP = 130;
VtlParser.STDDEV_SAMP = 131;
VtlParser.VAR_POP = 132;
VtlParser.VAR_SAMP = 133;
VtlParser.GROUP = 134;
VtlParser.EXCEPT = 135;
VtlParser.HAVING = 136;
VtlParser.FIRST_VALUE = 137;
VtlParser.LAST_VALUE = 138;
VtlParser.LAG = 139;
VtlParser.LEAD = 140;
VtlParser.RATIO_TO_REPORT = 141;
VtlParser.OVER = 142;
VtlParser.PRECEDING = 143;
VtlParser.FOLLOWING = 144;
VtlParser.UNBOUNDED = 145;
VtlParser.PARTITION = 146;
VtlParser.ROWS = 147;
VtlParser.RANGE = 148;
VtlParser.CURRENT = 149;
VtlParser.VALID = 150;
VtlParser.FILL_TIME_SERIES = 151;
VtlParser.FLOW_TO_STOCK = 152;
VtlParser.STOCK_TO_FLOW = 153;
VtlParser.TIMESHIFT = 154;
VtlParser.MEASURES = 155;
VtlParser.NO_MEASURES = 156;
VtlParser.CONDITION = 157;
VtlParser.BOOLEAN = 158;
VtlParser.DATE = 159;
VtlParser.TIME_PERIOD = 160;
VtlParser.NUMBER = 161;
VtlParser.STRING = 162;
VtlParser.TIME = 163;
VtlParser.INTEGER = 164;
VtlParser.FLOAT = 165;
VtlParser.LIST = 166;
VtlParser.RECORD = 167;
VtlParser.RESTRICT = 168;
VtlParser.YYYY = 169;
VtlParser.MM = 170;
VtlParser.DD = 171;
VtlParser.MAX_LENGTH = 172;
VtlParser.REGEXP = 173;
VtlParser.IS = 174;
VtlParser.WHEN = 175;
VtlParser.FROM = 176;
VtlParser.AGGREGATES = 177;
VtlParser.POINTS = 178;
VtlParser.POINT = 179;
VtlParser.TOTAL = 180;
VtlParser.PARTIAL = 181;
VtlParser.ALWAYS = 182;
VtlParser.INNER_JOIN = 183;
VtlParser.LEFT_JOIN = 184;
VtlParser.CROSS_JOIN = 185;
VtlParser.FULL_JOIN = 186;
VtlParser.MAPS_FROM = 187;
VtlParser.MAPS_TO = 188;
VtlParser.MAP_TO = 189;
VtlParser.MAP_FROM = 190;
VtlParser.RETURNS = 191;
VtlParser.PIVOT = 192;
VtlParser.CUSTOMPIVOT = 193;
VtlParser.UNPIVOT = 194;
VtlParser.SUBSPACE = 195;
VtlParser.APPLY = 196;
VtlParser.CONDITIONED = 197;
VtlParser.PERIOD_INDICATOR = 198;
VtlParser.SINGLE = 199;
VtlParser.DURATION = 200;
VtlParser.TIME_AGG = 201;
VtlParser.UNIT = 202;
VtlParser.VALUE = 203;
VtlParser.VALUEDOMAINS = 204;
VtlParser.VARIABLES = 205;
VtlParser.INPUT = 206;
VtlParser.OUTPUT = 207;
VtlParser.CAST = 208;
VtlParser.RULE_PRIORITY = 209;
VtlParser.DATASET_PRIORITY = 210;
VtlParser.DEFAULT = 211;
VtlParser.CHECK_DATAPOINT = 212;
VtlParser.CHECK_HIERARCHY = 213;
VtlParser.COMPUTED = 214;
VtlParser.NON_NULL = 215;
VtlParser.NON_ZERO = 216;
VtlParser.PARTIAL_NULL = 217;
VtlParser.PARTIAL_ZERO = 218;
VtlParser.ALWAYS_NULL = 219;
VtlParser.ALWAYS_ZERO = 220;
VtlParser.COMPONENTS = 221;
VtlParser.ALL_MEASURES = 222;
VtlParser.SCALAR = 223;
VtlParser.COMPONENT = 224;
VtlParser.DATAPOINT_ON_VD = 225;
VtlParser.DATAPOINT_ON_VAR = 226;
VtlParser.HIERARCHICAL_ON_VD = 227;
VtlParser.HIERARCHICAL_ON_VAR = 228;
VtlParser.SET = 229;
VtlParser.LANGUAGE = 230;
VtlParser.INTEGER_CONSTANT = 231;
VtlParser.NUMBER_CONSTANT = 232;
VtlParser.BOOLEAN_CONSTANT = 233;
VtlParser.STRING_CONSTANT = 234;
VtlParser.IDENTIFIER = 235;
VtlParser.WS = 236;
VtlParser.EOL = 237;
VtlParser.ML_COMMENT = 238;
VtlParser.SL_COMMENT = 239;

VtlParser.RULE_start = 0;
VtlParser.RULE_statement = 1;
VtlParser.RULE_expr = 2;
VtlParser.RULE_functions = 3;
VtlParser.RULE_datasetClause = 4;
VtlParser.RULE_renameClause = 5;
VtlParser.RULE_aggrClause = 6;
VtlParser.RULE_filterClause = 7;
VtlParser.RULE_calcClause = 8;
VtlParser.RULE_keepOrDropClause = 9;
VtlParser.RULE_pivotOrUnpivotClause = 10;
VtlParser.RULE_customPivotClause = 11;
VtlParser.RULE_subspaceClause = 12;
VtlParser.RULE_joinOperators = 13;
VtlParser.RULE_defOperators = 14;
VtlParser.RULE_genericOperators = 15;
VtlParser.RULE_parameter = 16;
VtlParser.RULE_stringOperators = 17;
VtlParser.RULE_numericOperators = 18;
VtlParser.RULE_comparisonOperators = 19;
VtlParser.RULE_timeOperators = 20;
VtlParser.RULE_setOperators = 21;
VtlParser.RULE_hierarchyOperators = 22;
VtlParser.RULE_validationOperators = 23;
VtlParser.RULE_conditionalOperators = 24;
VtlParser.RULE_aggrOperatorsGrouping = 25;
VtlParser.RULE_anFunction = 26;
VtlParser.RULE_distanceOperators = 27;
VtlParser.RULE_renameClauseItem = 28;
VtlParser.RULE_aggregateClause = 29;
VtlParser.RULE_aggrFunctionClause = 30;
VtlParser.RULE_calcClauseItem = 31;
VtlParser.RULE_subspaceClauseItem = 32;
VtlParser.RULE_joinClauseWithoutUsing = 33;
VtlParser.RULE_joinClause = 34;
VtlParser.RULE_joinClauseItem = 35;
VtlParser.RULE_joinBody = 36;
VtlParser.RULE_joinApplyClause = 37;
VtlParser.RULE_partitionByClause = 38;
VtlParser.RULE_orderByClause = 39;
VtlParser.RULE_orderByItem = 40;
VtlParser.RULE_windowingClause = 41;
VtlParser.RULE_signedInteger = 42;
VtlParser.RULE_limitClauseItem = 43;
VtlParser.RULE_groupingClause = 44;
VtlParser.RULE_havingClause = 45;
VtlParser.RULE_parameterItem = 46;
VtlParser.RULE_outputParameterType = 47;
VtlParser.RULE_outputParameterTypeComponent = 48;
VtlParser.RULE_inputParameterType = 49;
VtlParser.RULE_rulesetType = 50;
VtlParser.RULE_scalarType = 51;
VtlParser.RULE_componentType = 52;
VtlParser.RULE_datasetType = 53;
VtlParser.RULE_scalarSetType = 54;
VtlParser.RULE_dpRuleset = 55;
VtlParser.RULE_hrRuleset = 56;
VtlParser.RULE_valueDomainName = 57;
VtlParser.RULE_rulesetID = 58;
VtlParser.RULE_rulesetSignature = 59;
VtlParser.RULE_signature = 60;
VtlParser.RULE_ruleClauseDatapoint = 61;
VtlParser.RULE_ruleItemDatapoint = 62;
VtlParser.RULE_ruleClauseHierarchical = 63;
VtlParser.RULE_ruleItemHierarchical = 64;
VtlParser.RULE_hierRuleSignature = 65;
VtlParser.RULE_valueDomainSignature = 66;
VtlParser.RULE_codeItemRelation = 67;
VtlParser.RULE_codeItemRelationClause = 68;
VtlParser.RULE_valueDomainValue = 69;
VtlParser.RULE_scalarTypeConstraint = 70;
VtlParser.RULE_compConstraint = 71;
VtlParser.RULE_multModifier = 72;
VtlParser.RULE_validationOutput = 73;
VtlParser.RULE_validationMode = 74;
VtlParser.RULE_conditionClause = 75;
VtlParser.RULE_inputMode = 76;
VtlParser.RULE_imbalanceExpr = 77;
VtlParser.RULE_inputModeHierarchy = 78;
VtlParser.RULE_outputModeHierarchy = 79;
VtlParser.RULE_alias = 80;
VtlParser.RULE_varID = 81;
VtlParser.RULE_simpleComponentId = 82;
VtlParser.RULE_componentID = 83;
VtlParser.RULE_lists = 84;
VtlParser.RULE_erCode = 85;
VtlParser.RULE_erLevel = 86;
VtlParser.RULE_comparisonOperand = 87;
VtlParser.RULE_optionalExpr = 88;
VtlParser.RULE_componentRole = 89;
VtlParser.RULE_viralAttribute = 90;
VtlParser.RULE_valueDomainID = 91;
VtlParser.RULE_operatorID = 92;
VtlParser.RULE_routineName = 93;
VtlParser.RULE_constant = 94;
VtlParser.RULE_basicScalarType = 95;
VtlParser.RULE_retainType = 96;


function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_start;
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.EOF = function() {
    return this.getToken(VtlParser.EOF, 0);
};

StartContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StartContext.prototype.EOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.EOL);
    } else {
        return this.getToken(VtlParser.EOL, i);
    }
};


StartContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterStart(this);
	}
};

StartContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitStart(this);
	}
};

StartContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitStart(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.StartContext = StartContext;

VtlParser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, VtlParser.RULE_start);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.DEFINE || _la===VtlParser.IDENTIFIER) {
            this.state = 194;
            this.statement();
            this.state = 195;
            this.match(VtlParser.EOL);
            this.state = 201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 202;
        this.match(VtlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DefineExpressionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefineExpressionContext.prototype = Object.create(StatementContext.prototype);
DefineExpressionContext.prototype.constructor = DefineExpressionContext;

VtlParser.DefineExpressionContext = DefineExpressionContext;

DefineExpressionContext.prototype.defOperators = function() {
    return this.getTypedRuleContext(DefOperatorsContext,0);
};
DefineExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefineExpression(this);
	}
};

DefineExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefineExpression(this);
	}
};

DefineExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDefineExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TemporaryAssignmentContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TemporaryAssignmentContext.prototype = Object.create(StatementContext.prototype);
TemporaryAssignmentContext.prototype.constructor = TemporaryAssignmentContext;

VtlParser.TemporaryAssignmentContext = TemporaryAssignmentContext;

TemporaryAssignmentContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

TemporaryAssignmentContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

TemporaryAssignmentContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
TemporaryAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTemporaryAssignment(this);
	}
};

TemporaryAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTemporaryAssignment(this);
	}
};

TemporaryAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitTemporaryAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PersistAssignmentContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PersistAssignmentContext.prototype = Object.create(StatementContext.prototype);
PersistAssignmentContext.prototype.constructor = PersistAssignmentContext;

VtlParser.PersistAssignmentContext = PersistAssignmentContext;

PersistAssignmentContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

PersistAssignmentContext.prototype.PUT_SYMBOL = function() {
    return this.getToken(VtlParser.PUT_SYMBOL, 0);
};

PersistAssignmentContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
PersistAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPersistAssignment(this);
	}
};

PersistAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPersistAssignment(this);
	}
};

PersistAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitPersistAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.StatementContext = StatementContext;

VtlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, VtlParser.RULE_statement);
    try {
        this.state = 213;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TemporaryAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 204;
            this.varID();
            this.state = 205;
            this.match(VtlParser.ASSIGN);
            this.state = 206;
            this.expr(0);
            break;

        case 2:
            localctx = new PersistAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 208;
            this.varID();
            this.state = 209;
            this.match(VtlParser.PUT_SYMBOL);
            this.state = 210;
            this.expr(0);
            break;

        case 3:
            localctx = new DefineExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 212;
            this.defOperators();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;


 
ExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function VarIdExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VarIdExprContext.prototype = Object.create(ExprContext.prototype);
VarIdExprContext.prototype.constructor = VarIdExprContext;

VtlParser.VarIdExprContext = VarIdExprContext;

VarIdExprContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};
VarIdExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterVarIdExpr(this);
	}
};

VarIdExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitVarIdExpr(this);
	}
};

VarIdExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitVarIdExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MembershipExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MembershipExprContext.prototype = Object.create(ExprContext.prototype);
MembershipExprContext.prototype.constructor = MembershipExprContext;

VtlParser.MembershipExprContext = MembershipExprContext;

MembershipExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

MembershipExprContext.prototype.MEMBERSHIP = function() {
    return this.getToken(VtlParser.MEMBERSHIP, 0);
};

MembershipExprContext.prototype.simpleComponentId = function() {
    return this.getTypedRuleContext(SimpleComponentIdContext,0);
};
MembershipExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterMembershipExpr(this);
	}
};

MembershipExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitMembershipExpr(this);
	}
};

MembershipExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitMembershipExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InNotInExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.left = null; // ExprContext;
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InNotInExprContext.prototype = Object.create(ExprContext.prototype);
InNotInExprContext.prototype.constructor = InNotInExprContext;

VtlParser.InNotInExprContext = InNotInExprContext;

InNotInExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

InNotInExprContext.prototype.IN = function() {
    return this.getToken(VtlParser.IN, 0);
};

InNotInExprContext.prototype.NOT_IN = function() {
    return this.getToken(VtlParser.NOT_IN, 0);
};

InNotInExprContext.prototype.lists = function() {
    return this.getTypedRuleContext(ListsContext,0);
};

InNotInExprContext.prototype.valueDomainID = function() {
    return this.getTypedRuleContext(ValueDomainIDContext,0);
};
InNotInExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInNotInExpr(this);
	}
};

InNotInExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInNotInExpr(this);
	}
};

InNotInExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitInNotInExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.left = null; // ExprContext;
    this.op = null; // Token;
    this.right = null; // ExprContext;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanExprContext.prototype = Object.create(ExprContext.prototype);
BooleanExprContext.prototype.constructor = BooleanExprContext;

VtlParser.BooleanExprContext = BooleanExprContext;

BooleanExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

BooleanExprContext.prototype.AND = function() {
    return this.getToken(VtlParser.AND, 0);
};

BooleanExprContext.prototype.OR = function() {
    return this.getToken(VtlParser.OR, 0);
};

BooleanExprContext.prototype.XOR = function() {
    return this.getToken(VtlParser.XOR, 0);
};
BooleanExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterBooleanExpr(this);
	}
};

BooleanExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitBooleanExpr(this);
	}
};

BooleanExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitBooleanExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComparisonExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.left = null; // ExprContext;
    this.op = null; // ComparisonOperandContext;
    this.right = null; // ExprContext;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonExprContext.prototype = Object.create(ExprContext.prototype);
ComparisonExprContext.prototype.constructor = ComparisonExprContext;

VtlParser.ComparisonExprContext = ComparisonExprContext;

ComparisonExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ComparisonExprContext.prototype.comparisonOperand = function() {
    return this.getTypedRuleContext(ComparisonOperandContext,0);
};
ComparisonExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComparisonExpr(this);
	}
};

ComparisonExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComparisonExpr(this);
	}
};

ComparisonExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitComparisonExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    this.right = null; // ExprContext;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExprContext.prototype = Object.create(ExprContext.prototype);
UnaryExprContext.prototype.constructor = UnaryExprContext;

VtlParser.UnaryExprContext = UnaryExprContext;

UnaryExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

UnaryExprContext.prototype.PLUS = function() {
    return this.getToken(VtlParser.PLUS, 0);
};

UnaryExprContext.prototype.MINUS = function() {
    return this.getToken(VtlParser.MINUS, 0);
};

UnaryExprContext.prototype.NOT = function() {
    return this.getToken(VtlParser.NOT, 0);
};
UnaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterUnaryExpr(this);
	}
};

UnaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitUnaryExpr(this);
	}
};

UnaryExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitUnaryExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionsExpressionContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionsExpressionContext.prototype = Object.create(ExprContext.prototype);
FunctionsExpressionContext.prototype.constructor = FunctionsExpressionContext;

VtlParser.FunctionsExpressionContext = FunctionsExpressionContext;

FunctionsExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};
FunctionsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterFunctionsExpression(this);
	}
};

FunctionsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitFunctionsExpression(this);
	}
};

FunctionsExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitFunctionsExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IfExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.conditionalExpr = null; // ExprContext;
    this.thenExpr = null; // ExprContext;
    this.elseExpr = null; // ExprContext;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfExprContext.prototype = Object.create(ExprContext.prototype);
IfExprContext.prototype.constructor = IfExprContext;

VtlParser.IfExprContext = IfExprContext;

IfExprContext.prototype.IF = function() {
    return this.getToken(VtlParser.IF, 0);
};

IfExprContext.prototype.THEN = function() {
    return this.getToken(VtlParser.THEN, 0);
};

IfExprContext.prototype.ELSE = function() {
    return this.getToken(VtlParser.ELSE, 0);
};

IfExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
IfExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterIfExpr(this);
	}
};

IfExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitIfExpr(this);
	}
};

IfExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitIfExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ClauseExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.dataset = null; // ExprContext;
    this.clause = null; // DatasetClauseContext;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClauseExprContext.prototype = Object.create(ExprContext.prototype);
ClauseExprContext.prototype.constructor = ClauseExprContext;

VtlParser.ClauseExprContext = ClauseExprContext;

ClauseExprContext.prototype.QLPAREN = function() {
    return this.getToken(VtlParser.QLPAREN, 0);
};

ClauseExprContext.prototype.QRPAREN = function() {
    return this.getToken(VtlParser.QRPAREN, 0);
};

ClauseExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ClauseExprContext.prototype.datasetClause = function() {
    return this.getTypedRuleContext(DatasetClauseContext,0);
};
ClauseExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterClauseExpr(this);
	}
};

ClauseExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitClauseExpr(this);
	}
};

ClauseExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitClauseExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.left = null; // ExprContext;
    this.op = null; // Token;
    this.right = null; // ExprContext;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticExprContext.prototype = Object.create(ExprContext.prototype);
ArithmeticExprContext.prototype.constructor = ArithmeticExprContext;

VtlParser.ArithmeticExprContext = ArithmeticExprContext;

ArithmeticExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ArithmeticExprContext.prototype.MUL = function() {
    return this.getToken(VtlParser.MUL, 0);
};

ArithmeticExprContext.prototype.DIV = function() {
    return this.getToken(VtlParser.DIV, 0);
};
ArithmeticExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterArithmeticExpr(this);
	}
};

ArithmeticExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitArithmeticExpr(this);
	}
};

ArithmeticExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitArithmeticExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesisExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExprContext.prototype = Object.create(ExprContext.prototype);
ParenthesisExprContext.prototype.constructor = ParenthesisExprContext;

VtlParser.ParenthesisExprContext = ParenthesisExprContext;

ParenthesisExprContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

ParenthesisExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ParenthesisExprContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};
ParenthesisExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterParenthesisExpr(this);
	}
};

ParenthesisExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitParenthesisExpr(this);
	}
};

ParenthesisExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitParenthesisExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstantExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantExprContext.prototype = Object.create(ExprContext.prototype);
ConstantExprContext.prototype.constructor = ConstantExprContext;

VtlParser.ConstantExprContext = ConstantExprContext;

ConstantExprContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
ConstantExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterConstantExpr(this);
	}
};

ConstantExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitConstantExpr(this);
	}
};

ConstantExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitConstantExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticExprOrConcatContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.left = null; // ExprContext;
    this.op = null; // Token;
    this.right = null; // ExprContext;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticExprOrConcatContext.prototype = Object.create(ExprContext.prototype);
ArithmeticExprOrConcatContext.prototype.constructor = ArithmeticExprOrConcatContext;

VtlParser.ArithmeticExprOrConcatContext = ArithmeticExprOrConcatContext;

ArithmeticExprOrConcatContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ArithmeticExprOrConcatContext.prototype.PLUS = function() {
    return this.getToken(VtlParser.PLUS, 0);
};

ArithmeticExprOrConcatContext.prototype.MINUS = function() {
    return this.getToken(VtlParser.MINUS, 0);
};

ArithmeticExprOrConcatContext.prototype.CONCAT = function() {
    return this.getToken(VtlParser.CONCAT, 0);
};
ArithmeticExprOrConcatContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterArithmeticExprOrConcat(this);
	}
};

ArithmeticExprOrConcatContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitArithmeticExprOrConcat(this);
	}
};

ArithmeticExprOrConcatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitArithmeticExprOrConcat(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 4;
    this.enterRecursionRule(localctx, 4, VtlParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 232;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParenthesisExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 216;
            this.match(VtlParser.LPAREN);
            this.state = 217;
            this.expr(0);
            this.state = 218;
            this.match(VtlParser.RPAREN);
            break;

        case 2:
            localctx = new FunctionsExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 220;
            this.functions();
            break;

        case 3:
            localctx = new UnaryExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 221;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (VtlParser.PLUS - 13)) | (1 << (VtlParser.MINUS - 13)) | (1 << (VtlParser.NOT - 13)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 222;
            localctx.right = this.expr(10);
            break;

        case 4:
            localctx = new IfExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 223;
            this.match(VtlParser.IF);
            this.state = 224;
            localctx.conditionalExpr = this.expr(0);
            this.state = 225;
            this.match(VtlParser.THEN);
            this.state = 226;
            localctx.thenExpr = this.expr(0);
            this.state = 227;
            this.match(VtlParser.ELSE);
            this.state = 228;
            localctx.elseExpr = this.expr(3);
            break;

        case 5:
            localctx = new ConstantExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 230;
            this.constant();
            break;

        case 6:
            localctx = new VarIdExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 231;
            this.varID();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 266;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 264;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 234;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 235;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.MUL || _la===VtlParser.DIV)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 236;
                    localctx.right = this.expr(10);
                    break;

                case 2:
                    localctx = new ArithmeticExprOrConcatContext(this, new ExprContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 237;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 238;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.PLUS || _la===VtlParser.MINUS || _la===VtlParser.CONCAT)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 239;
                    localctx.right = this.expr(9);
                    break;

                case 3:
                    localctx = new ComparisonExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 240;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 241;
                    localctx.op = this.comparisonOperand();
                    this.state = 242;
                    localctx.right = this.expr(8);
                    break;

                case 4:
                    localctx = new BooleanExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 244;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 245;
                    localctx.op = this.match(VtlParser.AND);
                    this.state = 246;
                    localctx.right = this.expr(6);
                    break;

                case 5:
                    localctx = new BooleanExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 247;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 248;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.OR || _la===VtlParser.XOR)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 249;
                    localctx.right = this.expr(5);
                    break;

                case 6:
                    localctx = new ClauseExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    localctx.dataset = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 250;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 251;
                    this.match(VtlParser.QLPAREN);
                    this.state = 252;
                    localctx.clause = this.datasetClause();
                    this.state = 253;
                    this.match(VtlParser.QRPAREN);
                    break;

                case 7:
                    localctx = new MembershipExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 255;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 256;
                    this.match(VtlParser.MEMBERSHIP);
                    this.state = 257;
                    this.simpleComponentId();
                    break;

                case 8:
                    localctx = new InNotInExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 258;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 259;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.IN || _la===VtlParser.NOT_IN)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 262;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case VtlParser.GLPAREN:
                        this.state = 260;
                        this.lists();
                        break;
                    case VtlParser.IDENTIFIER:
                        this.state = 261;
                        this.valueDomainID();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                } 
            }
            this.state = 268;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;


 
FunctionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StringFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
StringFunctionsContext.prototype.constructor = StringFunctionsContext;

VtlParser.StringFunctionsContext = StringFunctionsContext;

StringFunctionsContext.prototype.stringOperators = function() {
    return this.getTypedRuleContext(StringOperatorsContext,0);
};
StringFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterStringFunctions(this);
	}
};

StringFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitStringFunctions(this);
	}
};

StringFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitStringFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GenericFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
GenericFunctionsContext.prototype.constructor = GenericFunctionsContext;

VtlParser.GenericFunctionsContext = GenericFunctionsContext;

GenericFunctionsContext.prototype.genericOperators = function() {
    return this.getTypedRuleContext(GenericOperatorsContext,0);
};
GenericFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterGenericFunctions(this);
	}
};

GenericFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitGenericFunctions(this);
	}
};

GenericFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitGenericFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConditionalFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
ConditionalFunctionsContext.prototype.constructor = ConditionalFunctionsContext;

VtlParser.ConditionalFunctionsContext = ConditionalFunctionsContext;

ConditionalFunctionsContext.prototype.conditionalOperators = function() {
    return this.getTypedRuleContext(ConditionalOperatorsContext,0);
};
ConditionalFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterConditionalFunctions(this);
	}
};

ConditionalFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitConditionalFunctions(this);
	}
};

ConditionalFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitConditionalFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AggregateFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
AggregateFunctionsContext.prototype.constructor = AggregateFunctionsContext;

VtlParser.AggregateFunctionsContext = AggregateFunctionsContext;

AggregateFunctionsContext.prototype.aggrOperatorsGrouping = function() {
    return this.getTypedRuleContext(AggrOperatorsGroupingContext,0);
};
AggregateFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggregateFunctions(this);
	}
};

AggregateFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggregateFunctions(this);
	}
};

AggregateFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAggregateFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function JoinFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
JoinFunctionsContext.prototype.constructor = JoinFunctionsContext;

VtlParser.JoinFunctionsContext = JoinFunctionsContext;

JoinFunctionsContext.prototype.joinOperators = function() {
    return this.getTypedRuleContext(JoinOperatorsContext,0);
};
JoinFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinFunctions(this);
	}
};

JoinFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinFunctions(this);
	}
};

JoinFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitJoinFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TimeFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
TimeFunctionsContext.prototype.constructor = TimeFunctionsContext;

VtlParser.TimeFunctionsContext = TimeFunctionsContext;

TimeFunctionsContext.prototype.timeOperators = function() {
    return this.getTypedRuleContext(TimeOperatorsContext,0);
};
TimeFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeFunctions(this);
	}
};

TimeFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeFunctions(this);
	}
};

TimeFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitTimeFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HierarchyFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HierarchyFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
HierarchyFunctionsContext.prototype.constructor = HierarchyFunctionsContext;

VtlParser.HierarchyFunctionsContext = HierarchyFunctionsContext;

HierarchyFunctionsContext.prototype.hierarchyOperators = function() {
    return this.getTypedRuleContext(HierarchyOperatorsContext,0);
};
HierarchyFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHierarchyFunctions(this);
	}
};

HierarchyFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHierarchyFunctions(this);
	}
};

HierarchyFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitHierarchyFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ValidationFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValidationFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
ValidationFunctionsContext.prototype.constructor = ValidationFunctionsContext;

VtlParser.ValidationFunctionsContext = ValidationFunctionsContext;

ValidationFunctionsContext.prototype.validationOperators = function() {
    return this.getTypedRuleContext(ValidationOperatorsContext,0);
};
ValidationFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationFunctions(this);
	}
};

ValidationFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationFunctions(this);
	}
};

ValidationFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValidationFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DistanceFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistanceFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
DistanceFunctionsContext.prototype.constructor = DistanceFunctionsContext;

VtlParser.DistanceFunctionsContext = DistanceFunctionsContext;

DistanceFunctionsContext.prototype.distanceOperators = function() {
    return this.getTypedRuleContext(DistanceOperatorsContext,0);
};
DistanceFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDistanceFunctions(this);
	}
};

DistanceFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDistanceFunctions(this);
	}
};

DistanceFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDistanceFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComparisonFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
ComparisonFunctionsContext.prototype.constructor = ComparisonFunctionsContext;

VtlParser.ComparisonFunctionsContext = ComparisonFunctionsContext;

ComparisonFunctionsContext.prototype.comparisonOperators = function() {
    return this.getTypedRuleContext(ComparisonOperatorsContext,0);
};
ComparisonFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComparisonFunctions(this);
	}
};

ComparisonFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComparisonFunctions(this);
	}
};

ComparisonFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitComparisonFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
NumericFunctionsContext.prototype.constructor = NumericFunctionsContext;

VtlParser.NumericFunctionsContext = NumericFunctionsContext;

NumericFunctionsContext.prototype.numericOperators = function() {
    return this.getTypedRuleContext(NumericOperatorsContext,0);
};
NumericFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterNumericFunctions(this);
	}
};

NumericFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitNumericFunctions(this);
	}
};

NumericFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitNumericFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
SetFunctionsContext.prototype.constructor = SetFunctionsContext;

VtlParser.SetFunctionsContext = SetFunctionsContext;

SetFunctionsContext.prototype.setOperators = function() {
    return this.getTypedRuleContext(SetOperatorsContext,0);
};
SetFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSetFunctions(this);
	}
};

SetFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSetFunctions(this);
	}
};

SetFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSetFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AnalyticFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
    FunctionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnalyticFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
AnalyticFunctionsContext.prototype.constructor = AnalyticFunctionsContext;

VtlParser.AnalyticFunctionsContext = AnalyticFunctionsContext;

AnalyticFunctionsContext.prototype.anFunction = function() {
    return this.getTypedRuleContext(AnFunctionContext,0);
};
AnalyticFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAnalyticFunctions(this);
	}
};

AnalyticFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAnalyticFunctions(this);
	}
};

AnalyticFunctionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAnalyticFunctions(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.FunctionsContext = FunctionsContext;

VtlParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, VtlParser.RULE_functions);
    try {
        this.state = 282;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JoinFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 269;
            this.joinOperators();
            break;

        case 2:
            localctx = new GenericFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 270;
            this.genericOperators();
            break;

        case 3:
            localctx = new StringFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 271;
            this.stringOperators();
            break;

        case 4:
            localctx = new NumericFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 272;
            this.numericOperators();
            break;

        case 5:
            localctx = new ComparisonFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 273;
            this.comparisonOperators();
            break;

        case 6:
            localctx = new TimeFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 274;
            this.timeOperators();
            break;

        case 7:
            localctx = new SetFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 275;
            this.setOperators();
            break;

        case 8:
            localctx = new HierarchyFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 276;
            this.hierarchyOperators();
            break;

        case 9:
            localctx = new ValidationFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 277;
            this.validationOperators();
            break;

        case 10:
            localctx = new ConditionalFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 278;
            this.conditionalOperators();
            break;

        case 11:
            localctx = new AggregateFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 279;
            this.aggrOperatorsGrouping();
            break;

        case 12:
            localctx = new AnalyticFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 280;
            this.anFunction();
            break;

        case 13:
            localctx = new DistanceFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 281;
            this.distanceOperators();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DatasetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_datasetClause;
    return this;
}

DatasetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetClauseContext.prototype.constructor = DatasetClauseContext;

DatasetClauseContext.prototype.renameClause = function() {
    return this.getTypedRuleContext(RenameClauseContext,0);
};

DatasetClauseContext.prototype.aggrClause = function() {
    return this.getTypedRuleContext(AggrClauseContext,0);
};

DatasetClauseContext.prototype.filterClause = function() {
    return this.getTypedRuleContext(FilterClauseContext,0);
};

DatasetClauseContext.prototype.calcClause = function() {
    return this.getTypedRuleContext(CalcClauseContext,0);
};

DatasetClauseContext.prototype.keepOrDropClause = function() {
    return this.getTypedRuleContext(KeepOrDropClauseContext,0);
};

DatasetClauseContext.prototype.pivotOrUnpivotClause = function() {
    return this.getTypedRuleContext(PivotOrUnpivotClauseContext,0);
};

DatasetClauseContext.prototype.customPivotClause = function() {
    return this.getTypedRuleContext(CustomPivotClauseContext,0);
};

DatasetClauseContext.prototype.subspaceClause = function() {
    return this.getTypedRuleContext(SubspaceClauseContext,0);
};

DatasetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDatasetClause(this);
	}
};

DatasetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDatasetClause(this);
	}
};

DatasetClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDatasetClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.DatasetClauseContext = DatasetClauseContext;

VtlParser.prototype.datasetClause = function() {

    var localctx = new DatasetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, VtlParser.RULE_datasetClause);
    try {
        this.state = 292;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.RENAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 284;
            this.renameClause();
            break;
        case VtlParser.AGGREGATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 285;
            this.aggrClause();
            break;
        case VtlParser.FILTER:
            this.enterOuterAlt(localctx, 3);
            this.state = 286;
            this.filterClause();
            break;
        case VtlParser.CALC:
            this.enterOuterAlt(localctx, 4);
            this.state = 287;
            this.calcClause();
            break;
        case VtlParser.DROP:
        case VtlParser.KEEP:
            this.enterOuterAlt(localctx, 5);
            this.state = 288;
            this.keepOrDropClause();
            break;
        case VtlParser.PIVOT:
        case VtlParser.UNPIVOT:
            this.enterOuterAlt(localctx, 6);
            this.state = 289;
            this.pivotOrUnpivotClause();
            break;
        case VtlParser.CUSTOMPIVOT:
            this.enterOuterAlt(localctx, 7);
            this.state = 290;
            this.customPivotClause();
            break;
        case VtlParser.SUBSPACE:
            this.enterOuterAlt(localctx, 8);
            this.state = 291;
            this.subspaceClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_renameClause;
    return this;
}

RenameClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameClauseContext.prototype.constructor = RenameClauseContext;

RenameClauseContext.prototype.RENAME = function() {
    return this.getToken(VtlParser.RENAME, 0);
};

RenameClauseContext.prototype.renameClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RenameClauseItemContext);
    } else {
        return this.getTypedRuleContext(RenameClauseItemContext,i);
    }
};

RenameClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


RenameClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRenameClause(this);
	}
};

RenameClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRenameClause(this);
	}
};

RenameClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRenameClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RenameClauseContext = RenameClauseContext;

VtlParser.prototype.renameClause = function() {

    var localctx = new RenameClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, VtlParser.RULE_renameClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.match(VtlParser.RENAME);
        this.state = 295;
        this.renameClauseItem();
        this.state = 300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 296;
            this.match(VtlParser.COMMA);
            this.state = 297;
            this.renameClauseItem();
            this.state = 302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrClause;
    return this;
}

AggrClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrClauseContext.prototype.constructor = AggrClauseContext;

AggrClauseContext.prototype.AGGREGATE = function() {
    return this.getToken(VtlParser.AGGREGATE, 0);
};

AggrClauseContext.prototype.aggregateClause = function() {
    return this.getTypedRuleContext(AggregateClauseContext,0);
};

AggrClauseContext.prototype.groupingClause = function() {
    return this.getTypedRuleContext(GroupingClauseContext,0);
};

AggrClauseContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

AggrClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrClause(this);
	}
};

AggrClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrClause(this);
	}
};

AggrClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAggrClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.AggrClauseContext = AggrClauseContext;

VtlParser.prototype.aggrClause = function() {

    var localctx = new AggrClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, VtlParser.RULE_aggrClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.match(VtlParser.AGGREGATE);
        this.state = 304;
        this.aggregateClause();
        this.state = 309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.GROUP) {
            this.state = 305;
            this.groupingClause();
            this.state = 307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.HAVING) {
                this.state = 306;
                this.havingClause();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_filterClause;
    return this;
}

FilterClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterClauseContext.prototype.constructor = FilterClauseContext;

FilterClauseContext.prototype.FILTER = function() {
    return this.getToken(VtlParser.FILTER, 0);
};

FilterClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

FilterClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterFilterClause(this);
	}
};

FilterClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitFilterClause(this);
	}
};

FilterClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitFilterClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.FilterClauseContext = FilterClauseContext;

VtlParser.prototype.filterClause = function() {

    var localctx = new FilterClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, VtlParser.RULE_filterClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        this.match(VtlParser.FILTER);
        this.state = 312;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CalcClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_calcClause;
    return this;
}

CalcClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcClauseContext.prototype.constructor = CalcClauseContext;

CalcClauseContext.prototype.CALC = function() {
    return this.getToken(VtlParser.CALC, 0);
};

CalcClauseContext.prototype.calcClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CalcClauseItemContext);
    } else {
        return this.getTypedRuleContext(CalcClauseItemContext,i);
    }
};

CalcClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


CalcClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCalcClause(this);
	}
};

CalcClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCalcClause(this);
	}
};

CalcClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCalcClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.CalcClauseContext = CalcClauseContext;

VtlParser.prototype.calcClause = function() {

    var localctx = new CalcClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, VtlParser.RULE_calcClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 314;
        this.match(VtlParser.CALC);
        this.state = 315;
        this.calcClauseItem();
        this.state = 320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 316;
            this.match(VtlParser.COMMA);
            this.state = 317;
            this.calcClauseItem();
            this.state = 322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeepOrDropClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_keepOrDropClause;
    this.op = null; // Token
    return this;
}

KeepOrDropClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeepOrDropClauseContext.prototype.constructor = KeepOrDropClauseContext;

KeepOrDropClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

KeepOrDropClauseContext.prototype.KEEP = function() {
    return this.getToken(VtlParser.KEEP, 0);
};

KeepOrDropClauseContext.prototype.DROP = function() {
    return this.getToken(VtlParser.DROP, 0);
};

KeepOrDropClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


KeepOrDropClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterKeepOrDropClause(this);
	}
};

KeepOrDropClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitKeepOrDropClause(this);
	}
};

KeepOrDropClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitKeepOrDropClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.KeepOrDropClauseContext = KeepOrDropClauseContext;

VtlParser.prototype.keepOrDropClause = function() {

    var localctx = new KeepOrDropClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, VtlParser.RULE_keepOrDropClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 323;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===VtlParser.DROP || _la===VtlParser.KEEP)) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 324;
        this.componentID();
        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 325;
            this.match(VtlParser.COMMA);
            this.state = 326;
            this.componentID();
            this.state = 331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PivotOrUnpivotClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_pivotOrUnpivotClause;
    this.op = null; // Token
    this.id_ = null; // ComponentIDContext
    this.mea = null; // ComponentIDContext
    return this;
}

PivotOrUnpivotClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotOrUnpivotClauseContext.prototype.constructor = PivotOrUnpivotClauseContext;

PivotOrUnpivotClauseContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

PivotOrUnpivotClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

PivotOrUnpivotClauseContext.prototype.PIVOT = function() {
    return this.getToken(VtlParser.PIVOT, 0);
};

PivotOrUnpivotClauseContext.prototype.UNPIVOT = function() {
    return this.getToken(VtlParser.UNPIVOT, 0);
};

PivotOrUnpivotClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPivotOrUnpivotClause(this);
	}
};

PivotOrUnpivotClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPivotOrUnpivotClause(this);
	}
};

PivotOrUnpivotClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitPivotOrUnpivotClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.PivotOrUnpivotClauseContext = PivotOrUnpivotClauseContext;

VtlParser.prototype.pivotOrUnpivotClause = function() {

    var localctx = new PivotOrUnpivotClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, VtlParser.RULE_pivotOrUnpivotClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===VtlParser.PIVOT || _la===VtlParser.UNPIVOT)) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 333;
        localctx.id_ = this.componentID();
        this.state = 334;
        this.match(VtlParser.COMMA);
        this.state = 335;
        localctx.mea = this.componentID();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CustomPivotClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_customPivotClause;
    this.id_ = null; // ComponentIDContext
    this.mea = null; // ComponentIDContext
    return this;
}

CustomPivotClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CustomPivotClauseContext.prototype.constructor = CustomPivotClauseContext;

CustomPivotClauseContext.prototype.CUSTOMPIVOT = function() {
    return this.getToken(VtlParser.CUSTOMPIVOT, 0);
};

CustomPivotClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


CustomPivotClauseContext.prototype.IN = function() {
    return this.getToken(VtlParser.IN, 0);
};

CustomPivotClauseContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

CustomPivotClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

CustomPivotClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCustomPivotClause(this);
	}
};

CustomPivotClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCustomPivotClause(this);
	}
};

CustomPivotClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCustomPivotClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.CustomPivotClauseContext = CustomPivotClauseContext;

VtlParser.prototype.customPivotClause = function() {

    var localctx = new CustomPivotClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, VtlParser.RULE_customPivotClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.match(VtlParser.CUSTOMPIVOT);
        this.state = 338;
        localctx.id_ = this.componentID();
        this.state = 339;
        this.match(VtlParser.COMMA);
        this.state = 340;
        localctx.mea = this.componentID();
        this.state = 341;
        this.match(VtlParser.IN);
        this.state = 342;
        this.constant();
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 343;
            this.match(VtlParser.COMMA);
            this.state = 344;
            this.constant();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubspaceClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_subspaceClause;
    return this;
}

SubspaceClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubspaceClauseContext.prototype.constructor = SubspaceClauseContext;

SubspaceClauseContext.prototype.SUBSPACE = function() {
    return this.getToken(VtlParser.SUBSPACE, 0);
};

SubspaceClauseContext.prototype.subspaceClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubspaceClauseItemContext);
    } else {
        return this.getTypedRuleContext(SubspaceClauseItemContext,i);
    }
};

SubspaceClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


SubspaceClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSubspaceClause(this);
	}
};

SubspaceClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSubspaceClause(this);
	}
};

SubspaceClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSubspaceClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.SubspaceClauseContext = SubspaceClauseContext;

VtlParser.prototype.subspaceClause = function() {

    var localctx = new SubspaceClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, VtlParser.RULE_subspaceClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        this.match(VtlParser.SUBSPACE);
        this.state = 351;
        this.subspaceClauseItem();
        this.state = 356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 352;
            this.match(VtlParser.COMMA);
            this.state = 353;
            this.subspaceClauseItem();
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinOperators;
    return this;
}

JoinOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinOperatorsContext.prototype.constructor = JoinOperatorsContext;


 
JoinOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JoinExprContext(parser, ctx) {
	JoinOperatorsContext.call(this, parser);
    this.joinKeyword = null; // Token;
    JoinOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinExprContext.prototype = Object.create(JoinOperatorsContext.prototype);
JoinExprContext.prototype.constructor = JoinExprContext;

VtlParser.JoinExprContext = JoinExprContext;

JoinExprContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

JoinExprContext.prototype.joinClause = function() {
    return this.getTypedRuleContext(JoinClauseContext,0);
};

JoinExprContext.prototype.joinBody = function() {
    return this.getTypedRuleContext(JoinBodyContext,0);
};

JoinExprContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

JoinExprContext.prototype.INNER_JOIN = function() {
    return this.getToken(VtlParser.INNER_JOIN, 0);
};

JoinExprContext.prototype.LEFT_JOIN = function() {
    return this.getToken(VtlParser.LEFT_JOIN, 0);
};

JoinExprContext.prototype.joinClauseWithoutUsing = function() {
    return this.getTypedRuleContext(JoinClauseWithoutUsingContext,0);
};

JoinExprContext.prototype.FULL_JOIN = function() {
    return this.getToken(VtlParser.FULL_JOIN, 0);
};

JoinExprContext.prototype.CROSS_JOIN = function() {
    return this.getToken(VtlParser.CROSS_JOIN, 0);
};
JoinExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinExpr(this);
	}
};

JoinExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinExpr(this);
	}
};

JoinExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitJoinExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.JoinOperatorsContext = JoinOperatorsContext;

VtlParser.prototype.joinOperators = function() {

    var localctx = new JoinOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, VtlParser.RULE_joinOperators);
    var _la = 0; // Token type
    try {
        this.state = 371;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.INNER_JOIN:
        case VtlParser.LEFT_JOIN:
            localctx = new JoinExprContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 359;
            localctx.joinKeyword = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.INNER_JOIN || _la===VtlParser.LEFT_JOIN)) {
                localctx.joinKeyword = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 360;
            this.match(VtlParser.LPAREN);
            this.state = 361;
            this.joinClause();
            this.state = 362;
            this.joinBody();
            this.state = 363;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.CROSS_JOIN:
        case VtlParser.FULL_JOIN:
            localctx = new JoinExprContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 365;
            localctx.joinKeyword = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.CROSS_JOIN || _la===VtlParser.FULL_JOIN)) {
                localctx.joinKeyword = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 366;
            this.match(VtlParser.LPAREN);
            this.state = 367;
            this.joinClauseWithoutUsing();
            this.state = 368;
            this.joinBody();
            this.state = 369;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defOperators;
    return this;
}

DefOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefOperatorsContext.prototype.constructor = DefOperatorsContext;


 
DefOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DefOperatorContext(parser, ctx) {
	DefOperatorsContext.call(this, parser);
    DefOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefOperatorContext.prototype = Object.create(DefOperatorsContext.prototype);
DefOperatorContext.prototype.constructor = DefOperatorContext;

VtlParser.DefOperatorContext = DefOperatorContext;

DefOperatorContext.prototype.DEFINE = function() {
    return this.getToken(VtlParser.DEFINE, 0);
};

DefOperatorContext.prototype.OPERATOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.OPERATOR);
    } else {
        return this.getToken(VtlParser.OPERATOR, i);
    }
};


DefOperatorContext.prototype.operatorID = function() {
    return this.getTypedRuleContext(OperatorIDContext,0);
};

DefOperatorContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

DefOperatorContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

DefOperatorContext.prototype.IS = function() {
    return this.getToken(VtlParser.IS, 0);
};

DefOperatorContext.prototype.END = function() {
    return this.getToken(VtlParser.END, 0);
};

DefOperatorContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

DefOperatorContext.prototype.parameterItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterItemContext);
    } else {
        return this.getTypedRuleContext(ParameterItemContext,i);
    }
};

DefOperatorContext.prototype.RETURNS = function() {
    return this.getToken(VtlParser.RETURNS, 0);
};

DefOperatorContext.prototype.outputParameterType = function() {
    return this.getTypedRuleContext(OutputParameterTypeContext,0);
};

DefOperatorContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};

DefOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefOperator(this);
	}
};

DefOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefOperator(this);
	}
};

DefOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDefOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DefHierarchicalContext(parser, ctx) {
	DefOperatorsContext.call(this, parser);
    DefOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefHierarchicalContext.prototype = Object.create(DefOperatorsContext.prototype);
DefHierarchicalContext.prototype.constructor = DefHierarchicalContext;

VtlParser.DefHierarchicalContext = DefHierarchicalContext;

DefHierarchicalContext.prototype.DEFINE = function() {
    return this.getToken(VtlParser.DEFINE, 0);
};

DefHierarchicalContext.prototype.HIERARCHICAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.HIERARCHICAL);
    } else {
        return this.getToken(VtlParser.HIERARCHICAL, i);
    }
};


DefHierarchicalContext.prototype.RULESET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.RULESET);
    } else {
        return this.getToken(VtlParser.RULESET, i);
    }
};


DefHierarchicalContext.prototype.rulesetID = function() {
    return this.getTypedRuleContext(RulesetIDContext,0);
};

DefHierarchicalContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

DefHierarchicalContext.prototype.hierRuleSignature = function() {
    return this.getTypedRuleContext(HierRuleSignatureContext,0);
};

DefHierarchicalContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

DefHierarchicalContext.prototype.IS = function() {
    return this.getToken(VtlParser.IS, 0);
};

DefHierarchicalContext.prototype.ruleClauseHierarchical = function() {
    return this.getTypedRuleContext(RuleClauseHierarchicalContext,0);
};

DefHierarchicalContext.prototype.END = function() {
    return this.getToken(VtlParser.END, 0);
};
DefHierarchicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefHierarchical(this);
	}
};

DefHierarchicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefHierarchical(this);
	}
};

DefHierarchicalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDefHierarchical(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DefDatapointRulesetContext(parser, ctx) {
	DefOperatorsContext.call(this, parser);
    DefOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefDatapointRulesetContext.prototype = Object.create(DefOperatorsContext.prototype);
DefDatapointRulesetContext.prototype.constructor = DefDatapointRulesetContext;

VtlParser.DefDatapointRulesetContext = DefDatapointRulesetContext;

DefDatapointRulesetContext.prototype.DEFINE = function() {
    return this.getToken(VtlParser.DEFINE, 0);
};

DefDatapointRulesetContext.prototype.DATAPOINT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.DATAPOINT);
    } else {
        return this.getToken(VtlParser.DATAPOINT, i);
    }
};


DefDatapointRulesetContext.prototype.RULESET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.RULESET);
    } else {
        return this.getToken(VtlParser.RULESET, i);
    }
};


DefDatapointRulesetContext.prototype.rulesetID = function() {
    return this.getTypedRuleContext(RulesetIDContext,0);
};

DefDatapointRulesetContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

DefDatapointRulesetContext.prototype.rulesetSignature = function() {
    return this.getTypedRuleContext(RulesetSignatureContext,0);
};

DefDatapointRulesetContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

DefDatapointRulesetContext.prototype.IS = function() {
    return this.getToken(VtlParser.IS, 0);
};

DefDatapointRulesetContext.prototype.ruleClauseDatapoint = function() {
    return this.getTypedRuleContext(RuleClauseDatapointContext,0);
};

DefDatapointRulesetContext.prototype.END = function() {
    return this.getToken(VtlParser.END, 0);
};
DefDatapointRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefDatapointRuleset(this);
	}
};

DefDatapointRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefDatapointRuleset(this);
	}
};

DefDatapointRulesetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDefDatapointRuleset(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.DefOperatorsContext = DefOperatorsContext;

VtlParser.prototype.defOperators = function() {

    var localctx = new DefOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, VtlParser.RULE_defOperators);
    var _la = 0; // Token type
    try {
        this.state = 423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DefOperatorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 373;
            this.match(VtlParser.DEFINE);
            this.state = 374;
            this.match(VtlParser.OPERATOR);
            this.state = 375;
            this.operatorID();
            this.state = 376;
            this.match(VtlParser.LPAREN);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.IDENTIFIER) {
                this.state = 377;
                this.parameterItem();
                this.state = 382;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===VtlParser.COMMA) {
                    this.state = 378;
                    this.match(VtlParser.COMMA);
                    this.state = 379;
                    this.parameterItem();
                    this.state = 384;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 387;
            this.match(VtlParser.RPAREN);
            this.state = 390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.RETURNS) {
                this.state = 388;
                this.match(VtlParser.RETURNS);
                this.state = 389;
                this.outputParameterType();
            }

            this.state = 392;
            this.match(VtlParser.IS);

            this.state = 393;
            this.expr(0);
            this.state = 394;
            this.match(VtlParser.END);
            this.state = 395;
            this.match(VtlParser.OPERATOR);
            break;

        case 2:
            localctx = new DefDatapointRulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 397;
            this.match(VtlParser.DEFINE);
            this.state = 398;
            this.match(VtlParser.DATAPOINT);
            this.state = 399;
            this.match(VtlParser.RULESET);
            this.state = 400;
            this.rulesetID();
            this.state = 401;
            this.match(VtlParser.LPAREN);
            this.state = 402;
            this.rulesetSignature();
            this.state = 403;
            this.match(VtlParser.RPAREN);
            this.state = 404;
            this.match(VtlParser.IS);
            this.state = 405;
            this.ruleClauseDatapoint();
            this.state = 406;
            this.match(VtlParser.END);
            this.state = 407;
            this.match(VtlParser.DATAPOINT);
            this.state = 408;
            this.match(VtlParser.RULESET);
            break;

        case 3:
            localctx = new DefHierarchicalContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 410;
            this.match(VtlParser.DEFINE);
            this.state = 411;
            this.match(VtlParser.HIERARCHICAL);
            this.state = 412;
            this.match(VtlParser.RULESET);
            this.state = 413;
            this.rulesetID();
            this.state = 414;
            this.match(VtlParser.LPAREN);
            this.state = 415;
            this.hierRuleSignature();
            this.state = 416;
            this.match(VtlParser.RPAREN);
            this.state = 417;
            this.match(VtlParser.IS);
            this.state = 418;
            this.ruleClauseHierarchical();
            this.state = 419;
            this.match(VtlParser.END);
            this.state = 420;
            this.match(VtlParser.HIERARCHICAL);
            this.state = 421;
            this.match(VtlParser.RULESET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GenericOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_genericOperators;
    return this;
}

GenericOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericOperatorsContext.prototype.constructor = GenericOperatorsContext;


 
GenericOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EvalAtomContext(parser, ctx) {
	GenericOperatorsContext.call(this, parser);
    GenericOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EvalAtomContext.prototype = Object.create(GenericOperatorsContext.prototype);
EvalAtomContext.prototype.constructor = EvalAtomContext;

VtlParser.EvalAtomContext = EvalAtomContext;

EvalAtomContext.prototype.EVAL = function() {
    return this.getToken(VtlParser.EVAL, 0);
};

EvalAtomContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.LPAREN);
    } else {
        return this.getToken(VtlParser.LPAREN, i);
    }
};


EvalAtomContext.prototype.routineName = function() {
    return this.getTypedRuleContext(RoutineNameContext,0);
};

EvalAtomContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.RPAREN);
    } else {
        return this.getToken(VtlParser.RPAREN, i);
    }
};


EvalAtomContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

EvalAtomContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

EvalAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


EvalAtomContext.prototype.LANGUAGE = function() {
    return this.getToken(VtlParser.LANGUAGE, 0);
};

EvalAtomContext.prototype.STRING_CONSTANT = function() {
    return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

EvalAtomContext.prototype.RETURNS = function() {
    return this.getToken(VtlParser.RETURNS, 0);
};

EvalAtomContext.prototype.datasetType = function() {
    return this.getTypedRuleContext(DatasetTypeContext,0);
};
EvalAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterEvalAtom(this);
	}
};

EvalAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitEvalAtom(this);
	}
};

EvalAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitEvalAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CastExprDatasetContext(parser, ctx) {
	GenericOperatorsContext.call(this, parser);
    GenericOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExprDatasetContext.prototype = Object.create(GenericOperatorsContext.prototype);
CastExprDatasetContext.prototype.constructor = CastExprDatasetContext;

VtlParser.CastExprDatasetContext = CastExprDatasetContext;

CastExprDatasetContext.prototype.CAST = function() {
    return this.getToken(VtlParser.CAST, 0);
};

CastExprDatasetContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

CastExprDatasetContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CastExprDatasetContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


CastExprDatasetContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

CastExprDatasetContext.prototype.basicScalarType = function() {
    return this.getTypedRuleContext(BasicScalarTypeContext,0);
};

CastExprDatasetContext.prototype.valueDomainName = function() {
    return this.getTypedRuleContext(ValueDomainNameContext,0);
};

CastExprDatasetContext.prototype.STRING_CONSTANT = function() {
    return this.getToken(VtlParser.STRING_CONSTANT, 0);
};
CastExprDatasetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCastExprDataset(this);
	}
};

CastExprDatasetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCastExprDataset(this);
	}
};

CastExprDatasetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCastExprDataset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CallDatasetContext(parser, ctx) {
	GenericOperatorsContext.call(this, parser);
    GenericOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallDatasetContext.prototype = Object.create(GenericOperatorsContext.prototype);
CallDatasetContext.prototype.constructor = CallDatasetContext;

VtlParser.CallDatasetContext = CallDatasetContext;

CallDatasetContext.prototype.operatorID = function() {
    return this.getTypedRuleContext(OperatorIDContext,0);
};

CallDatasetContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

CallDatasetContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

CallDatasetContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

CallDatasetContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};

CallDatasetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCallDataset(this);
	}
};

CallDatasetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCallDataset(this);
	}
};

CallDatasetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCallDataset(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.GenericOperatorsContext = GenericOperatorsContext;

VtlParser.prototype.genericOperators = function() {

    var localctx = new GenericOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, VtlParser.RULE_genericOperators);
    var _la = 0; // Token type
    try {
        this.state = 482;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.IDENTIFIER:
            localctx = new CallDatasetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 425;
            this.operatorID();
            this.state = 426;
            this.match(VtlParser.LPAREN);
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.NULL_CONSTANT || _la===VtlParser.OPTIONAL || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (VtlParser.INTEGER_CONSTANT - 231)) | (1 << (VtlParser.NUMBER_CONSTANT - 231)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 231)) | (1 << (VtlParser.STRING_CONSTANT - 231)) | (1 << (VtlParser.IDENTIFIER - 231)))) !== 0)) {
                this.state = 427;
                this.parameter();
                this.state = 432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===VtlParser.COMMA) {
                    this.state = 428;
                    this.match(VtlParser.COMMA);
                    this.state = 429;
                    this.parameter();
                    this.state = 434;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 437;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.EVAL:
            localctx = new EvalAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 439;
            this.match(VtlParser.EVAL);
            this.state = 440;
            this.match(VtlParser.LPAREN);
            this.state = 441;
            this.routineName();
            this.state = 442;
            this.match(VtlParser.LPAREN);
            this.state = 445;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case VtlParser.IDENTIFIER:
            	this.state = 443;
            	this.varID();
            	break;
            case VtlParser.NULL_CONSTANT:
            case VtlParser.INTEGER_CONSTANT:
            case VtlParser.NUMBER_CONSTANT:
            case VtlParser.BOOLEAN_CONSTANT:
            case VtlParser.STRING_CONSTANT:
            	this.state = 444;
            	this.constant();
            	break;
            case VtlParser.RPAREN:
            case VtlParser.COMMA:
            	break;
            default:
            	break;
            }
            this.state = 454;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.COMMA) {
                this.state = 447;
                this.match(VtlParser.COMMA);
                this.state = 450;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case VtlParser.IDENTIFIER:
                    this.state = 448;
                    this.varID();
                    break;
                case VtlParser.NULL_CONSTANT:
                case VtlParser.INTEGER_CONSTANT:
                case VtlParser.NUMBER_CONSTANT:
                case VtlParser.BOOLEAN_CONSTANT:
                case VtlParser.STRING_CONSTANT:
                    this.state = 449;
                    this.constant();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 456;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 457;
            this.match(VtlParser.RPAREN);
            this.state = 460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.LANGUAGE) {
                this.state = 458;
                this.match(VtlParser.LANGUAGE);
                this.state = 459;
                this.match(VtlParser.STRING_CONSTANT);
            }

            this.state = 464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.RETURNS) {
                this.state = 462;
                this.match(VtlParser.RETURNS);
                this.state = 463;
                this.datasetType();
            }

            this.state = 466;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.CAST:
            localctx = new CastExprDatasetContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 468;
            this.match(VtlParser.CAST);
            this.state = 469;
            this.match(VtlParser.LPAREN);
            this.state = 470;
            this.expr(0);
            this.state = 471;
            this.match(VtlParser.COMMA);
            this.state = 474;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VtlParser.BOOLEAN:
            case VtlParser.DATE:
            case VtlParser.TIME_PERIOD:
            case VtlParser.NUMBER:
            case VtlParser.STRING:
            case VtlParser.TIME:
            case VtlParser.INTEGER:
            case VtlParser.DURATION:
            case VtlParser.SCALAR:
                this.state = 472;
                this.basicScalarType();
                break;
            case VtlParser.IDENTIFIER:
                this.state = 473;
                this.valueDomainName();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 476;
                this.match(VtlParser.COMMA);
                this.state = 477;
                this.match(VtlParser.STRING_CONSTANT);
            }

            this.state = 480;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

ParameterContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ParameterContext.prototype.OPTIONAL = function() {
    return this.getToken(VtlParser.OPTIONAL, 0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitParameter(this);
	}
};

ParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ParameterContext = ParameterContext;

VtlParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, VtlParser.RULE_parameter);
    try {
        this.state = 487;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 484;
            this.varID();
            break;
        case VtlParser.NULL_CONSTANT:
        case VtlParser.INTEGER_CONSTANT:
        case VtlParser.NUMBER_CONSTANT:
        case VtlParser.BOOLEAN_CONSTANT:
        case VtlParser.STRING_CONSTANT:
            this.enterOuterAlt(localctx, 2);
            this.state = 485;
            this.constant();
            break;
        case VtlParser.OPTIONAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 486;
            this.match(VtlParser.OPTIONAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_stringOperators;
    return this;
}

StringOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringOperatorsContext.prototype.constructor = StringOperatorsContext;


 
StringOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InstrAtomContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
    this.pattern = null; // ExprContext;
    this.startParameter = null; // OptionalExprContext;
    this.occurrenceParameter = null; // OptionalExprContext;
    StringOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstrAtomContext.prototype = Object.create(StringOperatorsContext.prototype);
InstrAtomContext.prototype.constructor = InstrAtomContext;

VtlParser.InstrAtomContext = InstrAtomContext;

InstrAtomContext.prototype.INSTR = function() {
    return this.getToken(VtlParser.INSTR, 0);
};

InstrAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

InstrAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

InstrAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


InstrAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

InstrAtomContext.prototype.optionalExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionalExprContext);
    } else {
        return this.getTypedRuleContext(OptionalExprContext,i);
    }
};
InstrAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInstrAtom(this);
	}
};

InstrAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInstrAtom(this);
	}
};

InstrAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitInstrAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryStringFunctionContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
    this.op = null; // Token;
    StringOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryStringFunctionContext.prototype = Object.create(StringOperatorsContext.prototype);
UnaryStringFunctionContext.prototype.constructor = UnaryStringFunctionContext;

VtlParser.UnaryStringFunctionContext = UnaryStringFunctionContext;

UnaryStringFunctionContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

UnaryStringFunctionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

UnaryStringFunctionContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

UnaryStringFunctionContext.prototype.TRIM = function() {
    return this.getToken(VtlParser.TRIM, 0);
};

UnaryStringFunctionContext.prototype.LTRIM = function() {
    return this.getToken(VtlParser.LTRIM, 0);
};

UnaryStringFunctionContext.prototype.RTRIM = function() {
    return this.getToken(VtlParser.RTRIM, 0);
};

UnaryStringFunctionContext.prototype.UCASE = function() {
    return this.getToken(VtlParser.UCASE, 0);
};

UnaryStringFunctionContext.prototype.LCASE = function() {
    return this.getToken(VtlParser.LCASE, 0);
};

UnaryStringFunctionContext.prototype.LEN = function() {
    return this.getToken(VtlParser.LEN, 0);
};
UnaryStringFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterUnaryStringFunction(this);
	}
};

UnaryStringFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitUnaryStringFunction(this);
	}
};

UnaryStringFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitUnaryStringFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubstrAtomContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
    this.startParameter = null; // OptionalExprContext;
    this.endParameter = null; // OptionalExprContext;
    StringOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstrAtomContext.prototype = Object.create(StringOperatorsContext.prototype);
SubstrAtomContext.prototype.constructor = SubstrAtomContext;

VtlParser.SubstrAtomContext = SubstrAtomContext;

SubstrAtomContext.prototype.SUBSTR = function() {
    return this.getToken(VtlParser.SUBSTR, 0);
};

SubstrAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

SubstrAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SubstrAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

SubstrAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


SubstrAtomContext.prototype.optionalExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionalExprContext);
    } else {
        return this.getTypedRuleContext(OptionalExprContext,i);
    }
};
SubstrAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSubstrAtom(this);
	}
};

SubstrAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSubstrAtom(this);
	}
};

SubstrAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSubstrAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ReplaceAtomContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
    this.param = null; // ExprContext;
    StringOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReplaceAtomContext.prototype = Object.create(StringOperatorsContext.prototype);
ReplaceAtomContext.prototype.constructor = ReplaceAtomContext;

VtlParser.ReplaceAtomContext = ReplaceAtomContext;

ReplaceAtomContext.prototype.REPLACE = function() {
    return this.getToken(VtlParser.REPLACE, 0);
};

ReplaceAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

ReplaceAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ReplaceAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


ReplaceAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

ReplaceAtomContext.prototype.optionalExpr = function() {
    return this.getTypedRuleContext(OptionalExprContext,0);
};
ReplaceAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterReplaceAtom(this);
	}
};

ReplaceAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitReplaceAtom(this);
	}
};

ReplaceAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitReplaceAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.StringOperatorsContext = StringOperatorsContext;

VtlParser.prototype.stringOperators = function() {

    var localctx = new StringOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, VtlParser.RULE_stringOperators);
    var _la = 0; // Token type
    try {
        this.state = 537;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.LEN:
        case VtlParser.TRIM:
        case VtlParser.UCASE:
        case VtlParser.LCASE:
        case VtlParser.LTRIM:
        case VtlParser.RTRIM:
            localctx = new UnaryStringFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (VtlParser.LEN - 81)) | (1 << (VtlParser.TRIM - 81)) | (1 << (VtlParser.UCASE - 81)) | (1 << (VtlParser.LCASE - 81)))) !== 0) || _la===VtlParser.LTRIM || _la===VtlParser.RTRIM)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 490;
            this.match(VtlParser.LPAREN);
            this.state = 491;
            this.expr(0);
            this.state = 492;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.SUBSTR:
            localctx = new SubstrAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 494;
            this.match(VtlParser.SUBSTR);
            this.state = 495;
            this.match(VtlParser.LPAREN);
            this.state = 496;
            this.expr(0);
            this.state = 507;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            switch(la_) {
            case 1:
                this.state = 503;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===VtlParser.COMMA) {
                    this.state = 497;
                    this.match(VtlParser.COMMA);
                    this.state = 498;
                    localctx.startParameter = this.optionalExpr();

                    this.state = 500;
                    this.match(VtlParser.COMMA);
                    this.state = 501;
                    localctx.endParameter = this.optionalExpr();
                }

                break;

            case 2:
                this.state = 505;
                this.match(VtlParser.COMMA);
                this.state = 506;
                localctx.startParameter = this.optionalExpr();
                break;

            }
            this.state = 509;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.REPLACE:
            localctx = new ReplaceAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 511;
            this.match(VtlParser.REPLACE);
            this.state = 512;
            this.match(VtlParser.LPAREN);
            this.state = 513;
            this.expr(0);
            this.state = 514;
            this.match(VtlParser.COMMA);
            this.state = 515;
            localctx.param = this.expr(0);
            this.state = 518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 516;
                this.match(VtlParser.COMMA);
                this.state = 517;
                this.optionalExpr();
            }

            this.state = 520;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.INSTR:
            localctx = new InstrAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 522;
            this.match(VtlParser.INSTR);
            this.state = 523;
            this.match(VtlParser.LPAREN);
            this.state = 524;
            this.expr(0);
            this.state = 525;
            this.match(VtlParser.COMMA);
            this.state = 526;
            localctx.pattern = this.expr(0);
            this.state = 529;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 527;
                this.match(VtlParser.COMMA);
                this.state = 528;
                localctx.startParameter = this.optionalExpr();

            }
            this.state = 533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 531;
                this.match(VtlParser.COMMA);
                this.state = 532;
                localctx.occurrenceParameter = this.optionalExpr();
            }

            this.state = 535;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumericOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_numericOperators;
    return this;
}

NumericOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericOperatorsContext.prototype.constructor = NumericOperatorsContext;


 
NumericOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnaryNumericContext(parser, ctx) {
	NumericOperatorsContext.call(this, parser);
    this.op = null; // Token;
    NumericOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryNumericContext.prototype = Object.create(NumericOperatorsContext.prototype);
UnaryNumericContext.prototype.constructor = UnaryNumericContext;

VtlParser.UnaryNumericContext = UnaryNumericContext;

UnaryNumericContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

UnaryNumericContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

UnaryNumericContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

UnaryNumericContext.prototype.CEIL = function() {
    return this.getToken(VtlParser.CEIL, 0);
};

UnaryNumericContext.prototype.FLOOR = function() {
    return this.getToken(VtlParser.FLOOR, 0);
};

UnaryNumericContext.prototype.ABS = function() {
    return this.getToken(VtlParser.ABS, 0);
};

UnaryNumericContext.prototype.EXP = function() {
    return this.getToken(VtlParser.EXP, 0);
};

UnaryNumericContext.prototype.LN = function() {
    return this.getToken(VtlParser.LN, 0);
};

UnaryNumericContext.prototype.SQRT = function() {
    return this.getToken(VtlParser.SQRT, 0);
};
UnaryNumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterUnaryNumeric(this);
	}
};

UnaryNumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitUnaryNumeric(this);
	}
};

UnaryNumericContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitUnaryNumeric(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function OptionalNumericContext(parser, ctx) {
	NumericOperatorsContext.call(this, parser);
    this.op = null; // Token;
    NumericOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OptionalNumericContext.prototype = Object.create(NumericOperatorsContext.prototype);
OptionalNumericContext.prototype.constructor = OptionalNumericContext;

VtlParser.OptionalNumericContext = OptionalNumericContext;

OptionalNumericContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

OptionalNumericContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

OptionalNumericContext.prototype.RANDOM = function() {
    return this.getToken(VtlParser.RANDOM, 0);
};

OptionalNumericContext.prototype.optionalExpr = function() {
    return this.getTypedRuleContext(OptionalExprContext,0);
};
OptionalNumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOptionalNumeric(this);
	}
};

OptionalNumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOptionalNumeric(this);
	}
};

OptionalNumericContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOptionalNumeric(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryWithOptionalNumericContext(parser, ctx) {
	NumericOperatorsContext.call(this, parser);
    this.op = null; // Token;
    NumericOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryWithOptionalNumericContext.prototype = Object.create(NumericOperatorsContext.prototype);
UnaryWithOptionalNumericContext.prototype.constructor = UnaryWithOptionalNumericContext;

VtlParser.UnaryWithOptionalNumericContext = UnaryWithOptionalNumericContext;

UnaryWithOptionalNumericContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

UnaryWithOptionalNumericContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

UnaryWithOptionalNumericContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

UnaryWithOptionalNumericContext.prototype.ROUND = function() {
    return this.getToken(VtlParser.ROUND, 0);
};

UnaryWithOptionalNumericContext.prototype.TRUNC = function() {
    return this.getToken(VtlParser.TRUNC, 0);
};

UnaryWithOptionalNumericContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

UnaryWithOptionalNumericContext.prototype.optionalExpr = function() {
    return this.getTypedRuleContext(OptionalExprContext,0);
};
UnaryWithOptionalNumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterUnaryWithOptionalNumeric(this);
	}
};

UnaryWithOptionalNumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitUnaryWithOptionalNumeric(this);
	}
};

UnaryWithOptionalNumericContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitUnaryWithOptionalNumeric(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BinaryNumericContext(parser, ctx) {
	NumericOperatorsContext.call(this, parser);
    this.op = null; // Token;
    this.left = null; // ExprContext;
    this.right = null; // ExprContext;
    NumericOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryNumericContext.prototype = Object.create(NumericOperatorsContext.prototype);
BinaryNumericContext.prototype.constructor = BinaryNumericContext;

VtlParser.BinaryNumericContext = BinaryNumericContext;

BinaryNumericContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

BinaryNumericContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

BinaryNumericContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

BinaryNumericContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

BinaryNumericContext.prototype.MOD = function() {
    return this.getToken(VtlParser.MOD, 0);
};

BinaryNumericContext.prototype.POWER = function() {
    return this.getToken(VtlParser.POWER, 0);
};

BinaryNumericContext.prototype.LOG = function() {
    return this.getToken(VtlParser.LOG, 0);
};
BinaryNumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterBinaryNumeric(this);
	}
};

BinaryNumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitBinaryNumeric(this);
	}
};

BinaryNumericContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitBinaryNumeric(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.NumericOperatorsContext = NumericOperatorsContext;

VtlParser.prototype.numericOperators = function() {

    var localctx = new NumericOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, VtlParser.RULE_numericOperators);
    var _la = 0; // Token type
    try {
        this.state = 566;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.RANDOM:
            localctx = new OptionalNumericContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 539;
            localctx.op = this.match(VtlParser.RANDOM);
            this.state = 540;
            this.match(VtlParser.LPAREN);
            this.state = 542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.LPAREN) | (1 << VtlParser.PLUS) | (1 << VtlParser.MINUS) | (1 << VtlParser.EVAL) | (1 << VtlParser.IF) | (1 << VtlParser.CURRENT_DATE))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (VtlParser.NOT - 39)) | (1 << (VtlParser.BETWEEN - 39)) | (1 << (VtlParser.NULL_CONSTANT - 39)) | (1 << (VtlParser.ISNULL - 39)) | (1 << (VtlParser.UNION - 39)) | (1 << (VtlParser.SYMDIFF - 39)) | (1 << (VtlParser.INTERSECT - 39)) | (1 << (VtlParser.CHECK - 39)) | (1 << (VtlParser.EXISTS_IN - 39)) | (1 << (VtlParser.MIN - 39)) | (1 << (VtlParser.MAX - 39)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (VtlParser.ABS - 73)) | (1 << (VtlParser.LN - 73)) | (1 << (VtlParser.LOG - 73)) | (1 << (VtlParser.TRUNC - 73)) | (1 << (VtlParser.ROUND - 73)) | (1 << (VtlParser.POWER - 73)) | (1 << (VtlParser.MOD - 73)) | (1 << (VtlParser.LEN - 73)) | (1 << (VtlParser.TRIM - 73)) | (1 << (VtlParser.UCASE - 73)) | (1 << (VtlParser.LCASE - 73)) | (1 << (VtlParser.SUBSTR - 73)) | (1 << (VtlParser.SUM - 73)) | (1 << (VtlParser.AVG - 73)) | (1 << (VtlParser.MEDIAN - 73)) | (1 << (VtlParser.COUNT - 73)) | (1 << (VtlParser.EXP - 73)) | (1 << (VtlParser.CHARSET_MATCH - 73)) | (1 << (VtlParser.NVL - 73)) | (1 << (VtlParser.HIERARCHY - 73)) | (1 << (VtlParser.OPTIONAL - 73)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (VtlParser.LEVENSHTEIN - 105)) | (1 << (VtlParser.LTRIM - 105)) | (1 << (VtlParser.RTRIM - 105)) | (1 << (VtlParser.INSTR - 105)) | (1 << (VtlParser.REPLACE - 105)) | (1 << (VtlParser.CEIL - 105)) | (1 << (VtlParser.FLOOR - 105)) | (1 << (VtlParser.SQRT - 105)) | (1 << (VtlParser.RANDOM - 105)) | (1 << (VtlParser.SETDIFF - 105)) | (1 << (VtlParser.STDDEV_POP - 105)) | (1 << (VtlParser.STDDEV_SAMP - 105)) | (1 << (VtlParser.VAR_POP - 105)) | (1 << (VtlParser.VAR_SAMP - 105)))) !== 0) || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (VtlParser.FIRST_VALUE - 137)) | (1 << (VtlParser.LAST_VALUE - 137)) | (1 << (VtlParser.LAG - 137)) | (1 << (VtlParser.LEAD - 137)) | (1 << (VtlParser.RATIO_TO_REPORT - 137)) | (1 << (VtlParser.FILL_TIME_SERIES - 137)) | (1 << (VtlParser.FLOW_TO_STOCK - 137)) | (1 << (VtlParser.STOCK_TO_FLOW - 137)) | (1 << (VtlParser.TIMESHIFT - 137)))) !== 0) || ((((_la - 183)) & ~0x1f) == 0 && ((1 << (_la - 183)) & ((1 << (VtlParser.INNER_JOIN - 183)) | (1 << (VtlParser.LEFT_JOIN - 183)) | (1 << (VtlParser.CROSS_JOIN - 183)) | (1 << (VtlParser.FULL_JOIN - 183)) | (1 << (VtlParser.PERIOD_INDICATOR - 183)) | (1 << (VtlParser.TIME_AGG - 183)) | (1 << (VtlParser.CAST - 183)) | (1 << (VtlParser.CHECK_DATAPOINT - 183)) | (1 << (VtlParser.CHECK_HIERARCHY - 183)))) !== 0) || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (VtlParser.INTEGER_CONSTANT - 231)) | (1 << (VtlParser.NUMBER_CONSTANT - 231)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 231)) | (1 << (VtlParser.STRING_CONSTANT - 231)) | (1 << (VtlParser.IDENTIFIER - 231)))) !== 0)) {
                this.state = 541;
                this.optionalExpr();
            }

            this.state = 544;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.ABS:
        case VtlParser.LN:
        case VtlParser.EXP:
        case VtlParser.CEIL:
        case VtlParser.FLOOR:
        case VtlParser.SQRT:
            localctx = new UnaryNumericContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 545;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (VtlParser.ABS - 73)) | (1 << (VtlParser.LN - 73)) | (1 << (VtlParser.EXP - 73)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (VtlParser.CEIL - 124)) | (1 << (VtlParser.FLOOR - 124)) | (1 << (VtlParser.SQRT - 124)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 546;
            this.match(VtlParser.LPAREN);
            this.state = 547;
            this.expr(0);
            this.state = 548;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.TRUNC:
        case VtlParser.ROUND:
            localctx = new UnaryWithOptionalNumericContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 550;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.TRUNC || _la===VtlParser.ROUND)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 551;
            this.match(VtlParser.LPAREN);
            this.state = 552;
            this.expr(0);
            this.state = 555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 553;
                this.match(VtlParser.COMMA);
                this.state = 554;
                this.optionalExpr();
            }

            this.state = 557;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.LOG:
        case VtlParser.POWER:
        case VtlParser.MOD:
            localctx = new BinaryNumericContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 559;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (VtlParser.LOG - 76)) | (1 << (VtlParser.POWER - 76)) | (1 << (VtlParser.MOD - 76)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 560;
            this.match(VtlParser.LPAREN);
            this.state = 561;
            localctx.left = this.expr(0);
            this.state = 562;
            this.match(VtlParser.COMMA);
            this.state = 563;
            localctx.right = this.expr(0);
            this.state = 564;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_comparisonOperators;
    return this;
}

ComparisonOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorsContext.prototype.constructor = ComparisonOperatorsContext;


 
ComparisonOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BetweenAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
    this.op = null; // ExprContext;
    this.from_ = null; // ExprContext;
    this.to_ = null; // ExprContext;
    ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenAtomContext.prototype = Object.create(ComparisonOperatorsContext.prototype);
BetweenAtomContext.prototype.constructor = BetweenAtomContext;

VtlParser.BetweenAtomContext = BetweenAtomContext;

BetweenAtomContext.prototype.BETWEEN = function() {
    return this.getToken(VtlParser.BETWEEN, 0);
};

BetweenAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

BetweenAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


BetweenAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

BetweenAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
BetweenAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterBetweenAtom(this);
	}
};

BetweenAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitBetweenAtom(this);
	}
};

BetweenAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitBetweenAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CharsetMatchAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
    this.op = null; // ExprContext;
    this.pattern = null; // ExprContext;
    ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharsetMatchAtomContext.prototype = Object.create(ComparisonOperatorsContext.prototype);
CharsetMatchAtomContext.prototype.constructor = CharsetMatchAtomContext;

VtlParser.CharsetMatchAtomContext = CharsetMatchAtomContext;

CharsetMatchAtomContext.prototype.CHARSET_MATCH = function() {
    return this.getToken(VtlParser.CHARSET_MATCH, 0);
};

CharsetMatchAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

CharsetMatchAtomContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

CharsetMatchAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

CharsetMatchAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
CharsetMatchAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCharsetMatchAtom(this);
	}
};

CharsetMatchAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCharsetMatchAtom(this);
	}
};

CharsetMatchAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCharsetMatchAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IsNullAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
    ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNullAtomContext.prototype = Object.create(ComparisonOperatorsContext.prototype);
IsNullAtomContext.prototype.constructor = IsNullAtomContext;

VtlParser.IsNullAtomContext = IsNullAtomContext;

IsNullAtomContext.prototype.ISNULL = function() {
    return this.getToken(VtlParser.ISNULL, 0);
};

IsNullAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

IsNullAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

IsNullAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};
IsNullAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterIsNullAtom(this);
	}
};

IsNullAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitIsNullAtom(this);
	}
};

IsNullAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitIsNullAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistInAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
    this.left = null; // ExprContext;
    this.right = null; // ExprContext;
    ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistInAtomContext.prototype = Object.create(ComparisonOperatorsContext.prototype);
ExistInAtomContext.prototype.constructor = ExistInAtomContext;

VtlParser.ExistInAtomContext = ExistInAtomContext;

ExistInAtomContext.prototype.EXISTS_IN = function() {
    return this.getToken(VtlParser.EXISTS_IN, 0);
};

ExistInAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

ExistInAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


ExistInAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

ExistInAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExistInAtomContext.prototype.retainType = function() {
    return this.getTypedRuleContext(RetainTypeContext,0);
};
ExistInAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterExistInAtom(this);
	}
};

ExistInAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitExistInAtom(this);
	}
};

ExistInAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitExistInAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.ComparisonOperatorsContext = ComparisonOperatorsContext;

VtlParser.prototype.comparisonOperators = function() {

    var localctx = new ComparisonOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, VtlParser.RULE_comparisonOperators);
    var _la = 0; // Token type
    try {
        this.state = 600;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.BETWEEN:
            localctx = new BetweenAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 568;
            this.match(VtlParser.BETWEEN);
            this.state = 569;
            this.match(VtlParser.LPAREN);
            this.state = 570;
            localctx.op = this.expr(0);
            this.state = 571;
            this.match(VtlParser.COMMA);
            this.state = 572;
            localctx.from_ = this.expr(0);
            this.state = 573;
            this.match(VtlParser.COMMA);
            this.state = 574;
            localctx.to_ = this.expr(0);
            this.state = 575;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.CHARSET_MATCH:
            localctx = new CharsetMatchAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 577;
            this.match(VtlParser.CHARSET_MATCH);
            this.state = 578;
            this.match(VtlParser.LPAREN);
            this.state = 579;
            localctx.op = this.expr(0);
            this.state = 580;
            this.match(VtlParser.COMMA);
            this.state = 581;
            localctx.pattern = this.expr(0);
            this.state = 582;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.ISNULL:
            localctx = new IsNullAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 584;
            this.match(VtlParser.ISNULL);
            this.state = 585;
            this.match(VtlParser.LPAREN);
            this.state = 586;
            this.expr(0);
            this.state = 587;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.EXISTS_IN:
            localctx = new ExistInAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 589;
            this.match(VtlParser.EXISTS_IN);
            this.state = 590;
            this.match(VtlParser.LPAREN);
            this.state = 591;
            localctx.left = this.expr(0);
            this.state = 592;
            this.match(VtlParser.COMMA);
            this.state = 593;
            localctx.right = this.expr(0);
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 594;
                this.match(VtlParser.COMMA);
                this.state = 595;
                this.retainType();
            }

            this.state = 598;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimeOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_timeOperators;
    return this;
}

TimeOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeOperatorsContext.prototype.constructor = TimeOperatorsContext;


 
TimeOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FlowAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
    this.op = null; // Token;
    TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlowAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
FlowAtomContext.prototype.constructor = FlowAtomContext;

VtlParser.FlowAtomContext = FlowAtomContext;

FlowAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

FlowAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

FlowAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

FlowAtomContext.prototype.FLOW_TO_STOCK = function() {
    return this.getToken(VtlParser.FLOW_TO_STOCK, 0);
};

FlowAtomContext.prototype.STOCK_TO_FLOW = function() {
    return this.getToken(VtlParser.STOCK_TO_FLOW, 0);
};
FlowAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterFlowAtom(this);
	}
};

FlowAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitFlowAtom(this);
	}
};

FlowAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitFlowAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TimeShiftAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
    TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeShiftAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
TimeShiftAtomContext.prototype.constructor = TimeShiftAtomContext;

VtlParser.TimeShiftAtomContext = TimeShiftAtomContext;

TimeShiftAtomContext.prototype.TIMESHIFT = function() {
    return this.getToken(VtlParser.TIMESHIFT, 0);
};

TimeShiftAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

TimeShiftAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TimeShiftAtomContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

TimeShiftAtomContext.prototype.signedInteger = function() {
    return this.getTypedRuleContext(SignedIntegerContext,0);
};

TimeShiftAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};
TimeShiftAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeShiftAtom(this);
	}
};

TimeShiftAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeShiftAtom(this);
	}
};

TimeShiftAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitTimeShiftAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TimeAggAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
    this.periodIndTo = null; // Token;
    this.periodIndFrom = null; // Token;
    this.op = null; // OptionalExprContext;
    TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeAggAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
TimeAggAtomContext.prototype.constructor = TimeAggAtomContext;

VtlParser.TimeAggAtomContext = TimeAggAtomContext;

TimeAggAtomContext.prototype.TIME_AGG = function() {
    return this.getToken(VtlParser.TIME_AGG, 0);
};

TimeAggAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

TimeAggAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

TimeAggAtomContext.prototype.STRING_CONSTANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.STRING_CONSTANT);
    } else {
        return this.getToken(VtlParser.STRING_CONSTANT, i);
    }
};


TimeAggAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


TimeAggAtomContext.prototype.optionalExpr = function() {
    return this.getTypedRuleContext(OptionalExprContext,0);
};

TimeAggAtomContext.prototype.FIRST = function() {
    return this.getToken(VtlParser.FIRST, 0);
};

TimeAggAtomContext.prototype.LAST = function() {
    return this.getToken(VtlParser.LAST, 0);
};

TimeAggAtomContext.prototype.OPTIONAL = function() {
    return this.getToken(VtlParser.OPTIONAL, 0);
};
TimeAggAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeAggAtom(this);
	}
};

TimeAggAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeAggAtom(this);
	}
};

TimeAggAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitTimeAggAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CurrentDateAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
    TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentDateAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
CurrentDateAtomContext.prototype.constructor = CurrentDateAtomContext;

VtlParser.CurrentDateAtomContext = CurrentDateAtomContext;

CurrentDateAtomContext.prototype.CURRENT_DATE = function() {
    return this.getToken(VtlParser.CURRENT_DATE, 0);
};

CurrentDateAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

CurrentDateAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};
CurrentDateAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCurrentDateAtom(this);
	}
};

CurrentDateAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCurrentDateAtom(this);
	}
};

CurrentDateAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCurrentDateAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PeriodAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
    TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
PeriodAtomContext.prototype.constructor = PeriodAtomContext;

VtlParser.PeriodAtomContext = PeriodAtomContext;

PeriodAtomContext.prototype.PERIOD_INDICATOR = function() {
    return this.getToken(VtlParser.PERIOD_INDICATOR, 0);
};

PeriodAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

PeriodAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

PeriodAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
PeriodAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPeriodAtom(this);
	}
};

PeriodAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPeriodAtom(this);
	}
};

PeriodAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitPeriodAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FillTimeAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
    TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FillTimeAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
FillTimeAtomContext.prototype.constructor = FillTimeAtomContext;

VtlParser.FillTimeAtomContext = FillTimeAtomContext;

FillTimeAtomContext.prototype.FILL_TIME_SERIES = function() {
    return this.getToken(VtlParser.FILL_TIME_SERIES, 0);
};

FillTimeAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

FillTimeAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

FillTimeAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

FillTimeAtomContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

FillTimeAtomContext.prototype.SINGLE = function() {
    return this.getToken(VtlParser.SINGLE, 0);
};

FillTimeAtomContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};
FillTimeAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterFillTimeAtom(this);
	}
};

FillTimeAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitFillTimeAtom(this);
	}
};

FillTimeAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitFillTimeAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.TimeOperatorsContext = TimeOperatorsContext;

VtlParser.prototype.timeOperators = function() {

    var localctx = new TimeOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, VtlParser.RULE_timeOperators);
    var _la = 0; // Token type
    try {
        this.state = 648;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.PERIOD_INDICATOR:
            localctx = new PeriodAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 602;
            this.match(VtlParser.PERIOD_INDICATOR);
            this.state = 603;
            this.match(VtlParser.LPAREN);
            this.state = 605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.LPAREN) | (1 << VtlParser.PLUS) | (1 << VtlParser.MINUS) | (1 << VtlParser.EVAL) | (1 << VtlParser.IF) | (1 << VtlParser.CURRENT_DATE))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (VtlParser.NOT - 39)) | (1 << (VtlParser.BETWEEN - 39)) | (1 << (VtlParser.NULL_CONSTANT - 39)) | (1 << (VtlParser.ISNULL - 39)) | (1 << (VtlParser.UNION - 39)) | (1 << (VtlParser.SYMDIFF - 39)) | (1 << (VtlParser.INTERSECT - 39)) | (1 << (VtlParser.CHECK - 39)) | (1 << (VtlParser.EXISTS_IN - 39)) | (1 << (VtlParser.MIN - 39)) | (1 << (VtlParser.MAX - 39)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (VtlParser.ABS - 73)) | (1 << (VtlParser.LN - 73)) | (1 << (VtlParser.LOG - 73)) | (1 << (VtlParser.TRUNC - 73)) | (1 << (VtlParser.ROUND - 73)) | (1 << (VtlParser.POWER - 73)) | (1 << (VtlParser.MOD - 73)) | (1 << (VtlParser.LEN - 73)) | (1 << (VtlParser.TRIM - 73)) | (1 << (VtlParser.UCASE - 73)) | (1 << (VtlParser.LCASE - 73)) | (1 << (VtlParser.SUBSTR - 73)) | (1 << (VtlParser.SUM - 73)) | (1 << (VtlParser.AVG - 73)) | (1 << (VtlParser.MEDIAN - 73)) | (1 << (VtlParser.COUNT - 73)) | (1 << (VtlParser.EXP - 73)) | (1 << (VtlParser.CHARSET_MATCH - 73)) | (1 << (VtlParser.NVL - 73)) | (1 << (VtlParser.HIERARCHY - 73)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (VtlParser.LEVENSHTEIN - 105)) | (1 << (VtlParser.LTRIM - 105)) | (1 << (VtlParser.RTRIM - 105)) | (1 << (VtlParser.INSTR - 105)) | (1 << (VtlParser.REPLACE - 105)) | (1 << (VtlParser.CEIL - 105)) | (1 << (VtlParser.FLOOR - 105)) | (1 << (VtlParser.SQRT - 105)) | (1 << (VtlParser.RANDOM - 105)) | (1 << (VtlParser.SETDIFF - 105)) | (1 << (VtlParser.STDDEV_POP - 105)) | (1 << (VtlParser.STDDEV_SAMP - 105)) | (1 << (VtlParser.VAR_POP - 105)) | (1 << (VtlParser.VAR_SAMP - 105)))) !== 0) || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (VtlParser.FIRST_VALUE - 137)) | (1 << (VtlParser.LAST_VALUE - 137)) | (1 << (VtlParser.LAG - 137)) | (1 << (VtlParser.LEAD - 137)) | (1 << (VtlParser.RATIO_TO_REPORT - 137)) | (1 << (VtlParser.FILL_TIME_SERIES - 137)) | (1 << (VtlParser.FLOW_TO_STOCK - 137)) | (1 << (VtlParser.STOCK_TO_FLOW - 137)) | (1 << (VtlParser.TIMESHIFT - 137)))) !== 0) || ((((_la - 183)) & ~0x1f) == 0 && ((1 << (_la - 183)) & ((1 << (VtlParser.INNER_JOIN - 183)) | (1 << (VtlParser.LEFT_JOIN - 183)) | (1 << (VtlParser.CROSS_JOIN - 183)) | (1 << (VtlParser.FULL_JOIN - 183)) | (1 << (VtlParser.PERIOD_INDICATOR - 183)) | (1 << (VtlParser.TIME_AGG - 183)) | (1 << (VtlParser.CAST - 183)) | (1 << (VtlParser.CHECK_DATAPOINT - 183)) | (1 << (VtlParser.CHECK_HIERARCHY - 183)))) !== 0) || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (VtlParser.INTEGER_CONSTANT - 231)) | (1 << (VtlParser.NUMBER_CONSTANT - 231)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 231)) | (1 << (VtlParser.STRING_CONSTANT - 231)) | (1 << (VtlParser.IDENTIFIER - 231)))) !== 0)) {
                this.state = 604;
                this.expr(0);
            }

            this.state = 607;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.FILL_TIME_SERIES:
            localctx = new FillTimeAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 608;
            this.match(VtlParser.FILL_TIME_SERIES);
            this.state = 609;
            this.match(VtlParser.LPAREN);
            this.state = 610;
            this.expr(0);
            this.state = 613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 611;
                this.match(VtlParser.COMMA);
                this.state = 612;
                _la = this._input.LA(1);
                if(!(_la===VtlParser.ALL || _la===VtlParser.SINGLE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 615;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.FLOW_TO_STOCK:
        case VtlParser.STOCK_TO_FLOW:
            localctx = new FlowAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 617;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.FLOW_TO_STOCK || _la===VtlParser.STOCK_TO_FLOW)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 618;
            this.match(VtlParser.LPAREN);
            this.state = 619;
            this.expr(0);
            this.state = 620;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.TIMESHIFT:
            localctx = new TimeShiftAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 622;
            this.match(VtlParser.TIMESHIFT);
            this.state = 623;
            this.match(VtlParser.LPAREN);
            this.state = 624;
            this.expr(0);
            this.state = 625;
            this.match(VtlParser.COMMA);
            this.state = 626;
            this.signedInteger();
            this.state = 627;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.TIME_AGG:
            localctx = new TimeAggAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 629;
            this.match(VtlParser.TIME_AGG);
            this.state = 630;
            this.match(VtlParser.LPAREN);
            this.state = 631;
            localctx.periodIndTo = this.match(VtlParser.STRING_CONSTANT);
            this.state = 634;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
            if(la_===1) {
                this.state = 632;
                this.match(VtlParser.COMMA);
                this.state = 633;
                localctx.periodIndFrom = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===VtlParser.OPTIONAL || _la===VtlParser.STRING_CONSTANT)) {
                    localctx.periodIndFrom = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 638;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
            if(la_===1) {
                this.state = 636;
                this.match(VtlParser.COMMA);
                this.state = 637;
                localctx.op = this.optionalExpr();

            }
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 640;
                this.match(VtlParser.COMMA);
                this.state = 641;
                _la = this._input.LA(1);
                if(!(_la===VtlParser.FIRST || _la===VtlParser.LAST)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 644;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.CURRENT_DATE:
            localctx = new CurrentDateAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 645;
            this.match(VtlParser.CURRENT_DATE);
            this.state = 646;
            this.match(VtlParser.LPAREN);
            this.state = 647;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_setOperators;
    return this;
}

SetOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetOperatorsContext.prototype.constructor = SetOperatorsContext;


 
SetOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SetOrSYmDiffAtomContext(parser, ctx) {
	SetOperatorsContext.call(this, parser);
    this.op = null; // Token;
    this.left = null; // ExprContext;
    this.right = null; // ExprContext;
    SetOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetOrSYmDiffAtomContext.prototype = Object.create(SetOperatorsContext.prototype);
SetOrSYmDiffAtomContext.prototype.constructor = SetOrSYmDiffAtomContext;

VtlParser.SetOrSYmDiffAtomContext = SetOrSYmDiffAtomContext;

SetOrSYmDiffAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

SetOrSYmDiffAtomContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

SetOrSYmDiffAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

SetOrSYmDiffAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

SetOrSYmDiffAtomContext.prototype.SETDIFF = function() {
    return this.getToken(VtlParser.SETDIFF, 0);
};

SetOrSYmDiffAtomContext.prototype.SYMDIFF = function() {
    return this.getToken(VtlParser.SYMDIFF, 0);
};
SetOrSYmDiffAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSetOrSYmDiffAtom(this);
	}
};

SetOrSYmDiffAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSetOrSYmDiffAtom(this);
	}
};

SetOrSYmDiffAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSetOrSYmDiffAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntersectAtomContext(parser, ctx) {
	SetOperatorsContext.call(this, parser);
    this.left = null; // ExprContext;
    SetOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntersectAtomContext.prototype = Object.create(SetOperatorsContext.prototype);
IntersectAtomContext.prototype.constructor = IntersectAtomContext;

VtlParser.IntersectAtomContext = IntersectAtomContext;

IntersectAtomContext.prototype.INTERSECT = function() {
    return this.getToken(VtlParser.INTERSECT, 0);
};

IntersectAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

IntersectAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

IntersectAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

IntersectAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};

IntersectAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterIntersectAtom(this);
	}
};

IntersectAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitIntersectAtom(this);
	}
};

IntersectAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitIntersectAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnionAtomContext(parser, ctx) {
	SetOperatorsContext.call(this, parser);
    this.left = null; // ExprContext;
    SetOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnionAtomContext.prototype = Object.create(SetOperatorsContext.prototype);
UnionAtomContext.prototype.constructor = UnionAtomContext;

VtlParser.UnionAtomContext = UnionAtomContext;

UnionAtomContext.prototype.UNION = function() {
    return this.getToken(VtlParser.UNION, 0);
};

UnionAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

UnionAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

UnionAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

UnionAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};

UnionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterUnionAtom(this);
	}
};

UnionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitUnionAtom(this);
	}
};

UnionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitUnionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.SetOperatorsContext = SetOperatorsContext;

VtlParser.prototype.setOperators = function() {

    var localctx = new SetOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, VtlParser.RULE_setOperators);
    var _la = 0; // Token type
    try {
        this.state = 679;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.UNION:
            localctx = new UnionAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 650;
            this.match(VtlParser.UNION);
            this.state = 651;
            this.match(VtlParser.LPAREN);
            this.state = 652;
            localctx.left = this.expr(0);
            this.state = 655; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 653;
                this.match(VtlParser.COMMA);
                this.state = 654;
                this.expr(0);
                this.state = 657; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===VtlParser.COMMA);
            this.state = 659;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.INTERSECT:
            localctx = new IntersectAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 661;
            this.match(VtlParser.INTERSECT);
            this.state = 662;
            this.match(VtlParser.LPAREN);
            this.state = 663;
            localctx.left = this.expr(0);
            this.state = 666; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 664;
                this.match(VtlParser.COMMA);
                this.state = 665;
                this.expr(0);
                this.state = 668; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===VtlParser.COMMA);
            this.state = 670;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.SYMDIFF:
        case VtlParser.SETDIFF:
            localctx = new SetOrSYmDiffAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 672;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.SYMDIFF || _la===VtlParser.SETDIFF)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 673;
            this.match(VtlParser.LPAREN);
            this.state = 674;
            localctx.left = this.expr(0);
            this.state = 675;
            this.match(VtlParser.COMMA);
            this.state = 676;
            localctx.right = this.expr(0);
            this.state = 677;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HierarchyOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_hierarchyOperators;
    this.op = null; // ExprContext
    this.hrName = null; // Token
    this.ruleComponent = null; // ComponentIDContext
    return this;
}

HierarchyOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HierarchyOperatorsContext.prototype.constructor = HierarchyOperatorsContext;

HierarchyOperatorsContext.prototype.HIERARCHY = function() {
    return this.getToken(VtlParser.HIERARCHY, 0);
};

HierarchyOperatorsContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

HierarchyOperatorsContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

HierarchyOperatorsContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

HierarchyOperatorsContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

HierarchyOperatorsContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

HierarchyOperatorsContext.prototype.conditionClause = function() {
    return this.getTypedRuleContext(ConditionClauseContext,0);
};

HierarchyOperatorsContext.prototype.RULE = function() {
    return this.getToken(VtlParser.RULE, 0);
};

HierarchyOperatorsContext.prototype.validationMode = function() {
    return this.getTypedRuleContext(ValidationModeContext,0);
};

HierarchyOperatorsContext.prototype.inputModeHierarchy = function() {
    return this.getTypedRuleContext(InputModeHierarchyContext,0);
};

HierarchyOperatorsContext.prototype.outputModeHierarchy = function() {
    return this.getTypedRuleContext(OutputModeHierarchyContext,0);
};

HierarchyOperatorsContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

HierarchyOperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHierarchyOperators(this);
	}
};

HierarchyOperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHierarchyOperators(this);
	}
};

HierarchyOperatorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitHierarchyOperators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.HierarchyOperatorsContext = HierarchyOperatorsContext;

VtlParser.prototype.hierarchyOperators = function() {

    var localctx = new HierarchyOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, VtlParser.RULE_hierarchyOperators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.match(VtlParser.HIERARCHY);
        this.state = 682;
        this.match(VtlParser.LPAREN);
        this.state = 683;
        localctx.op = this.expr(0);
        this.state = 684;
        this.match(VtlParser.COMMA);
        this.state = 685;
        localctx.hrName = this.match(VtlParser.IDENTIFIER);
        this.state = 687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CONDITION) {
            this.state = 686;
            this.conditionClause();
        }

        this.state = 691;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 689;
            this.match(VtlParser.RULE);
            this.state = 690;
            localctx.ruleComponent = this.componentID();

        }
        this.state = 694;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 215)) & ~0x1f) == 0 && ((1 << (_la - 215)) & ((1 << (VtlParser.NON_NULL - 215)) | (1 << (VtlParser.NON_ZERO - 215)) | (1 << (VtlParser.PARTIAL_NULL - 215)) | (1 << (VtlParser.PARTIAL_ZERO - 215)) | (1 << (VtlParser.ALWAYS_NULL - 215)) | (1 << (VtlParser.ALWAYS_ZERO - 215)))) !== 0)) {
            this.state = 693;
            this.validationMode();
        }

        this.state = 697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.DATASET || _la===VtlParser.RULE || _la===VtlParser.RULE_PRIORITY) {
            this.state = 696;
            this.inputModeHierarchy();
        }

        this.state = 700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ALL || _la===VtlParser.COMPUTED) {
            this.state = 699;
            this.outputModeHierarchy();
        }

        this.state = 702;
        this.match(VtlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValidationOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_validationOperators;
    return this;
}

ValidationOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValidationOperatorsContext.prototype.constructor = ValidationOperatorsContext;


 
ValidationOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ValidateHRrulesetContext(parser, ctx) {
	ValidationOperatorsContext.call(this, parser);
    this.op = null; // ExprContext;
    this.hrName = null; // Token;
    ValidationOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValidateHRrulesetContext.prototype = Object.create(ValidationOperatorsContext.prototype);
ValidateHRrulesetContext.prototype.constructor = ValidateHRrulesetContext;

VtlParser.ValidateHRrulesetContext = ValidateHRrulesetContext;

ValidateHRrulesetContext.prototype.CHECK_HIERARCHY = function() {
    return this.getToken(VtlParser.CHECK_HIERARCHY, 0);
};

ValidateHRrulesetContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

ValidateHRrulesetContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

ValidateHRrulesetContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

ValidateHRrulesetContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ValidateHRrulesetContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValidateHRrulesetContext.prototype.conditionClause = function() {
    return this.getTypedRuleContext(ConditionClauseContext,0);
};

ValidateHRrulesetContext.prototype.RULE = function() {
    return this.getToken(VtlParser.RULE, 0);
};

ValidateHRrulesetContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

ValidateHRrulesetContext.prototype.validationMode = function() {
    return this.getTypedRuleContext(ValidationModeContext,0);
};

ValidateHRrulesetContext.prototype.inputMode = function() {
    return this.getTypedRuleContext(InputModeContext,0);
};

ValidateHRrulesetContext.prototype.validationOutput = function() {
    return this.getTypedRuleContext(ValidationOutputContext,0);
};
ValidateHRrulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidateHRruleset(this);
	}
};

ValidateHRrulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidateHRruleset(this);
	}
};

ValidateHRrulesetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValidateHRruleset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ValidateDPrulesetContext(parser, ctx) {
	ValidationOperatorsContext.call(this, parser);
    this.op = null; // ExprContext;
    this.dpName = null; // Token;
    ValidationOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValidateDPrulesetContext.prototype = Object.create(ValidationOperatorsContext.prototype);
ValidateDPrulesetContext.prototype.constructor = ValidateDPrulesetContext;

VtlParser.ValidateDPrulesetContext = ValidateDPrulesetContext;

ValidateDPrulesetContext.prototype.CHECK_DATAPOINT = function() {
    return this.getToken(VtlParser.CHECK_DATAPOINT, 0);
};

ValidateDPrulesetContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

ValidateDPrulesetContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


ValidateDPrulesetContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

ValidateDPrulesetContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ValidateDPrulesetContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValidateDPrulesetContext.prototype.COMPONENTS = function() {
    return this.getToken(VtlParser.COMPONENTS, 0);
};

ValidateDPrulesetContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

ValidateDPrulesetContext.prototype.validationOutput = function() {
    return this.getTypedRuleContext(ValidationOutputContext,0);
};
ValidateDPrulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidateDPruleset(this);
	}
};

ValidateDPrulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidateDPruleset(this);
	}
};

ValidateDPrulesetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValidateDPruleset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ValidationSimpleContext(parser, ctx) {
	ValidationOperatorsContext.call(this, parser);
    this.op = null; // ExprContext;
    this.codeErr = null; // ErCodeContext;
    this.levelCode = null; // ErLevelContext;
    this.output = null; // Token;
    ValidationOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValidationSimpleContext.prototype = Object.create(ValidationOperatorsContext.prototype);
ValidationSimpleContext.prototype.constructor = ValidationSimpleContext;

VtlParser.ValidationSimpleContext = ValidationSimpleContext;

ValidationSimpleContext.prototype.CHECK = function() {
    return this.getToken(VtlParser.CHECK, 0);
};

ValidationSimpleContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

ValidationSimpleContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

ValidationSimpleContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ValidationSimpleContext.prototype.imbalanceExpr = function() {
    return this.getTypedRuleContext(ImbalanceExprContext,0);
};

ValidationSimpleContext.prototype.erCode = function() {
    return this.getTypedRuleContext(ErCodeContext,0);
};

ValidationSimpleContext.prototype.erLevel = function() {
    return this.getTypedRuleContext(ErLevelContext,0);
};

ValidationSimpleContext.prototype.INVALID = function() {
    return this.getToken(VtlParser.INVALID, 0);
};

ValidationSimpleContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};
ValidationSimpleContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationSimple(this);
	}
};

ValidationSimpleContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationSimple(this);
	}
};

ValidationSimpleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValidationSimple(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.ValidationOperatorsContext = ValidationOperatorsContext;

VtlParser.prototype.validationOperators = function() {

    var localctx = new ValidationOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, VtlParser.RULE_validationOperators);
    var _la = 0; // Token type
    try {
        this.state = 765;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.CHECK_DATAPOINT:
            localctx = new ValidateDPrulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 704;
            this.match(VtlParser.CHECK_DATAPOINT);
            this.state = 705;
            this.match(VtlParser.LPAREN);
            this.state = 706;
            localctx.op = this.expr(0);
            this.state = 707;
            this.match(VtlParser.COMMA);
            this.state = 708;
            localctx.dpName = this.match(VtlParser.IDENTIFIER);
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMPONENTS) {
                this.state = 709;
                this.match(VtlParser.COMPONENTS);
                this.state = 710;
                this.componentID();
                this.state = 715;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===VtlParser.COMMA) {
                    this.state = 711;
                    this.match(VtlParser.COMMA);
                    this.state = 712;
                    this.componentID();
                    this.state = 717;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 721;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.ALL || _la===VtlParser.INVALID || _la===VtlParser.ALL_MEASURES) {
                this.state = 720;
                this.validationOutput();
            }

            this.state = 723;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.CHECK_HIERARCHY:
            localctx = new ValidateHRrulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 725;
            this.match(VtlParser.CHECK_HIERARCHY);
            this.state = 726;
            this.match(VtlParser.LPAREN);
            this.state = 727;
            localctx.op = this.expr(0);
            this.state = 728;
            this.match(VtlParser.COMMA);
            this.state = 729;
            localctx.hrName = this.match(VtlParser.IDENTIFIER);
            this.state = 731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.CONDITION) {
                this.state = 730;
                this.conditionClause();
            }

            this.state = 735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.RULE) {
                this.state = 733;
                this.match(VtlParser.RULE);
                this.state = 734;
                this.componentID();
            }

            this.state = 738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 215)) & ~0x1f) == 0 && ((1 << (_la - 215)) & ((1 << (VtlParser.NON_NULL - 215)) | (1 << (VtlParser.NON_ZERO - 215)) | (1 << (VtlParser.PARTIAL_NULL - 215)) | (1 << (VtlParser.PARTIAL_ZERO - 215)) | (1 << (VtlParser.ALWAYS_NULL - 215)) | (1 << (VtlParser.ALWAYS_ZERO - 215)))) !== 0)) {
                this.state = 737;
                this.validationMode();
            }

            this.state = 741;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.DATASET || _la===VtlParser.DATASET_PRIORITY) {
                this.state = 740;
                this.inputMode();
            }

            this.state = 744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.ALL || _la===VtlParser.INVALID || _la===VtlParser.ALL_MEASURES) {
                this.state = 743;
                this.validationOutput();
            }

            this.state = 746;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.CHECK:
            localctx = new ValidationSimpleContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 748;
            this.match(VtlParser.CHECK);
            this.state = 749;
            this.match(VtlParser.LPAREN);
            this.state = 750;
            localctx.op = this.expr(0);
            this.state = 752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.ERRORCODE) {
                this.state = 751;
                localctx.codeErr = this.erCode();
            }

            this.state = 755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.ERRORLEVEL) {
                this.state = 754;
                localctx.levelCode = this.erLevel();
            }

            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.IMBALANCE) {
                this.state = 757;
                this.imbalanceExpr();
            }

            this.state = 761;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.ALL || _la===VtlParser.INVALID) {
                this.state = 760;
                localctx.output = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===VtlParser.ALL || _la===VtlParser.INVALID)) {
                    localctx.output = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 763;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_conditionalOperators;
    return this;
}

ConditionalOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalOperatorsContext.prototype.constructor = ConditionalOperatorsContext;


 
ConditionalOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NvlAtomContext(parser, ctx) {
	ConditionalOperatorsContext.call(this, parser);
    this.left = null; // ExprContext;
    this.right = null; // ExprContext;
    ConditionalOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NvlAtomContext.prototype = Object.create(ConditionalOperatorsContext.prototype);
NvlAtomContext.prototype.constructor = NvlAtomContext;

VtlParser.NvlAtomContext = NvlAtomContext;

NvlAtomContext.prototype.NVL = function() {
    return this.getToken(VtlParser.NVL, 0);
};

NvlAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

NvlAtomContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

NvlAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

NvlAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
NvlAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterNvlAtom(this);
	}
};

NvlAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitNvlAtom(this);
	}
};

NvlAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitNvlAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.ConditionalOperatorsContext = ConditionalOperatorsContext;

VtlParser.prototype.conditionalOperators = function() {

    var localctx = new ConditionalOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, VtlParser.RULE_conditionalOperators);
    try {
        localctx = new NvlAtomContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        this.match(VtlParser.NVL);
        this.state = 768;
        this.match(VtlParser.LPAREN);
        this.state = 769;
        localctx.left = this.expr(0);
        this.state = 770;
        this.match(VtlParser.COMMA);
        this.state = 771;
        localctx.right = this.expr(0);
        this.state = 772;
        this.match(VtlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrOperatorsGroupingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrOperatorsGrouping;
    return this;
}

AggrOperatorsGroupingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrOperatorsGroupingContext.prototype.constructor = AggrOperatorsGroupingContext;


 
AggrOperatorsGroupingContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AggrDatasetContext(parser, ctx) {
	AggrOperatorsGroupingContext.call(this, parser);
    this.op = null; // Token;
    AggrOperatorsGroupingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggrDatasetContext.prototype = Object.create(AggrOperatorsGroupingContext.prototype);
AggrDatasetContext.prototype.constructor = AggrDatasetContext;

VtlParser.AggrDatasetContext = AggrDatasetContext;

AggrDatasetContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

AggrDatasetContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AggrDatasetContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

AggrDatasetContext.prototype.SUM = function() {
    return this.getToken(VtlParser.SUM, 0);
};

AggrDatasetContext.prototype.AVG = function() {
    return this.getToken(VtlParser.AVG, 0);
};

AggrDatasetContext.prototype.COUNT = function() {
    return this.getToken(VtlParser.COUNT, 0);
};

AggrDatasetContext.prototype.MEDIAN = function() {
    return this.getToken(VtlParser.MEDIAN, 0);
};

AggrDatasetContext.prototype.MIN = function() {
    return this.getToken(VtlParser.MIN, 0);
};

AggrDatasetContext.prototype.MAX = function() {
    return this.getToken(VtlParser.MAX, 0);
};

AggrDatasetContext.prototype.STDDEV_POP = function() {
    return this.getToken(VtlParser.STDDEV_POP, 0);
};

AggrDatasetContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AggrDatasetContext.prototype.VAR_POP = function() {
    return this.getToken(VtlParser.VAR_POP, 0);
};

AggrDatasetContext.prototype.VAR_SAMP = function() {
    return this.getToken(VtlParser.VAR_SAMP, 0);
};

AggrDatasetContext.prototype.groupingClause = function() {
    return this.getTypedRuleContext(GroupingClauseContext,0);
};

AggrDatasetContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};
AggrDatasetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrDataset(this);
	}
};

AggrDatasetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrDataset(this);
	}
};

AggrDatasetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAggrDataset(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.AggrOperatorsGroupingContext = AggrOperatorsGroupingContext;

VtlParser.prototype.aggrOperatorsGrouping = function() {

    var localctx = new AggrOperatorsGroupingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, VtlParser.RULE_aggrOperatorsGrouping);
    var _la = 0; // Token type
    try {
        localctx = new AggrDatasetContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 774;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (VtlParser.MIN - 68)) | (1 << (VtlParser.MAX - 68)) | (1 << (VtlParser.SUM - 68)) | (1 << (VtlParser.AVG - 68)) | (1 << (VtlParser.MEDIAN - 68)) | (1 << (VtlParser.COUNT - 68)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (VtlParser.STDDEV_POP - 130)) | (1 << (VtlParser.STDDEV_SAMP - 130)) | (1 << (VtlParser.VAR_POP - 130)) | (1 << (VtlParser.VAR_SAMP - 130)))) !== 0))) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 775;
        this.match(VtlParser.LPAREN);
        this.state = 776;
        this.expr(0);
        this.state = 781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.GROUP) {
            this.state = 777;
            this.groupingClause();
            this.state = 779;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.HAVING) {
                this.state = 778;
                this.havingClause();
            }

        }

        this.state = 783;
        this.match(VtlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_anFunction;
    return this;
}

AnFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnFunctionContext.prototype.constructor = AnFunctionContext;


 
AnFunctionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LagOrLeadAnContext(parser, ctx) {
	AnFunctionContext.call(this, parser);
    this.op = null; // Token;
    this.offet = null; // SignedIntegerContext;
    this.defaultValue = null; // ConstantContext;
    this.partition = null; // PartitionByClauseContext;
    this.orderBy = null; // OrderByClauseContext;
    AnFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LagOrLeadAnContext.prototype = Object.create(AnFunctionContext.prototype);
LagOrLeadAnContext.prototype.constructor = LagOrLeadAnContext;

VtlParser.LagOrLeadAnContext = LagOrLeadAnContext;

LagOrLeadAnContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.LPAREN);
    } else {
        return this.getToken(VtlParser.LPAREN, i);
    }
};


LagOrLeadAnContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

LagOrLeadAnContext.prototype.OVER = function() {
    return this.getToken(VtlParser.OVER, 0);
};

LagOrLeadAnContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.RPAREN);
    } else {
        return this.getToken(VtlParser.RPAREN, i);
    }
};


LagOrLeadAnContext.prototype.LAG = function() {
    return this.getToken(VtlParser.LAG, 0);
};

LagOrLeadAnContext.prototype.LEAD = function() {
    return this.getToken(VtlParser.LEAD, 0);
};

LagOrLeadAnContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

LagOrLeadAnContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

LagOrLeadAnContext.prototype.signedInteger = function() {
    return this.getTypedRuleContext(SignedIntegerContext,0);
};

LagOrLeadAnContext.prototype.partitionByClause = function() {
    return this.getTypedRuleContext(PartitionByClauseContext,0);
};

LagOrLeadAnContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
LagOrLeadAnContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLagOrLeadAn(this);
	}
};

LagOrLeadAnContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLagOrLeadAn(this);
	}
};

LagOrLeadAnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitLagOrLeadAn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RatioToReportAnContext(parser, ctx) {
	AnFunctionContext.call(this, parser);
    this.op = null; // Token;
    this.partition = null; // PartitionByClauseContext;
    AnFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RatioToReportAnContext.prototype = Object.create(AnFunctionContext.prototype);
RatioToReportAnContext.prototype.constructor = RatioToReportAnContext;

VtlParser.RatioToReportAnContext = RatioToReportAnContext;

RatioToReportAnContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.LPAREN);
    } else {
        return this.getToken(VtlParser.LPAREN, i);
    }
};


RatioToReportAnContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

RatioToReportAnContext.prototype.OVER = function() {
    return this.getToken(VtlParser.OVER, 0);
};

RatioToReportAnContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.RPAREN);
    } else {
        return this.getToken(VtlParser.RPAREN, i);
    }
};


RatioToReportAnContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(VtlParser.RATIO_TO_REPORT, 0);
};

RatioToReportAnContext.prototype.partitionByClause = function() {
    return this.getTypedRuleContext(PartitionByClauseContext,0);
};
RatioToReportAnContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRatioToReportAn(this);
	}
};

RatioToReportAnContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRatioToReportAn(this);
	}
};

RatioToReportAnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRatioToReportAn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AnSimpleFunctionContext(parser, ctx) {
	AnFunctionContext.call(this, parser);
    this.op = null; // Token;
    this.partition = null; // PartitionByClauseContext;
    this.orderBy = null; // OrderByClauseContext;
    this.windowing = null; // WindowingClauseContext;
    AnFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnSimpleFunctionContext.prototype = Object.create(AnFunctionContext.prototype);
AnSimpleFunctionContext.prototype.constructor = AnSimpleFunctionContext;

VtlParser.AnSimpleFunctionContext = AnSimpleFunctionContext;

AnSimpleFunctionContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.LPAREN);
    } else {
        return this.getToken(VtlParser.LPAREN, i);
    }
};


AnSimpleFunctionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AnSimpleFunctionContext.prototype.OVER = function() {
    return this.getToken(VtlParser.OVER, 0);
};

AnSimpleFunctionContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.RPAREN);
    } else {
        return this.getToken(VtlParser.RPAREN, i);
    }
};


AnSimpleFunctionContext.prototype.SUM = function() {
    return this.getToken(VtlParser.SUM, 0);
};

AnSimpleFunctionContext.prototype.AVG = function() {
    return this.getToken(VtlParser.AVG, 0);
};

AnSimpleFunctionContext.prototype.COUNT = function() {
    return this.getToken(VtlParser.COUNT, 0);
};

AnSimpleFunctionContext.prototype.MEDIAN = function() {
    return this.getToken(VtlParser.MEDIAN, 0);
};

AnSimpleFunctionContext.prototype.MIN = function() {
    return this.getToken(VtlParser.MIN, 0);
};

AnSimpleFunctionContext.prototype.MAX = function() {
    return this.getToken(VtlParser.MAX, 0);
};

AnSimpleFunctionContext.prototype.STDDEV_POP = function() {
    return this.getToken(VtlParser.STDDEV_POP, 0);
};

AnSimpleFunctionContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AnSimpleFunctionContext.prototype.VAR_POP = function() {
    return this.getToken(VtlParser.VAR_POP, 0);
};

AnSimpleFunctionContext.prototype.VAR_SAMP = function() {
    return this.getToken(VtlParser.VAR_SAMP, 0);
};

AnSimpleFunctionContext.prototype.FIRST_VALUE = function() {
    return this.getToken(VtlParser.FIRST_VALUE, 0);
};

AnSimpleFunctionContext.prototype.LAST_VALUE = function() {
    return this.getToken(VtlParser.LAST_VALUE, 0);
};

AnSimpleFunctionContext.prototype.partitionByClause = function() {
    return this.getTypedRuleContext(PartitionByClauseContext,0);
};

AnSimpleFunctionContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

AnSimpleFunctionContext.prototype.windowingClause = function() {
    return this.getTypedRuleContext(WindowingClauseContext,0);
};
AnSimpleFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAnSimpleFunction(this);
	}
};

AnSimpleFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAnSimpleFunction(this);
	}
};

AnSimpleFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAnSimpleFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.AnFunctionContext = AnFunctionContext;

VtlParser.prototype.anFunction = function() {

    var localctx = new AnFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, VtlParser.RULE_anFunction);
    var _la = 0; // Token type
    try {
        this.state = 831;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.MIN:
        case VtlParser.MAX:
        case VtlParser.SUM:
        case VtlParser.AVG:
        case VtlParser.MEDIAN:
        case VtlParser.COUNT:
        case VtlParser.STDDEV_POP:
        case VtlParser.STDDEV_SAMP:
        case VtlParser.VAR_POP:
        case VtlParser.VAR_SAMP:
        case VtlParser.FIRST_VALUE:
        case VtlParser.LAST_VALUE:
            localctx = new AnSimpleFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 785;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (VtlParser.MIN - 68)) | (1 << (VtlParser.MAX - 68)) | (1 << (VtlParser.SUM - 68)) | (1 << (VtlParser.AVG - 68)) | (1 << (VtlParser.MEDIAN - 68)) | (1 << (VtlParser.COUNT - 68)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (VtlParser.STDDEV_POP - 130)) | (1 << (VtlParser.STDDEV_SAMP - 130)) | (1 << (VtlParser.VAR_POP - 130)) | (1 << (VtlParser.VAR_SAMP - 130)) | (1 << (VtlParser.FIRST_VALUE - 130)) | (1 << (VtlParser.LAST_VALUE - 130)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 786;
            this.match(VtlParser.LPAREN);
            this.state = 787;
            this.expr(0);
            this.state = 788;
            this.match(VtlParser.OVER);
            this.state = 789;
            this.match(VtlParser.LPAREN);

            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.PARTITION) {
                this.state = 790;
                localctx.partition = this.partitionByClause();
            }

            this.state = 794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.ORDER) {
                this.state = 793;
                localctx.orderBy = this.orderByClause();
            }

            this.state = 797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.DATA || _la===VtlParser.RANGE) {
                this.state = 796;
                localctx.windowing = this.windowingClause();
            }

            this.state = 799;
            this.match(VtlParser.RPAREN);
            this.state = 800;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.LAG:
        case VtlParser.LEAD:
            localctx = new LagOrLeadAnContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 802;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.LAG || _la===VtlParser.LEAD)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 803;
            this.match(VtlParser.LPAREN);
            this.state = 804;
            this.expr(0);
            this.state = 810;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.COMMA) {
                this.state = 805;
                this.match(VtlParser.COMMA);
                this.state = 806;
                localctx.offet = this.signedInteger();
                this.state = 808;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===VtlParser.NULL_CONSTANT || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (VtlParser.INTEGER_CONSTANT - 231)) | (1 << (VtlParser.NUMBER_CONSTANT - 231)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 231)) | (1 << (VtlParser.STRING_CONSTANT - 231)))) !== 0)) {
                    this.state = 807;
                    localctx.defaultValue = this.constant();
                }

            }

            this.state = 812;
            this.match(VtlParser.OVER);
            this.state = 813;
            this.match(VtlParser.LPAREN);

            this.state = 815;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.PARTITION) {
                this.state = 814;
                localctx.partition = this.partitionByClause();
            }

            this.state = 817;
            localctx.orderBy = this.orderByClause();
            this.state = 819;
            this.match(VtlParser.RPAREN);
            this.state = 820;
            this.match(VtlParser.RPAREN);
            break;
        case VtlParser.RATIO_TO_REPORT:
            localctx = new RatioToReportAnContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 822;
            localctx.op = this.match(VtlParser.RATIO_TO_REPORT);
            this.state = 823;
            this.match(VtlParser.LPAREN);
            this.state = 824;
            this.expr(0);
            this.state = 825;
            this.match(VtlParser.OVER);
            this.state = 826;
            this.match(VtlParser.LPAREN);

            this.state = 827;
            localctx.partition = this.partitionByClause();
            this.state = 828;
            this.match(VtlParser.RPAREN);
            this.state = 829;
            this.match(VtlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DistanceOperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_distanceOperators;
    return this;
}

DistanceOperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DistanceOperatorsContext.prototype.constructor = DistanceOperatorsContext;


 
DistanceOperatorsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LevenshteinAtomContext(parser, ctx) {
	DistanceOperatorsContext.call(this, parser);
    this.left = null; // ExprContext;
    this.right = null; // ExprContext;
    DistanceOperatorsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LevenshteinAtomContext.prototype = Object.create(DistanceOperatorsContext.prototype);
LevenshteinAtomContext.prototype.constructor = LevenshteinAtomContext;

VtlParser.LevenshteinAtomContext = LevenshteinAtomContext;

LevenshteinAtomContext.prototype.LEVENSHTEIN = function() {
    return this.getToken(VtlParser.LEVENSHTEIN, 0);
};

LevenshteinAtomContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

LevenshteinAtomContext.prototype.COMMA = function() {
    return this.getToken(VtlParser.COMMA, 0);
};

LevenshteinAtomContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

LevenshteinAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};
LevenshteinAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLevenshteinAtom(this);
	}
};

LevenshteinAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLevenshteinAtom(this);
	}
};

LevenshteinAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitLevenshteinAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.DistanceOperatorsContext = DistanceOperatorsContext;

VtlParser.prototype.distanceOperators = function() {

    var localctx = new DistanceOperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, VtlParser.RULE_distanceOperators);
    try {
        localctx = new LevenshteinAtomContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this.match(VtlParser.LEVENSHTEIN);
        this.state = 834;
        this.match(VtlParser.LPAREN);
        this.state = 835;
        localctx.left = this.expr(0);
        this.state = 836;
        this.match(VtlParser.COMMA);
        this.state = 837;
        localctx.right = this.expr(0);
        this.state = 838;
        this.match(VtlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_renameClauseItem;
    this.fromName = null; // ComponentIDContext
    this.toName = null; // ComponentIDContext
    return this;
}

RenameClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameClauseItemContext.prototype.constructor = RenameClauseItemContext;

RenameClauseItemContext.prototype.TO = function() {
    return this.getToken(VtlParser.TO, 0);
};

RenameClauseItemContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

RenameClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRenameClauseItem(this);
	}
};

RenameClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRenameClauseItem(this);
	}
};

RenameClauseItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRenameClauseItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RenameClauseItemContext = RenameClauseItemContext;

VtlParser.prototype.renameClauseItem = function() {

    var localctx = new RenameClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, VtlParser.RULE_renameClauseItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        localctx.fromName = this.componentID();
        this.state = 841;
        this.match(VtlParser.TO);
        this.state = 842;
        localctx.toName = this.componentID();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggregateClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggregateClause;
    return this;
}

AggregateClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateClauseContext.prototype.constructor = AggregateClauseContext;

AggregateClauseContext.prototype.aggrFunctionClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AggrFunctionClauseContext);
    } else {
        return this.getTypedRuleContext(AggrFunctionClauseContext,i);
    }
};

AggregateClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


AggregateClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggregateClause(this);
	}
};

AggregateClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggregateClause(this);
	}
};

AggregateClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAggregateClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.AggregateClauseContext = AggregateClauseContext;

VtlParser.prototype.aggregateClause = function() {

    var localctx = new AggregateClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, VtlParser.RULE_aggregateClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this.aggrFunctionClause();
        this.state = 849;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 845;
            this.match(VtlParser.COMMA);
            this.state = 846;
            this.aggrFunctionClause();
            this.state = 851;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrFunctionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrFunctionClause;
    return this;
}

AggrFunctionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrFunctionClauseContext.prototype.constructor = AggrFunctionClauseContext;

AggrFunctionClauseContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

AggrFunctionClauseContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

AggrFunctionClauseContext.prototype.aggrOperatorsGrouping = function() {
    return this.getTypedRuleContext(AggrOperatorsGroupingContext,0);
};

AggrFunctionClauseContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

AggrFunctionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrFunctionClause(this);
	}
};

AggrFunctionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrFunctionClause(this);
	}
};

AggrFunctionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAggrFunctionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.AggrFunctionClauseContext = AggrFunctionClauseContext;

VtlParser.prototype.aggrFunctionClause = function() {

    var localctx = new AggrFunctionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, VtlParser.RULE_aggrFunctionClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (VtlParser.DIMENSION - 91)) | (1 << (VtlParser.MEASURE - 91)) | (1 << (VtlParser.ATTRIBUTE - 91)) | (1 << (VtlParser.VIRAL - 91)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 852;
            this.componentRole();
        }

        this.state = 855;
        this.componentID();
        this.state = 856;
        this.match(VtlParser.ASSIGN);
        this.state = 857;
        this.aggrOperatorsGrouping();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CalcClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_calcClauseItem;
    return this;
}

CalcClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcClauseItemContext.prototype.constructor = CalcClauseItemContext;

CalcClauseItemContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

CalcClauseItemContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

CalcClauseItemContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CalcClauseItemContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

CalcClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCalcClauseItem(this);
	}
};

CalcClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCalcClauseItem(this);
	}
};

CalcClauseItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCalcClauseItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.CalcClauseItemContext = CalcClauseItemContext;

VtlParser.prototype.calcClauseItem = function() {

    var localctx = new CalcClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, VtlParser.RULE_calcClauseItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (VtlParser.DIMENSION - 91)) | (1 << (VtlParser.MEASURE - 91)) | (1 << (VtlParser.ATTRIBUTE - 91)) | (1 << (VtlParser.VIRAL - 91)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 859;
            this.componentRole();
        }

        this.state = 862;
        this.componentID();
        this.state = 863;
        this.match(VtlParser.ASSIGN);
        this.state = 864;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubspaceClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_subspaceClauseItem;
    return this;
}

SubspaceClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubspaceClauseItemContext.prototype.constructor = SubspaceClauseItemContext;

SubspaceClauseItemContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

SubspaceClauseItemContext.prototype.EQ = function() {
    return this.getToken(VtlParser.EQ, 0);
};

SubspaceClauseItemContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

SubspaceClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSubspaceClauseItem(this);
	}
};

SubspaceClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSubspaceClauseItem(this);
	}
};

SubspaceClauseItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSubspaceClauseItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.SubspaceClauseItemContext = SubspaceClauseItemContext;

VtlParser.prototype.subspaceClauseItem = function() {

    var localctx = new SubspaceClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, VtlParser.RULE_subspaceClauseItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 866;
        this.componentID();
        this.state = 867;
        this.match(VtlParser.EQ);
        this.state = 868;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinClauseWithoutUsingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinClauseWithoutUsing;
    return this;
}

JoinClauseWithoutUsingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinClauseWithoutUsingContext.prototype.constructor = JoinClauseWithoutUsingContext;

JoinClauseWithoutUsingContext.prototype.joinClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinClauseItemContext);
    } else {
        return this.getTypedRuleContext(JoinClauseItemContext,i);
    }
};

JoinClauseWithoutUsingContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


JoinClauseWithoutUsingContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinClauseWithoutUsing(this);
	}
};

JoinClauseWithoutUsingContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinClauseWithoutUsing(this);
	}
};

JoinClauseWithoutUsingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitJoinClauseWithoutUsing(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.JoinClauseWithoutUsingContext = JoinClauseWithoutUsingContext;

VtlParser.prototype.joinClauseWithoutUsing = function() {

    var localctx = new JoinClauseWithoutUsingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, VtlParser.RULE_joinClauseWithoutUsing);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.joinClauseItem();
        this.state = 875;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 871;
            this.match(VtlParser.COMMA);
            this.state = 872;
            this.joinClauseItem();
            this.state = 877;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinClause;
    return this;
}

JoinClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinClauseContext.prototype.constructor = JoinClauseContext;

JoinClauseContext.prototype.joinClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinClauseItemContext);
    } else {
        return this.getTypedRuleContext(JoinClauseItemContext,i);
    }
};

JoinClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


JoinClauseContext.prototype.USING = function() {
    return this.getToken(VtlParser.USING, 0);
};

JoinClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

JoinClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinClause(this);
	}
};

JoinClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinClause(this);
	}
};

JoinClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitJoinClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.JoinClauseContext = JoinClauseContext;

VtlParser.prototype.joinClause = function() {

    var localctx = new JoinClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, VtlParser.RULE_joinClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        this.joinClauseItem();
        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 879;
            this.match(VtlParser.COMMA);
            this.state = 880;
            this.joinClauseItem();
            this.state = 885;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 895;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.USING) {
            this.state = 886;
            this.match(VtlParser.USING);
            this.state = 887;
            this.componentID();
            this.state = 892;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.COMMA) {
                this.state = 888;
                this.match(VtlParser.COMMA);
                this.state = 889;
                this.componentID();
                this.state = 894;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinClauseItem;
    return this;
}

JoinClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinClauseItemContext.prototype.constructor = JoinClauseItemContext;

JoinClauseItemContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

JoinClauseItemContext.prototype.AS = function() {
    return this.getToken(VtlParser.AS, 0);
};

JoinClauseItemContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

JoinClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinClauseItem(this);
	}
};

JoinClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinClauseItem(this);
	}
};

JoinClauseItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitJoinClauseItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.JoinClauseItemContext = JoinClauseItemContext;

VtlParser.prototype.joinClauseItem = function() {

    var localctx = new JoinClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, VtlParser.RULE_joinClauseItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this.expr(0);
        this.state = 900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.AS) {
            this.state = 898;
            this.match(VtlParser.AS);
            this.state = 899;
            this.alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinBody;
    return this;
}

JoinBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinBodyContext.prototype.constructor = JoinBodyContext;

JoinBodyContext.prototype.filterClause = function() {
    return this.getTypedRuleContext(FilterClauseContext,0);
};

JoinBodyContext.prototype.calcClause = function() {
    return this.getTypedRuleContext(CalcClauseContext,0);
};

JoinBodyContext.prototype.joinApplyClause = function() {
    return this.getTypedRuleContext(JoinApplyClauseContext,0);
};

JoinBodyContext.prototype.aggrClause = function() {
    return this.getTypedRuleContext(AggrClauseContext,0);
};

JoinBodyContext.prototype.keepOrDropClause = function() {
    return this.getTypedRuleContext(KeepOrDropClauseContext,0);
};

JoinBodyContext.prototype.renameClause = function() {
    return this.getTypedRuleContext(RenameClauseContext,0);
};

JoinBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinBody(this);
	}
};

JoinBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinBody(this);
	}
};

JoinBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitJoinBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.JoinBodyContext = JoinBodyContext;

VtlParser.prototype.joinBody = function() {

    var localctx = new JoinBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, VtlParser.RULE_joinBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.FILTER) {
            this.state = 902;
            this.filterClause();
        }

        this.state = 908;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case VtlParser.CALC:
        	this.state = 905;
        	this.calcClause();
        	break;
        case VtlParser.APPLY:
        	this.state = 906;
        	this.joinApplyClause();
        	break;
        case VtlParser.AGGREGATE:
        	this.state = 907;
        	this.aggrClause();
        	break;
        case VtlParser.RPAREN:
        case VtlParser.DROP:
        case VtlParser.KEEP:
        case VtlParser.RENAME:
        	break;
        default:
        	break;
        }
        this.state = 911;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.DROP || _la===VtlParser.KEEP) {
            this.state = 910;
            this.keepOrDropClause();
        }

        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.RENAME) {
            this.state = 913;
            this.renameClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinApplyClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinApplyClause;
    return this;
}

JoinApplyClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinApplyClauseContext.prototype.constructor = JoinApplyClauseContext;

JoinApplyClauseContext.prototype.APPLY = function() {
    return this.getToken(VtlParser.APPLY, 0);
};

JoinApplyClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

JoinApplyClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinApplyClause(this);
	}
};

JoinApplyClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinApplyClause(this);
	}
};

JoinApplyClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitJoinApplyClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.JoinApplyClauseContext = JoinApplyClauseContext;

VtlParser.prototype.joinApplyClause = function() {

    var localctx = new JoinApplyClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, VtlParser.RULE_joinApplyClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        this.match(VtlParser.APPLY);
        this.state = 917;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_partitionByClause;
    return this;
}

PartitionByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionByClauseContext.prototype.constructor = PartitionByClauseContext;

PartitionByClauseContext.prototype.PARTITION = function() {
    return this.getToken(VtlParser.PARTITION, 0);
};

PartitionByClauseContext.prototype.BY = function() {
    return this.getToken(VtlParser.BY, 0);
};

PartitionByClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

PartitionByClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


PartitionByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPartitionByClause(this);
	}
};

PartitionByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPartitionByClause(this);
	}
};

PartitionByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitPartitionByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.PartitionByClauseContext = PartitionByClauseContext;

VtlParser.prototype.partitionByClause = function() {

    var localctx = new PartitionByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, VtlParser.RULE_partitionByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        this.match(VtlParser.PARTITION);
        this.state = 920;
        this.match(VtlParser.BY);
        this.state = 921;
        this.componentID();
        this.state = 926;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 922;
            this.match(VtlParser.COMMA);
            this.state = 923;
            this.componentID();
            this.state = 928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_orderByClause;
    return this;
}

OrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(VtlParser.ORDER, 0);
};

OrderByClauseContext.prototype.BY = function() {
    return this.getToken(VtlParser.BY, 0);
};

OrderByClauseContext.prototype.orderByItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderByItemContext);
    } else {
        return this.getTypedRuleContext(OrderByItemContext,i);
    }
};

OrderByClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


OrderByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOrderByClause(this);
	}
};

OrderByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOrderByClause(this);
	}
};

OrderByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOrderByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.OrderByClauseContext = OrderByClauseContext;

VtlParser.prototype.orderByClause = function() {

    var localctx = new OrderByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, VtlParser.RULE_orderByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 929;
        this.match(VtlParser.ORDER);
        this.state = 930;
        this.match(VtlParser.BY);
        this.state = 931;
        this.orderByItem();
        this.state = 936;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 932;
            this.match(VtlParser.COMMA);
            this.state = 933;
            this.orderByItem();
            this.state = 938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_orderByItem;
    return this;
}

OrderByItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByItemContext.prototype.constructor = OrderByItemContext;

OrderByItemContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

OrderByItemContext.prototype.ASC = function() {
    return this.getToken(VtlParser.ASC, 0);
};

OrderByItemContext.prototype.DESC = function() {
    return this.getToken(VtlParser.DESC, 0);
};

OrderByItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOrderByItem(this);
	}
};

OrderByItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOrderByItem(this);
	}
};

OrderByItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOrderByItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.OrderByItemContext = OrderByItemContext;

VtlParser.prototype.orderByItem = function() {

    var localctx = new OrderByItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, VtlParser.RULE_orderByItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.componentID();
        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ASC || _la===VtlParser.DESC) {
            this.state = 940;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.ASC || _la===VtlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_windowingClause;
    this.from_ = null; // LimitClauseItemContext
    this.to_ = null; // LimitClauseItemContext
    return this;
}

WindowingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowingClauseContext.prototype.constructor = WindowingClauseContext;

WindowingClauseContext.prototype.BETWEEN = function() {
    return this.getToken(VtlParser.BETWEEN, 0);
};

WindowingClauseContext.prototype.AND = function() {
    return this.getToken(VtlParser.AND, 0);
};

WindowingClauseContext.prototype.limitClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LimitClauseItemContext);
    } else {
        return this.getTypedRuleContext(LimitClauseItemContext,i);
    }
};

WindowingClauseContext.prototype.RANGE = function() {
    return this.getToken(VtlParser.RANGE, 0);
};

WindowingClauseContext.prototype.DATA = function() {
    return this.getToken(VtlParser.DATA, 0);
};

WindowingClauseContext.prototype.POINTS = function() {
    return this.getToken(VtlParser.POINTS, 0);
};

WindowingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterWindowingClause(this);
	}
};

WindowingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitWindowingClause(this);
	}
};

WindowingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitWindowingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.WindowingClauseContext = WindowingClauseContext;

VtlParser.prototype.windowingClause = function() {

    var localctx = new WindowingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, VtlParser.RULE_windowingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.DATA:
            this.state = 943;
            this.match(VtlParser.DATA);
            this.state = 944;
            this.match(VtlParser.POINTS);
            break;
        case VtlParser.RANGE:
            this.state = 945;
            this.match(VtlParser.RANGE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 948;
        this.match(VtlParser.BETWEEN);
        this.state = 949;
        localctx.from_ = this.limitClauseItem();
        this.state = 950;
        this.match(VtlParser.AND);
        this.state = 951;
        localctx.to_ = this.limitClauseItem();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignedIntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_signedInteger;
    return this;
}

SignedIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignedIntegerContext.prototype.constructor = SignedIntegerContext;

SignedIntegerContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

SignedIntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSignedInteger(this);
	}
};

SignedIntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSignedInteger(this);
	}
};

SignedIntegerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSignedInteger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.SignedIntegerContext = SignedIntegerContext;

VtlParser.prototype.signedInteger = function() {

    var localctx = new SignedIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, VtlParser.RULE_signedInteger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 953;
        this.match(VtlParser.INTEGER_CONSTANT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_limitClauseItem;
    return this;
}

LimitClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseItemContext.prototype.constructor = LimitClauseItemContext;

LimitClauseItemContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

LimitClauseItemContext.prototype.PRECEDING = function() {
    return this.getToken(VtlParser.PRECEDING, 0);
};

LimitClauseItemContext.prototype.FOLLOWING = function() {
    return this.getToken(VtlParser.FOLLOWING, 0);
};

LimitClauseItemContext.prototype.CURRENT = function() {
    return this.getToken(VtlParser.CURRENT, 0);
};

LimitClauseItemContext.prototype.DATA = function() {
    return this.getToken(VtlParser.DATA, 0);
};

LimitClauseItemContext.prototype.POINT = function() {
    return this.getToken(VtlParser.POINT, 0);
};

LimitClauseItemContext.prototype.UNBOUNDED = function() {
    return this.getToken(VtlParser.UNBOUNDED, 0);
};

LimitClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLimitClauseItem(this);
	}
};

LimitClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLimitClauseItem(this);
	}
};

LimitClauseItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitLimitClauseItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.LimitClauseItemContext = LimitClauseItemContext;

VtlParser.prototype.limitClauseItem = function() {

    var localctx = new LimitClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, VtlParser.RULE_limitClauseItem);
    try {
        this.state = 966;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 955;
            this.match(VtlParser.INTEGER_CONSTANT);
            this.state = 956;
            this.match(VtlParser.PRECEDING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 957;
            this.match(VtlParser.INTEGER_CONSTANT);
            this.state = 958;
            this.match(VtlParser.FOLLOWING);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 959;
            this.match(VtlParser.CURRENT);
            this.state = 960;
            this.match(VtlParser.DATA);
            this.state = 961;
            this.match(VtlParser.POINT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 962;
            this.match(VtlParser.UNBOUNDED);
            this.state = 963;
            this.match(VtlParser.PRECEDING);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 964;
            this.match(VtlParser.UNBOUNDED);
            this.state = 965;
            this.match(VtlParser.FOLLOWING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_groupingClause;
    return this;
}

GroupingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingClauseContext.prototype.constructor = GroupingClauseContext;


 
GroupingClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function GroupAllContext(parser, ctx) {
	GroupingClauseContext.call(this, parser);
    GroupingClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GroupAllContext.prototype = Object.create(GroupingClauseContext.prototype);
GroupAllContext.prototype.constructor = GroupAllContext;

VtlParser.GroupAllContext = GroupAllContext;

GroupAllContext.prototype.GROUP = function() {
    return this.getToken(VtlParser.GROUP, 0);
};

GroupAllContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

GroupAllContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
GroupAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterGroupAll(this);
	}
};

GroupAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitGroupAll(this);
	}
};

GroupAllContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitGroupAll(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GroupByOrExceptContext(parser, ctx) {
	GroupingClauseContext.call(this, parser);
    this.op = null; // Token;
    GroupingClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GroupByOrExceptContext.prototype = Object.create(GroupingClauseContext.prototype);
GroupByOrExceptContext.prototype.constructor = GroupByOrExceptContext;

VtlParser.GroupByOrExceptContext = GroupByOrExceptContext;

GroupByOrExceptContext.prototype.GROUP = function() {
    return this.getToken(VtlParser.GROUP, 0);
};

GroupByOrExceptContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

GroupByOrExceptContext.prototype.BY = function() {
    return this.getToken(VtlParser.BY, 0);
};

GroupByOrExceptContext.prototype.EXCEPT = function() {
    return this.getToken(VtlParser.EXCEPT, 0);
};

GroupByOrExceptContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};

GroupByOrExceptContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterGroupByOrExcept(this);
	}
};

GroupByOrExceptContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitGroupByOrExcept(this);
	}
};

GroupByOrExceptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitGroupByOrExcept(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.GroupingClauseContext = GroupingClauseContext;

VtlParser.prototype.groupingClause = function() {

    var localctx = new GroupingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, VtlParser.RULE_groupingClause);
    var _la = 0; // Token type
    try {
        this.state = 981;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GroupByOrExceptContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 968;
            this.match(VtlParser.GROUP);
            this.state = 969;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.BY || _la===VtlParser.EXCEPT)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 970;
            this.componentID();
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.COMMA) {
                this.state = 971;
                this.match(VtlParser.COMMA);
                this.state = 972;
                this.componentID();
                this.state = 977;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new GroupAllContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 978;
            this.match(VtlParser.GROUP);
            this.state = 979;
            this.match(VtlParser.ALL);
            this.state = 980;
            this.expr(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING = function() {
    return this.getToken(VtlParser.HAVING, 0);
};

HavingClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

HavingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHavingClause(this);
	}
};

HavingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitHavingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.HavingClauseContext = HavingClauseContext;

VtlParser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, VtlParser.RULE_havingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 983;
        this.match(VtlParser.HAVING);
        this.state = 984;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_parameterItem;
    return this;
}

ParameterItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterItemContext.prototype.constructor = ParameterItemContext;

ParameterItemContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

ParameterItemContext.prototype.inputParameterType = function() {
    return this.getTypedRuleContext(InputParameterTypeContext,0);
};

ParameterItemContext.prototype.DEFAULT = function() {
    return this.getToken(VtlParser.DEFAULT, 0);
};

ParameterItemContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ParameterItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterParameterItem(this);
	}
};

ParameterItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitParameterItem(this);
	}
};

ParameterItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitParameterItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ParameterItemContext = ParameterItemContext;

VtlParser.prototype.parameterItem = function() {

    var localctx = new ParameterItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, VtlParser.RULE_parameterItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.varID();
        this.state = 987;
        this.inputParameterType();
        this.state = 990;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.DEFAULT) {
            this.state = 988;
            this.match(VtlParser.DEFAULT);
            this.state = 989;
            this.constant();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OutputParameterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_outputParameterType;
    return this;
}

OutputParameterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OutputParameterTypeContext.prototype.constructor = OutputParameterTypeContext;

OutputParameterTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

OutputParameterTypeContext.prototype.datasetType = function() {
    return this.getTypedRuleContext(DatasetTypeContext,0);
};

OutputParameterTypeContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

OutputParameterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOutputParameterType(this);
	}
};

OutputParameterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOutputParameterType(this);
	}
};

OutputParameterTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOutputParameterType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.OutputParameterTypeContext = OutputParameterTypeContext;

VtlParser.prototype.outputParameterType = function() {

    var localctx = new OutputParameterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, VtlParser.RULE_outputParameterType);
    try {
        this.state = 995;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.BOOLEAN:
        case VtlParser.DATE:
        case VtlParser.TIME_PERIOD:
        case VtlParser.NUMBER:
        case VtlParser.STRING:
        case VtlParser.TIME:
        case VtlParser.INTEGER:
        case VtlParser.DURATION:
        case VtlParser.SCALAR:
        case VtlParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 992;
            this.scalarType();
            break;
        case VtlParser.DATASET:
            this.enterOuterAlt(localctx, 2);
            this.state = 993;
            this.datasetType();
            break;
        case VtlParser.DIMENSION:
        case VtlParser.MEASURE:
        case VtlParser.ATTRIBUTE:
        case VtlParser.VIRAL:
        case VtlParser.COMPONENT:
            this.enterOuterAlt(localctx, 3);
            this.state = 994;
            this.componentType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OutputParameterTypeComponentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_outputParameterTypeComponent;
    return this;
}

OutputParameterTypeComponentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OutputParameterTypeComponentContext.prototype.constructor = OutputParameterTypeComponentContext;

OutputParameterTypeComponentContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

OutputParameterTypeComponentContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

OutputParameterTypeComponentContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOutputParameterTypeComponent(this);
	}
};

OutputParameterTypeComponentContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOutputParameterTypeComponent(this);
	}
};

OutputParameterTypeComponentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOutputParameterTypeComponent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.OutputParameterTypeComponentContext = OutputParameterTypeComponentContext;

VtlParser.prototype.outputParameterTypeComponent = function() {

    var localctx = new OutputParameterTypeComponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, VtlParser.RULE_outputParameterTypeComponent);
    try {
        this.state = 999;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.DIMENSION:
        case VtlParser.MEASURE:
        case VtlParser.ATTRIBUTE:
        case VtlParser.VIRAL:
        case VtlParser.COMPONENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 997;
            this.componentType();
            break;
        case VtlParser.BOOLEAN:
        case VtlParser.DATE:
        case VtlParser.TIME_PERIOD:
        case VtlParser.NUMBER:
        case VtlParser.STRING:
        case VtlParser.TIME:
        case VtlParser.INTEGER:
        case VtlParser.DURATION:
        case VtlParser.SCALAR:
        case VtlParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 998;
            this.scalarType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InputParameterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_inputParameterType;
    return this;
}

InputParameterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputParameterTypeContext.prototype.constructor = InputParameterTypeContext;

InputParameterTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

InputParameterTypeContext.prototype.datasetType = function() {
    return this.getTypedRuleContext(DatasetTypeContext,0);
};

InputParameterTypeContext.prototype.scalarSetType = function() {
    return this.getTypedRuleContext(ScalarSetTypeContext,0);
};

InputParameterTypeContext.prototype.rulesetType = function() {
    return this.getTypedRuleContext(RulesetTypeContext,0);
};

InputParameterTypeContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

InputParameterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInputParameterType(this);
	}
};

InputParameterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInputParameterType(this);
	}
};

InputParameterTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitInputParameterType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.InputParameterTypeContext = InputParameterTypeContext;

VtlParser.prototype.inputParameterType = function() {

    var localctx = new InputParameterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, VtlParser.RULE_inputParameterType);
    try {
        this.state = 1006;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.BOOLEAN:
        case VtlParser.DATE:
        case VtlParser.TIME_PERIOD:
        case VtlParser.NUMBER:
        case VtlParser.STRING:
        case VtlParser.TIME:
        case VtlParser.INTEGER:
        case VtlParser.DURATION:
        case VtlParser.SCALAR:
        case VtlParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1001;
            this.scalarType();
            break;
        case VtlParser.DATASET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1002;
            this.datasetType();
            break;
        case VtlParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 1003;
            this.scalarSetType();
            break;
        case VtlParser.DATAPOINT:
        case VtlParser.HIERARCHICAL:
        case VtlParser.RULESET:
        case VtlParser.DATAPOINT_ON_VD:
        case VtlParser.DATAPOINT_ON_VAR:
        case VtlParser.HIERARCHICAL_ON_VD:
        case VtlParser.HIERARCHICAL_ON_VAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 1004;
            this.rulesetType();
            break;
        case VtlParser.DIMENSION:
        case VtlParser.MEASURE:
        case VtlParser.ATTRIBUTE:
        case VtlParser.VIRAL:
        case VtlParser.COMPONENT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1005;
            this.componentType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulesetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_rulesetType;
    return this;
}

RulesetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetTypeContext.prototype.constructor = RulesetTypeContext;

RulesetTypeContext.prototype.RULESET = function() {
    return this.getToken(VtlParser.RULESET, 0);
};

RulesetTypeContext.prototype.dpRuleset = function() {
    return this.getTypedRuleContext(DpRulesetContext,0);
};

RulesetTypeContext.prototype.hrRuleset = function() {
    return this.getTypedRuleContext(HrRulesetContext,0);
};

RulesetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRulesetType(this);
	}
};

RulesetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRulesetType(this);
	}
};

RulesetTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRulesetType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RulesetTypeContext = RulesetTypeContext;

VtlParser.prototype.rulesetType = function() {

    var localctx = new RulesetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, VtlParser.RULE_rulesetType);
    try {
        this.state = 1011;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.RULESET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1008;
            this.match(VtlParser.RULESET);
            break;
        case VtlParser.DATAPOINT:
        case VtlParser.DATAPOINT_ON_VD:
        case VtlParser.DATAPOINT_ON_VAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1009;
            this.dpRuleset();
            break;
        case VtlParser.HIERARCHICAL:
        case VtlParser.HIERARCHICAL_ON_VD:
        case VtlParser.HIERARCHICAL_ON_VAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1010;
            this.hrRuleset();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_scalarType;
    return this;
}

ScalarTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarTypeContext.prototype.constructor = ScalarTypeContext;

ScalarTypeContext.prototype.basicScalarType = function() {
    return this.getTypedRuleContext(BasicScalarTypeContext,0);
};

ScalarTypeContext.prototype.valueDomainName = function() {
    return this.getTypedRuleContext(ValueDomainNameContext,0);
};

ScalarTypeContext.prototype.scalarTypeConstraint = function() {
    return this.getTypedRuleContext(ScalarTypeConstraintContext,0);
};

ScalarTypeContext.prototype.NULL_CONSTANT = function() {
    return this.getToken(VtlParser.NULL_CONSTANT, 0);
};

ScalarTypeContext.prototype.NOT = function() {
    return this.getToken(VtlParser.NOT, 0);
};

ScalarTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterScalarType(this);
	}
};

ScalarTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitScalarType(this);
	}
};

ScalarTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitScalarType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ScalarTypeContext = ScalarTypeContext;

VtlParser.prototype.scalarType = function() {

    var localctx = new ScalarTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, VtlParser.RULE_scalarType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1015;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.BOOLEAN:
        case VtlParser.DATE:
        case VtlParser.TIME_PERIOD:
        case VtlParser.NUMBER:
        case VtlParser.STRING:
        case VtlParser.TIME:
        case VtlParser.INTEGER:
        case VtlParser.DURATION:
        case VtlParser.SCALAR:
            this.state = 1013;
            this.basicScalarType();
            break;
        case VtlParser.IDENTIFIER:
            this.state = 1014;
            this.valueDomainName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.QLPAREN || _la===VtlParser.GLPAREN) {
            this.state = 1017;
            this.scalarTypeConstraint();
        }

        this.state = 1024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.NOT || _la===VtlParser.NULL_CONSTANT) {
            this.state = 1021;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.NOT) {
                this.state = 1020;
                this.match(VtlParser.NOT);
            }

            this.state = 1023;
            this.match(VtlParser.NULL_CONSTANT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_componentType;
    return this;
}

ComponentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeContext.prototype.constructor = ComponentTypeContext;

ComponentTypeContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

ComponentTypeContext.prototype.LT = function() {
    return this.getToken(VtlParser.LT, 0);
};

ComponentTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

ComponentTypeContext.prototype.MT = function() {
    return this.getToken(VtlParser.MT, 0);
};

ComponentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentType(this);
	}
};

ComponentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentType(this);
	}
};

ComponentTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitComponentType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ComponentTypeContext = ComponentTypeContext;

VtlParser.prototype.componentType = function() {

    var localctx = new ComponentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, VtlParser.RULE_componentType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1026;
        this.componentRole();
        this.state = 1031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.LT) {
            this.state = 1027;
            this.match(VtlParser.LT);
            this.state = 1028;
            this.scalarType();
            this.state = 1029;
            this.match(VtlParser.MT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DatasetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_datasetType;
    return this;
}

DatasetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetTypeContext.prototype.constructor = DatasetTypeContext;

DatasetTypeContext.prototype.DATASET = function() {
    return this.getToken(VtlParser.DATASET, 0);
};

DatasetTypeContext.prototype.GLPAREN = function() {
    return this.getToken(VtlParser.GLPAREN, 0);
};

DatasetTypeContext.prototype.compConstraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CompConstraintContext);
    } else {
        return this.getTypedRuleContext(CompConstraintContext,i);
    }
};

DatasetTypeContext.prototype.GRPAREN = function() {
    return this.getToken(VtlParser.GRPAREN, 0);
};

DatasetTypeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


DatasetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDatasetType(this);
	}
};

DatasetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDatasetType(this);
	}
};

DatasetTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDatasetType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.DatasetTypeContext = DatasetTypeContext;

VtlParser.prototype.datasetType = function() {

    var localctx = new DatasetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, VtlParser.RULE_datasetType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1033;
        this.match(VtlParser.DATASET);
        this.state = 1045;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.GLPAREN) {
            this.state = 1034;
            this.match(VtlParser.GLPAREN);
            this.state = 1035;
            this.compConstraint();
            this.state = 1040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.COMMA) {
                this.state = 1036;
                this.match(VtlParser.COMMA);
                this.state = 1037;
                this.compConstraint();
                this.state = 1042;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1043;
            this.match(VtlParser.GRPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarSetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_scalarSetType;
    return this;
}

ScalarSetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarSetTypeContext.prototype.constructor = ScalarSetTypeContext;

ScalarSetTypeContext.prototype.SET = function() {
    return this.getToken(VtlParser.SET, 0);
};

ScalarSetTypeContext.prototype.LT = function() {
    return this.getToken(VtlParser.LT, 0);
};

ScalarSetTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

ScalarSetTypeContext.prototype.MT = function() {
    return this.getToken(VtlParser.MT, 0);
};

ScalarSetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterScalarSetType(this);
	}
};

ScalarSetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitScalarSetType(this);
	}
};

ScalarSetTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitScalarSetType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ScalarSetTypeContext = ScalarSetTypeContext;

VtlParser.prototype.scalarSetType = function() {

    var localctx = new ScalarSetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, VtlParser.RULE_scalarSetType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.match(VtlParser.SET);
        this.state = 1052;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.LT) {
            this.state = 1048;
            this.match(VtlParser.LT);
            this.state = 1049;
            this.scalarType();
            this.state = 1050;
            this.match(VtlParser.MT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DpRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_dpRuleset;
    return this;
}

DpRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DpRulesetContext.prototype.constructor = DpRulesetContext;


 
DpRulesetContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DataPointVdContext(parser, ctx) {
	DpRulesetContext.call(this, parser);
    DpRulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DataPointVdContext.prototype = Object.create(DpRulesetContext.prototype);
DataPointVdContext.prototype.constructor = DataPointVdContext;

VtlParser.DataPointVdContext = DataPointVdContext;

DataPointVdContext.prototype.DATAPOINT_ON_VD = function() {
    return this.getToken(VtlParser.DATAPOINT_ON_VD, 0);
};

DataPointVdContext.prototype.GLPAREN = function() {
    return this.getToken(VtlParser.GLPAREN, 0);
};

DataPointVdContext.prototype.valueDomainName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueDomainNameContext);
    } else {
        return this.getTypedRuleContext(ValueDomainNameContext,i);
    }
};

DataPointVdContext.prototype.GRPAREN = function() {
    return this.getToken(VtlParser.GRPAREN, 0);
};

DataPointVdContext.prototype.MUL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.MUL);
    } else {
        return this.getToken(VtlParser.MUL, i);
    }
};

DataPointVdContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDataPointVd(this);
	}
};

DataPointVdContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDataPointVd(this);
	}
};

DataPointVdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDataPointVd(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DataPointVarContext(parser, ctx) {
	DpRulesetContext.call(this, parser);
    DpRulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DataPointVarContext.prototype = Object.create(DpRulesetContext.prototype);
DataPointVarContext.prototype.constructor = DataPointVarContext;

VtlParser.DataPointVarContext = DataPointVarContext;

DataPointVarContext.prototype.DATAPOINT_ON_VAR = function() {
    return this.getToken(VtlParser.DATAPOINT_ON_VAR, 0);
};

DataPointVarContext.prototype.GLPAREN = function() {
    return this.getToken(VtlParser.GLPAREN, 0);
};

DataPointVarContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

DataPointVarContext.prototype.GRPAREN = function() {
    return this.getToken(VtlParser.GRPAREN, 0);
};

DataPointVarContext.prototype.MUL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.MUL);
    } else {
        return this.getToken(VtlParser.MUL, i);
    }
};

DataPointVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDataPointVar(this);
	}
};

DataPointVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDataPointVar(this);
	}
};

DataPointVarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDataPointVar(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DataPointContext(parser, ctx) {
	DpRulesetContext.call(this, parser);
    DpRulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DataPointContext.prototype = Object.create(DpRulesetContext.prototype);
DataPointContext.prototype.constructor = DataPointContext;

VtlParser.DataPointContext = DataPointContext;

DataPointContext.prototype.DATAPOINT = function() {
    return this.getToken(VtlParser.DATAPOINT, 0);
};
DataPointContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDataPoint(this);
	}
};

DataPointContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDataPoint(this);
	}
};

DataPointContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitDataPoint(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.DpRulesetContext = DpRulesetContext;

VtlParser.prototype.dpRuleset = function() {

    var localctx = new DpRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, VtlParser.RULE_dpRuleset);
    var _la = 0; // Token type
    try {
        this.state = 1083;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.DATAPOINT:
            localctx = new DataPointContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1054;
            this.match(VtlParser.DATAPOINT);
            break;
        case VtlParser.DATAPOINT_ON_VD:
            localctx = new DataPointVdContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1055;
            this.match(VtlParser.DATAPOINT_ON_VD);
            this.state = 1067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.GLPAREN) {
                this.state = 1056;
                this.match(VtlParser.GLPAREN);
                this.state = 1057;
                this.valueDomainName();
                this.state = 1062;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===VtlParser.MUL) {
                    this.state = 1058;
                    this.match(VtlParser.MUL);
                    this.state = 1059;
                    this.valueDomainName();
                    this.state = 1064;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1065;
                this.match(VtlParser.GRPAREN);
            }

            break;
        case VtlParser.DATAPOINT_ON_VAR:
            localctx = new DataPointVarContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1069;
            this.match(VtlParser.DATAPOINT_ON_VAR);
            this.state = 1081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.GLPAREN) {
                this.state = 1070;
                this.match(VtlParser.GLPAREN);
                this.state = 1071;
                this.varID();
                this.state = 1076;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===VtlParser.MUL) {
                    this.state = 1072;
                    this.match(VtlParser.MUL);
                    this.state = 1073;
                    this.varID();
                    this.state = 1078;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1079;
                this.match(VtlParser.GRPAREN);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HrRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_hrRuleset;
    return this;
}

HrRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HrRulesetContext.prototype.constructor = HrRulesetContext;


 
HrRulesetContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function HrRulesetVdTypeContext(parser, ctx) {
	HrRulesetContext.call(this, parser);
    this.vdName = null; // Token;
    HrRulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HrRulesetVdTypeContext.prototype = Object.create(HrRulesetContext.prototype);
HrRulesetVdTypeContext.prototype.constructor = HrRulesetVdTypeContext;

VtlParser.HrRulesetVdTypeContext = HrRulesetVdTypeContext;

HrRulesetVdTypeContext.prototype.HIERARCHICAL_ON_VD = function() {
    return this.getToken(VtlParser.HIERARCHICAL_ON_VD, 0);
};

HrRulesetVdTypeContext.prototype.GLPAREN = function() {
    return this.getToken(VtlParser.GLPAREN, 0);
};

HrRulesetVdTypeContext.prototype.GRPAREN = function() {
    return this.getToken(VtlParser.GRPAREN, 0);
};

HrRulesetVdTypeContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

HrRulesetVdTypeContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

HrRulesetVdTypeContext.prototype.valueDomainName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueDomainNameContext);
    } else {
        return this.getTypedRuleContext(ValueDomainNameContext,i);
    }
};

HrRulesetVdTypeContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

HrRulesetVdTypeContext.prototype.MUL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.MUL);
    } else {
        return this.getToken(VtlParser.MUL, i);
    }
};

HrRulesetVdTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHrRulesetVdType(this);
	}
};

HrRulesetVdTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHrRulesetVdType(this);
	}
};

HrRulesetVdTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitHrRulesetVdType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HrRulesetVarTypeContext(parser, ctx) {
	HrRulesetContext.call(this, parser);
    this.varName = null; // VarIDContext;
    HrRulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HrRulesetVarTypeContext.prototype = Object.create(HrRulesetContext.prototype);
HrRulesetVarTypeContext.prototype.constructor = HrRulesetVarTypeContext;

VtlParser.HrRulesetVarTypeContext = HrRulesetVarTypeContext;

HrRulesetVarTypeContext.prototype.HIERARCHICAL_ON_VAR = function() {
    return this.getToken(VtlParser.HIERARCHICAL_ON_VAR, 0);
};

HrRulesetVarTypeContext.prototype.GLPAREN = function() {
    return this.getToken(VtlParser.GLPAREN, 0);
};

HrRulesetVarTypeContext.prototype.GRPAREN = function() {
    return this.getToken(VtlParser.GRPAREN, 0);
};

HrRulesetVarTypeContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

HrRulesetVarTypeContext.prototype.LPAREN = function() {
    return this.getToken(VtlParser.LPAREN, 0);
};

HrRulesetVarTypeContext.prototype.RPAREN = function() {
    return this.getToken(VtlParser.RPAREN, 0);
};

HrRulesetVarTypeContext.prototype.MUL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.MUL);
    } else {
        return this.getToken(VtlParser.MUL, i);
    }
};

HrRulesetVarTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHrRulesetVarType(this);
	}
};

HrRulesetVarTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHrRulesetVarType(this);
	}
};

HrRulesetVarTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitHrRulesetVarType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HrRulesetTypeContext(parser, ctx) {
	HrRulesetContext.call(this, parser);
    HrRulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HrRulesetTypeContext.prototype = Object.create(HrRulesetContext.prototype);
HrRulesetTypeContext.prototype.constructor = HrRulesetTypeContext;

VtlParser.HrRulesetTypeContext = HrRulesetTypeContext;

HrRulesetTypeContext.prototype.HIERARCHICAL = function() {
    return this.getToken(VtlParser.HIERARCHICAL, 0);
};
HrRulesetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHrRulesetType(this);
	}
};

HrRulesetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHrRulesetType(this);
	}
};

HrRulesetTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitHrRulesetType(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.HrRulesetContext = HrRulesetContext;

VtlParser.prototype.hrRuleset = function() {

    var localctx = new HrRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, VtlParser.RULE_hrRuleset);
    var _la = 0; // Token type
    try {
        this.state = 1125;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.HIERARCHICAL:
            localctx = new HrRulesetTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1085;
            this.match(VtlParser.HIERARCHICAL);
            break;
        case VtlParser.HIERARCHICAL_ON_VD:
            localctx = new HrRulesetVdTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1086;
            this.match(VtlParser.HIERARCHICAL_ON_VD);
            this.state = 1103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.GLPAREN) {
                this.state = 1087;
                this.match(VtlParser.GLPAREN);
                this.state = 1088;
                localctx.vdName = this.match(VtlParser.IDENTIFIER);
                this.state = 1100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===VtlParser.LPAREN) {
                    this.state = 1089;
                    this.match(VtlParser.LPAREN);
                    this.state = 1090;
                    this.valueDomainName();
                    this.state = 1095;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===VtlParser.MUL) {
                        this.state = 1091;
                        this.match(VtlParser.MUL);
                        this.state = 1092;
                        this.valueDomainName();
                        this.state = 1097;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1098;
                    this.match(VtlParser.RPAREN);
                }

                this.state = 1102;
                this.match(VtlParser.GRPAREN);
            }

            break;
        case VtlParser.HIERARCHICAL_ON_VAR:
            localctx = new HrRulesetVarTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1105;
            this.match(VtlParser.HIERARCHICAL_ON_VAR);
            this.state = 1123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.GLPAREN) {
                this.state = 1106;
                this.match(VtlParser.GLPAREN);
                this.state = 1107;
                localctx.varName = this.varID();
                this.state = 1119;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===VtlParser.LPAREN) {
                    this.state = 1108;
                    this.match(VtlParser.LPAREN);
                    this.state = 1109;
                    this.varID();
                    this.state = 1114;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===VtlParser.MUL) {
                        this.state = 1110;
                        this.match(VtlParser.MUL);
                        this.state = 1111;
                        this.varID();
                        this.state = 1116;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1117;
                    this.match(VtlParser.RPAREN);
                }

                this.state = 1121;
                this.match(VtlParser.GRPAREN);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueDomainNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_valueDomainName;
    return this;
}

ValueDomainNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueDomainNameContext.prototype.constructor = ValueDomainNameContext;

ValueDomainNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValueDomainNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValueDomainName(this);
	}
};

ValueDomainNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValueDomainName(this);
	}
};

ValueDomainNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValueDomainName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ValueDomainNameContext = ValueDomainNameContext;

VtlParser.prototype.valueDomainName = function() {

    var localctx = new ValueDomainNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, VtlParser.RULE_valueDomainName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1127;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulesetIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_rulesetID;
    return this;
}

RulesetIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetIDContext.prototype.constructor = RulesetIDContext;

RulesetIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RulesetIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRulesetID(this);
	}
};

RulesetIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRulesetID(this);
	}
};

RulesetIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRulesetID(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RulesetIDContext = RulesetIDContext;

VtlParser.prototype.rulesetID = function() {

    var localctx = new RulesetIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, VtlParser.RULE_rulesetID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1129;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulesetSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_rulesetSignature;
    return this;
}

RulesetSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetSignatureContext.prototype.constructor = RulesetSignatureContext;

RulesetSignatureContext.prototype.signature = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignatureContext);
    } else {
        return this.getTypedRuleContext(SignatureContext,i);
    }
};

RulesetSignatureContext.prototype.VALUE_DOMAIN = function() {
    return this.getToken(VtlParser.VALUE_DOMAIN, 0);
};

RulesetSignatureContext.prototype.VARIABLE = function() {
    return this.getToken(VtlParser.VARIABLE, 0);
};

RulesetSignatureContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


RulesetSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRulesetSignature(this);
	}
};

RulesetSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRulesetSignature(this);
	}
};

RulesetSignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRulesetSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RulesetSignatureContext = RulesetSignatureContext;

VtlParser.prototype.rulesetSignature = function() {

    var localctx = new RulesetSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, VtlParser.RULE_rulesetSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1131;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.VALUE_DOMAIN || _la===VtlParser.VARIABLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1132;
        this.signature();
        this.state = 1137;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 1133;
            this.match(VtlParser.COMMA);
            this.state = 1134;
            this.signature();
            this.state = 1139;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_signature;
    return this;
}

SignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignatureContext.prototype.constructor = SignatureContext;

SignatureContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

SignatureContext.prototype.AS = function() {
    return this.getToken(VtlParser.AS, 0);
};

SignatureContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

SignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSignature(this);
	}
};

SignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSignature(this);
	}
};

SignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.SignatureContext = SignatureContext;

VtlParser.prototype.signature = function() {

    var localctx = new SignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, VtlParser.RULE_signature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1140;
        this.varID();
        this.state = 1143;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.AS) {
            this.state = 1141;
            this.match(VtlParser.AS);
            this.state = 1142;
            this.alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleClauseDatapointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleClauseDatapoint;
    return this;
}

RuleClauseDatapointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleClauseDatapointContext.prototype.constructor = RuleClauseDatapointContext;

RuleClauseDatapointContext.prototype.ruleItemDatapoint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleItemDatapointContext);
    } else {
        return this.getTypedRuleContext(RuleItemDatapointContext,i);
    }
};

RuleClauseDatapointContext.prototype.EOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.EOL);
    } else {
        return this.getToken(VtlParser.EOL, i);
    }
};


RuleClauseDatapointContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleClauseDatapoint(this);
	}
};

RuleClauseDatapointContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleClauseDatapoint(this);
	}
};

RuleClauseDatapointContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRuleClauseDatapoint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RuleClauseDatapointContext = RuleClauseDatapointContext;

VtlParser.prototype.ruleClauseDatapoint = function() {

    var localctx = new RuleClauseDatapointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, VtlParser.RULE_ruleClauseDatapoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1145;
        this.ruleItemDatapoint();
        this.state = 1150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.EOL) {
            this.state = 1146;
            this.match(VtlParser.EOL);
            this.state = 1147;
            this.ruleItemDatapoint();
            this.state = 1152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleItemDatapointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleItemDatapoint;
    this.ruleName = null; // Token
    this.antecedentContiditon = null; // ExprContext
    this.consequentCondition = null; // ExprContext
    return this;
}

RuleItemDatapointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleItemDatapointContext.prototype.constructor = RuleItemDatapointContext;

RuleItemDatapointContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

RuleItemDatapointContext.prototype.COLON = function() {
    return this.getToken(VtlParser.COLON, 0);
};

RuleItemDatapointContext.prototype.WHEN = function() {
    return this.getToken(VtlParser.WHEN, 0);
};

RuleItemDatapointContext.prototype.THEN = function() {
    return this.getToken(VtlParser.THEN, 0);
};

RuleItemDatapointContext.prototype.erCode = function() {
    return this.getTypedRuleContext(ErCodeContext,0);
};

RuleItemDatapointContext.prototype.erLevel = function() {
    return this.getTypedRuleContext(ErLevelContext,0);
};

RuleItemDatapointContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RuleItemDatapointContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleItemDatapoint(this);
	}
};

RuleItemDatapointContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleItemDatapoint(this);
	}
};

RuleItemDatapointContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRuleItemDatapoint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RuleItemDatapointContext = RuleItemDatapointContext;

VtlParser.prototype.ruleItemDatapoint = function() {

    var localctx = new RuleItemDatapointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, VtlParser.RULE_ruleItemDatapoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1155;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        if(la_===1) {
            this.state = 1153;
            localctx.ruleName = this.match(VtlParser.IDENTIFIER);
            this.state = 1154;
            this.match(VtlParser.COLON);

        }
        this.state = 1161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.WHEN) {
            this.state = 1157;
            this.match(VtlParser.WHEN);
            this.state = 1158;
            localctx.antecedentContiditon = this.expr(0);
            this.state = 1159;
            this.match(VtlParser.THEN);
        }

        this.state = 1163;
        localctx.consequentCondition = this.expr(0);
        this.state = 1165;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORCODE) {
            this.state = 1164;
            this.erCode();
        }

        this.state = 1168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORLEVEL) {
            this.state = 1167;
            this.erLevel();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleClauseHierarchicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleClauseHierarchical;
    return this;
}

RuleClauseHierarchicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleClauseHierarchicalContext.prototype.constructor = RuleClauseHierarchicalContext;

RuleClauseHierarchicalContext.prototype.ruleItemHierarchical = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleItemHierarchicalContext);
    } else {
        return this.getTypedRuleContext(RuleItemHierarchicalContext,i);
    }
};

RuleClauseHierarchicalContext.prototype.EOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.EOL);
    } else {
        return this.getToken(VtlParser.EOL, i);
    }
};


RuleClauseHierarchicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleClauseHierarchical(this);
	}
};

RuleClauseHierarchicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleClauseHierarchical(this);
	}
};

RuleClauseHierarchicalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRuleClauseHierarchical(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RuleClauseHierarchicalContext = RuleClauseHierarchicalContext;

VtlParser.prototype.ruleClauseHierarchical = function() {

    var localctx = new RuleClauseHierarchicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, VtlParser.RULE_ruleClauseHierarchical);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1170;
        this.ruleItemHierarchical();
        this.state = 1175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.EOL) {
            this.state = 1171;
            this.match(VtlParser.EOL);
            this.state = 1172;
            this.ruleItemHierarchical();
            this.state = 1177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleItemHierarchicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleItemHierarchical;
    this.ruleName = null; // Token
    return this;
}

RuleItemHierarchicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleItemHierarchicalContext.prototype.constructor = RuleItemHierarchicalContext;

RuleItemHierarchicalContext.prototype.codeItemRelation = function() {
    return this.getTypedRuleContext(CodeItemRelationContext,0);
};

RuleItemHierarchicalContext.prototype.COLON = function() {
    return this.getToken(VtlParser.COLON, 0);
};

RuleItemHierarchicalContext.prototype.erCode = function() {
    return this.getTypedRuleContext(ErCodeContext,0);
};

RuleItemHierarchicalContext.prototype.erLevel = function() {
    return this.getTypedRuleContext(ErLevelContext,0);
};

RuleItemHierarchicalContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RuleItemHierarchicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleItemHierarchical(this);
	}
};

RuleItemHierarchicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleItemHierarchical(this);
	}
};

RuleItemHierarchicalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRuleItemHierarchical(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RuleItemHierarchicalContext = RuleItemHierarchicalContext;

VtlParser.prototype.ruleItemHierarchical = function() {

    var localctx = new RuleItemHierarchicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, VtlParser.RULE_ruleItemHierarchical);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1180;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        if(la_===1) {
            this.state = 1178;
            localctx.ruleName = this.match(VtlParser.IDENTIFIER);
            this.state = 1179;
            this.match(VtlParser.COLON);

        }
        this.state = 1182;
        this.codeItemRelation();
        this.state = 1184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORCODE) {
            this.state = 1183;
            this.erCode();
        }

        this.state = 1187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORLEVEL) {
            this.state = 1186;
            this.erLevel();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HierRuleSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_hierRuleSignature;
    return this;
}

HierRuleSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HierRuleSignatureContext.prototype.constructor = HierRuleSignatureContext;

HierRuleSignatureContext.prototype.RULE = function() {
    return this.getToken(VtlParser.RULE, 0);
};

HierRuleSignatureContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

HierRuleSignatureContext.prototype.VALUE_DOMAIN = function() {
    return this.getToken(VtlParser.VALUE_DOMAIN, 0);
};

HierRuleSignatureContext.prototype.VARIABLE = function() {
    return this.getToken(VtlParser.VARIABLE, 0);
};

HierRuleSignatureContext.prototype.CONDITION = function() {
    return this.getToken(VtlParser.CONDITION, 0);
};

HierRuleSignatureContext.prototype.valueDomainSignature = function() {
    return this.getTypedRuleContext(ValueDomainSignatureContext,0);
};

HierRuleSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHierRuleSignature(this);
	}
};

HierRuleSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHierRuleSignature(this);
	}
};

HierRuleSignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitHierRuleSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.HierRuleSignatureContext = HierRuleSignatureContext;

VtlParser.prototype.hierRuleSignature = function() {

    var localctx = new HierRuleSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, VtlParser.RULE_hierRuleSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1189;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.VALUE_DOMAIN || _la===VtlParser.VARIABLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CONDITION) {
            this.state = 1190;
            this.match(VtlParser.CONDITION);
            this.state = 1191;
            this.valueDomainSignature();
        }

        this.state = 1194;
        this.match(VtlParser.RULE);
        this.state = 1195;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueDomainSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_valueDomainSignature;
    return this;
}

ValueDomainSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueDomainSignatureContext.prototype.constructor = ValueDomainSignatureContext;

ValueDomainSignatureContext.prototype.signature = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignatureContext);
    } else {
        return this.getTypedRuleContext(SignatureContext,i);
    }
};

ValueDomainSignatureContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


ValueDomainSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValueDomainSignature(this);
	}
};

ValueDomainSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValueDomainSignature(this);
	}
};

ValueDomainSignatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValueDomainSignature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ValueDomainSignatureContext = ValueDomainSignatureContext;

VtlParser.prototype.valueDomainSignature = function() {

    var localctx = new ValueDomainSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, VtlParser.RULE_valueDomainSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1197;
        this.signature();
        this.state = 1202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 1198;
            this.match(VtlParser.COMMA);
            this.state = 1199;
            this.signature();
            this.state = 1204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeItemRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_codeItemRelation;
    this.codetemRef = null; // ValueDomainValueContext
    return this;
}

CodeItemRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeItemRelationContext.prototype.constructor = CodeItemRelationContext;

CodeItemRelationContext.prototype.codeItemRelationClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodeItemRelationClauseContext);
    } else {
        return this.getTypedRuleContext(CodeItemRelationClauseContext,i);
    }
};

CodeItemRelationContext.prototype.valueDomainValue = function() {
    return this.getTypedRuleContext(ValueDomainValueContext,0);
};

CodeItemRelationContext.prototype.WHEN = function() {
    return this.getToken(VtlParser.WHEN, 0);
};

CodeItemRelationContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CodeItemRelationContext.prototype.THEN = function() {
    return this.getToken(VtlParser.THEN, 0);
};

CodeItemRelationContext.prototype.comparisonOperand = function() {
    return this.getTypedRuleContext(ComparisonOperandContext,0);
};

CodeItemRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCodeItemRelation(this);
	}
};

CodeItemRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCodeItemRelation(this);
	}
};

CodeItemRelationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCodeItemRelation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.CodeItemRelationContext = CodeItemRelationContext;

VtlParser.prototype.codeItemRelation = function() {

    var localctx = new CodeItemRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, VtlParser.RULE_codeItemRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.WHEN) {
            this.state = 1205;
            this.match(VtlParser.WHEN);
            this.state = 1206;
            this.expr(0);
            this.state = 1207;
            this.match(VtlParser.THEN);
        }

        this.state = 1211;
        localctx.codetemRef = this.valueDomainValue();
        this.state = 1213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.EQ) | (1 << VtlParser.LT) | (1 << VtlParser.MT) | (1 << VtlParser.ME) | (1 << VtlParser.NEQ) | (1 << VtlParser.LE))) !== 0)) {
            this.state = 1212;
            this.comparisonOperand();
        }

        this.state = 1215;
        this.codeItemRelationClause();
        this.state = 1219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.PLUS || _la===VtlParser.MINUS || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (VtlParser.INTEGER_CONSTANT - 231)) | (1 << (VtlParser.NUMBER_CONSTANT - 231)) | (1 << (VtlParser.IDENTIFIER - 231)))) !== 0)) {
            this.state = 1216;
            this.codeItemRelationClause();
            this.state = 1221;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeItemRelationClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_codeItemRelationClause;
    this.opAdd = null; // Token
    this.rightCodeItem = null; // ValueDomainValueContext
    this.rightCondition = null; // ExprContext
    return this;
}

CodeItemRelationClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeItemRelationClauseContext.prototype.constructor = CodeItemRelationClauseContext;

CodeItemRelationClauseContext.prototype.valueDomainValue = function() {
    return this.getTypedRuleContext(ValueDomainValueContext,0);
};

CodeItemRelationClauseContext.prototype.QLPAREN = function() {
    return this.getToken(VtlParser.QLPAREN, 0);
};

CodeItemRelationClauseContext.prototype.QRPAREN = function() {
    return this.getToken(VtlParser.QRPAREN, 0);
};

CodeItemRelationClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CodeItemRelationClauseContext.prototype.PLUS = function() {
    return this.getToken(VtlParser.PLUS, 0);
};

CodeItemRelationClauseContext.prototype.MINUS = function() {
    return this.getToken(VtlParser.MINUS, 0);
};

CodeItemRelationClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCodeItemRelationClause(this);
	}
};

CodeItemRelationClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCodeItemRelationClause(this);
	}
};

CodeItemRelationClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCodeItemRelationClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.CodeItemRelationClauseContext = CodeItemRelationClauseContext;

VtlParser.prototype.codeItemRelationClause = function() {

    var localctx = new CodeItemRelationClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, VtlParser.RULE_codeItemRelationClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1223;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.PLUS || _la===VtlParser.MINUS) {
            this.state = 1222;
            localctx.opAdd = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.PLUS || _la===VtlParser.MINUS)) {
                localctx.opAdd = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1225;
        localctx.rightCodeItem = this.valueDomainValue();
        this.state = 1230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.QLPAREN) {
            this.state = 1226;
            this.match(VtlParser.QLPAREN);
            this.state = 1227;
            localctx.rightCondition = this.expr(0);
            this.state = 1228;
            this.match(VtlParser.QRPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueDomainValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_valueDomainValue;
    return this;
}

ValueDomainValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueDomainValueContext.prototype.constructor = ValueDomainValueContext;

ValueDomainValueContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValueDomainValueContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

ValueDomainValueContext.prototype.NUMBER_CONSTANT = function() {
    return this.getToken(VtlParser.NUMBER_CONSTANT, 0);
};

ValueDomainValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValueDomainValue(this);
	}
};

ValueDomainValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValueDomainValue(this);
	}
};

ValueDomainValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValueDomainValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ValueDomainValueContext = ValueDomainValueContext;

VtlParser.prototype.valueDomainValue = function() {

    var localctx = new ValueDomainValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, VtlParser.RULE_valueDomainValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        _la = this._input.LA(1);
        if(!(((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (VtlParser.INTEGER_CONSTANT - 231)) | (1 << (VtlParser.NUMBER_CONSTANT - 231)) | (1 << (VtlParser.IDENTIFIER - 231)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarTypeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_scalarTypeConstraint;
    return this;
}

ScalarTypeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarTypeConstraintContext.prototype.constructor = ScalarTypeConstraintContext;


 
ScalarTypeConstraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RangeConstraintContext(parser, ctx) {
	ScalarTypeConstraintContext.call(this, parser);
    ScalarTypeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeConstraintContext.prototype = Object.create(ScalarTypeConstraintContext.prototype);
RangeConstraintContext.prototype.constructor = RangeConstraintContext;

VtlParser.RangeConstraintContext = RangeConstraintContext;

RangeConstraintContext.prototype.GLPAREN = function() {
    return this.getToken(VtlParser.GLPAREN, 0);
};

RangeConstraintContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

RangeConstraintContext.prototype.GRPAREN = function() {
    return this.getToken(VtlParser.GRPAREN, 0);
};

RangeConstraintContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};

RangeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRangeConstraint(this);
	}
};

RangeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRangeConstraint(this);
	}
};

RangeConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRangeConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConditionConstraintContext(parser, ctx) {
	ScalarTypeConstraintContext.call(this, parser);
    ScalarTypeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionConstraintContext.prototype = Object.create(ScalarTypeConstraintContext.prototype);
ConditionConstraintContext.prototype.constructor = ConditionConstraintContext;

VtlParser.ConditionConstraintContext = ConditionConstraintContext;

ConditionConstraintContext.prototype.QLPAREN = function() {
    return this.getToken(VtlParser.QLPAREN, 0);
};

ConditionConstraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ConditionConstraintContext.prototype.QRPAREN = function() {
    return this.getToken(VtlParser.QRPAREN, 0);
};
ConditionConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterConditionConstraint(this);
	}
};

ConditionConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitConditionConstraint(this);
	}
};

ConditionConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitConditionConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};



VtlParser.ScalarTypeConstraintContext = ScalarTypeConstraintContext;

VtlParser.prototype.scalarTypeConstraint = function() {

    var localctx = new ScalarTypeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, VtlParser.RULE_scalarTypeConstraint);
    var _la = 0; // Token type
    try {
        this.state = 1249;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.QLPAREN:
            localctx = new ConditionConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1234;
            this.match(VtlParser.QLPAREN);
            this.state = 1235;
            this.expr(0);
            this.state = 1236;
            this.match(VtlParser.QRPAREN);
            break;
        case VtlParser.GLPAREN:
            localctx = new RangeConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1238;
            this.match(VtlParser.GLPAREN);
            this.state = 1239;
            this.constant();
            this.state = 1244;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.COMMA) {
                this.state = 1240;
                this.match(VtlParser.COMMA);
                this.state = 1241;
                this.constant();
                this.state = 1246;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1247;
            this.match(VtlParser.GRPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_compConstraint;
    return this;
}

CompConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompConstraintContext.prototype.constructor = CompConstraintContext;

CompConstraintContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

CompConstraintContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

CompConstraintContext.prototype.multModifier = function() {
    return this.getTypedRuleContext(MultModifierContext,0);
};

CompConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCompConstraint(this);
	}
};

CompConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCompConstraint(this);
	}
};

CompConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitCompConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.CompConstraintContext = CompConstraintContext;

VtlParser.prototype.compConstraint = function() {

    var localctx = new CompConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, VtlParser.RULE_compConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1251;
        this.componentType();
        this.state = 1254;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.IDENTIFIER:
            this.state = 1252;
            this.componentID();
            break;
        case VtlParser.OPTIONAL:
            this.state = 1253;
            this.multModifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_multModifier;
    return this;
}

MultModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultModifierContext.prototype.constructor = MultModifierContext;

MultModifierContext.prototype.OPTIONAL = function() {
    return this.getToken(VtlParser.OPTIONAL, 0);
};

MultModifierContext.prototype.PLUS = function() {
    return this.getToken(VtlParser.PLUS, 0);
};

MultModifierContext.prototype.MUL = function() {
    return this.getToken(VtlParser.MUL, 0);
};

MultModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterMultModifier(this);
	}
};

MultModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitMultModifier(this);
	}
};

MultModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitMultModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.MultModifierContext = MultModifierContext;

VtlParser.prototype.multModifier = function() {

    var localctx = new MultModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, VtlParser.RULE_multModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        this.match(VtlParser.OPTIONAL);
        this.state = 1258;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.PLUS || _la===VtlParser.MUL) {
            this.state = 1257;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.PLUS || _la===VtlParser.MUL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValidationOutputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_validationOutput;
    return this;
}

ValidationOutputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValidationOutputContext.prototype.constructor = ValidationOutputContext;

ValidationOutputContext.prototype.INVALID = function() {
    return this.getToken(VtlParser.INVALID, 0);
};

ValidationOutputContext.prototype.ALL_MEASURES = function() {
    return this.getToken(VtlParser.ALL_MEASURES, 0);
};

ValidationOutputContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

ValidationOutputContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationOutput(this);
	}
};

ValidationOutputContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationOutput(this);
	}
};

ValidationOutputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValidationOutput(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ValidationOutputContext = ValidationOutputContext;

VtlParser.prototype.validationOutput = function() {

    var localctx = new ValidationOutputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, VtlParser.RULE_validationOutput);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1260;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.ALL || _la===VtlParser.INVALID || _la===VtlParser.ALL_MEASURES)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValidationModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_validationMode;
    return this;
}

ValidationModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValidationModeContext.prototype.constructor = ValidationModeContext;

ValidationModeContext.prototype.NON_NULL = function() {
    return this.getToken(VtlParser.NON_NULL, 0);
};

ValidationModeContext.prototype.NON_ZERO = function() {
    return this.getToken(VtlParser.NON_ZERO, 0);
};

ValidationModeContext.prototype.PARTIAL_NULL = function() {
    return this.getToken(VtlParser.PARTIAL_NULL, 0);
};

ValidationModeContext.prototype.PARTIAL_ZERO = function() {
    return this.getToken(VtlParser.PARTIAL_ZERO, 0);
};

ValidationModeContext.prototype.ALWAYS_NULL = function() {
    return this.getToken(VtlParser.ALWAYS_NULL, 0);
};

ValidationModeContext.prototype.ALWAYS_ZERO = function() {
    return this.getToken(VtlParser.ALWAYS_ZERO, 0);
};

ValidationModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationMode(this);
	}
};

ValidationModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationMode(this);
	}
};

ValidationModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValidationMode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ValidationModeContext = ValidationModeContext;

VtlParser.prototype.validationMode = function() {

    var localctx = new ValidationModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, VtlParser.RULE_validationMode);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        _la = this._input.LA(1);
        if(!(((((_la - 215)) & ~0x1f) == 0 && ((1 << (_la - 215)) & ((1 << (VtlParser.NON_NULL - 215)) | (1 << (VtlParser.NON_ZERO - 215)) | (1 << (VtlParser.PARTIAL_NULL - 215)) | (1 << (VtlParser.PARTIAL_ZERO - 215)) | (1 << (VtlParser.ALWAYS_NULL - 215)) | (1 << (VtlParser.ALWAYS_ZERO - 215)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_conditionClause;
    return this;
}

ConditionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionClauseContext.prototype.constructor = ConditionClauseContext;

ConditionClauseContext.prototype.CONDITION = function() {
    return this.getToken(VtlParser.CONDITION, 0);
};

ConditionClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

ConditionClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


ConditionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterConditionClause(this);
	}
};

ConditionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitConditionClause(this);
	}
};

ConditionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitConditionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ConditionClauseContext = ConditionClauseContext;

VtlParser.prototype.conditionClause = function() {

    var localctx = new ConditionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, VtlParser.RULE_conditionClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1264;
        this.match(VtlParser.CONDITION);
        this.state = 1265;
        this.componentID();
        this.state = 1270;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 1266;
            this.match(VtlParser.COMMA);
            this.state = 1267;
            this.componentID();
            this.state = 1272;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InputModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_inputMode;
    return this;
}

InputModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputModeContext.prototype.constructor = InputModeContext;

InputModeContext.prototype.DATASET = function() {
    return this.getToken(VtlParser.DATASET, 0);
};

InputModeContext.prototype.DATASET_PRIORITY = function() {
    return this.getToken(VtlParser.DATASET_PRIORITY, 0);
};

InputModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInputMode(this);
	}
};

InputModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInputMode(this);
	}
};

InputModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitInputMode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.InputModeContext = InputModeContext;

VtlParser.prototype.inputMode = function() {

    var localctx = new InputModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, VtlParser.RULE_inputMode);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1273;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.DATASET || _la===VtlParser.DATASET_PRIORITY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImbalanceExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_imbalanceExpr;
    return this;
}

ImbalanceExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImbalanceExprContext.prototype.constructor = ImbalanceExprContext;

ImbalanceExprContext.prototype.IMBALANCE = function() {
    return this.getToken(VtlParser.IMBALANCE, 0);
};

ImbalanceExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ImbalanceExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterImbalanceExpr(this);
	}
};

ImbalanceExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitImbalanceExpr(this);
	}
};

ImbalanceExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitImbalanceExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ImbalanceExprContext = ImbalanceExprContext;

VtlParser.prototype.imbalanceExpr = function() {

    var localctx = new ImbalanceExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, VtlParser.RULE_imbalanceExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1275;
        this.match(VtlParser.IMBALANCE);
        this.state = 1276;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InputModeHierarchyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_inputModeHierarchy;
    return this;
}

InputModeHierarchyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputModeHierarchyContext.prototype.constructor = InputModeHierarchyContext;

InputModeHierarchyContext.prototype.RULE = function() {
    return this.getToken(VtlParser.RULE, 0);
};

InputModeHierarchyContext.prototype.DATASET = function() {
    return this.getToken(VtlParser.DATASET, 0);
};

InputModeHierarchyContext.prototype.RULE_PRIORITY = function() {
    return this.getToken(VtlParser.RULE_PRIORITY, 0);
};

InputModeHierarchyContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInputModeHierarchy(this);
	}
};

InputModeHierarchyContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInputModeHierarchy(this);
	}
};

InputModeHierarchyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitInputModeHierarchy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.InputModeHierarchyContext = InputModeHierarchyContext;

VtlParser.prototype.inputModeHierarchy = function() {

    var localctx = new InputModeHierarchyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, VtlParser.RULE_inputModeHierarchy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1278;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.DATASET || _la===VtlParser.RULE || _la===VtlParser.RULE_PRIORITY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OutputModeHierarchyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_outputModeHierarchy;
    return this;
}

OutputModeHierarchyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OutputModeHierarchyContext.prototype.constructor = OutputModeHierarchyContext;

OutputModeHierarchyContext.prototype.COMPUTED = function() {
    return this.getToken(VtlParser.COMPUTED, 0);
};

OutputModeHierarchyContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

OutputModeHierarchyContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOutputModeHierarchy(this);
	}
};

OutputModeHierarchyContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOutputModeHierarchy(this);
	}
};

OutputModeHierarchyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOutputModeHierarchy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.OutputModeHierarchyContext = OutputModeHierarchyContext;

VtlParser.prototype.outputModeHierarchy = function() {

    var localctx = new OutputModeHierarchyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, VtlParser.RULE_outputModeHierarchy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1280;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.ALL || _la===VtlParser.COMPUTED)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_alias;
    return this;
}

AliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasContext.prototype.constructor = AliasContext;

AliasContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

AliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAlias(this);
	}
};

AliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAlias(this);
	}
};

AliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.AliasContext = AliasContext;

VtlParser.prototype.alias = function() {

    var localctx = new AliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, VtlParser.RULE_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1282;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_varID;
    return this;
}

VarIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarIDContext.prototype.constructor = VarIDContext;

VarIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

VarIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterVarID(this);
	}
};

VarIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitVarID(this);
	}
};

VarIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitVarID(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.VarIDContext = VarIDContext;

VtlParser.prototype.varID = function() {

    var localctx = new VarIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, VtlParser.RULE_varID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1284;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleComponentIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_simpleComponentId;
    return this;
}

SimpleComponentIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleComponentIdContext.prototype.constructor = SimpleComponentIdContext;

SimpleComponentIdContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

SimpleComponentIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSimpleComponentId(this);
	}
};

SimpleComponentIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSimpleComponentId(this);
	}
};

SimpleComponentIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitSimpleComponentId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.SimpleComponentIdContext = SimpleComponentIdContext;

VtlParser.prototype.simpleComponentId = function() {

    var localctx = new SimpleComponentIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, VtlParser.RULE_simpleComponentId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1286;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_componentID;
    return this;
}

ComponentIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentIDContext.prototype.constructor = ComponentIDContext;

ComponentIDContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


ComponentIDContext.prototype.MEMBERSHIP = function() {
    return this.getToken(VtlParser.MEMBERSHIP, 0);
};

ComponentIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentID(this);
	}
};

ComponentIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentID(this);
	}
};

ComponentIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitComponentID(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ComponentIDContext = ComponentIDContext;

VtlParser.prototype.componentID = function() {

    var localctx = new ComponentIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, VtlParser.RULE_componentID);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1288;
        this.match(VtlParser.IDENTIFIER);
        this.state = 1291;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.MEMBERSHIP) {
            this.state = 1289;
            this.match(VtlParser.MEMBERSHIP);
            this.state = 1290;
            this.match(VtlParser.IDENTIFIER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_lists;
    return this;
}

ListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListsContext.prototype.constructor = ListsContext;

ListsContext.prototype.GLPAREN = function() {
    return this.getToken(VtlParser.GLPAREN, 0);
};

ListsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

ListsContext.prototype.GRPAREN = function() {
    return this.getToken(VtlParser.GRPAREN, 0);
};

ListsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.COMMA);
    } else {
        return this.getToken(VtlParser.COMMA, i);
    }
};


ListsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLists(this);
	}
};

ListsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLists(this);
	}
};

ListsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitLists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ListsContext = ListsContext;

VtlParser.prototype.lists = function() {

    var localctx = new ListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, VtlParser.RULE_lists);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1293;
        this.match(VtlParser.GLPAREN);
        this.state = 1294;
        this.constant();
        this.state = 1299;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.COMMA) {
            this.state = 1295;
            this.match(VtlParser.COMMA);
            this.state = 1296;
            this.constant();
            this.state = 1301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1302;
        this.match(VtlParser.GRPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErCodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_erCode;
    return this;
}

ErCodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErCodeContext.prototype.constructor = ErCodeContext;

ErCodeContext.prototype.ERRORCODE = function() {
    return this.getToken(VtlParser.ERRORCODE, 0);
};

ErCodeContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ErCodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterErCode(this);
	}
};

ErCodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitErCode(this);
	}
};

ErCodeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitErCode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ErCodeContext = ErCodeContext;

VtlParser.prototype.erCode = function() {

    var localctx = new ErCodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, VtlParser.RULE_erCode);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1304;
        this.match(VtlParser.ERRORCODE);
        this.state = 1305;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErLevelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_erLevel;
    return this;
}

ErLevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErLevelContext.prototype.constructor = ErLevelContext;

ErLevelContext.prototype.ERRORLEVEL = function() {
    return this.getToken(VtlParser.ERRORLEVEL, 0);
};

ErLevelContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ErLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterErLevel(this);
	}
};

ErLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitErLevel(this);
	}
};

ErLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitErLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ErLevelContext = ErLevelContext;

VtlParser.prototype.erLevel = function() {

    var localctx = new ErLevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, VtlParser.RULE_erLevel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1307;
        this.match(VtlParser.ERRORLEVEL);
        this.state = 1308;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_comparisonOperand;
    return this;
}

ComparisonOperandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperandContext.prototype.constructor = ComparisonOperandContext;

ComparisonOperandContext.prototype.MT = function() {
    return this.getToken(VtlParser.MT, 0);
};

ComparisonOperandContext.prototype.ME = function() {
    return this.getToken(VtlParser.ME, 0);
};

ComparisonOperandContext.prototype.LE = function() {
    return this.getToken(VtlParser.LE, 0);
};

ComparisonOperandContext.prototype.LT = function() {
    return this.getToken(VtlParser.LT, 0);
};

ComparisonOperandContext.prototype.EQ = function() {
    return this.getToken(VtlParser.EQ, 0);
};

ComparisonOperandContext.prototype.NEQ = function() {
    return this.getToken(VtlParser.NEQ, 0);
};

ComparisonOperandContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComparisonOperand(this);
	}
};

ComparisonOperandContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComparisonOperand(this);
	}
};

ComparisonOperandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitComparisonOperand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ComparisonOperandContext = ComparisonOperandContext;

VtlParser.prototype.comparisonOperand = function() {

    var localctx = new ComparisonOperandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, VtlParser.RULE_comparisonOperand);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1310;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.EQ) | (1 << VtlParser.LT) | (1 << VtlParser.MT) | (1 << VtlParser.ME) | (1 << VtlParser.NEQ) | (1 << VtlParser.LE))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_optionalExpr;
    return this;
}

OptionalExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalExprContext.prototype.constructor = OptionalExprContext;

OptionalExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

OptionalExprContext.prototype.OPTIONAL = function() {
    return this.getToken(VtlParser.OPTIONAL, 0);
};

OptionalExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOptionalExpr(this);
	}
};

OptionalExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOptionalExpr(this);
	}
};

OptionalExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOptionalExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.OptionalExprContext = OptionalExprContext;

VtlParser.prototype.optionalExpr = function() {

    var localctx = new OptionalExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, VtlParser.RULE_optionalExpr);
    try {
        this.state = 1314;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.LPAREN:
        case VtlParser.PLUS:
        case VtlParser.MINUS:
        case VtlParser.EVAL:
        case VtlParser.IF:
        case VtlParser.CURRENT_DATE:
        case VtlParser.NOT:
        case VtlParser.BETWEEN:
        case VtlParser.NULL_CONSTANT:
        case VtlParser.ISNULL:
        case VtlParser.UNION:
        case VtlParser.SYMDIFF:
        case VtlParser.INTERSECT:
        case VtlParser.CHECK:
        case VtlParser.EXISTS_IN:
        case VtlParser.MIN:
        case VtlParser.MAX:
        case VtlParser.ABS:
        case VtlParser.LN:
        case VtlParser.LOG:
        case VtlParser.TRUNC:
        case VtlParser.ROUND:
        case VtlParser.POWER:
        case VtlParser.MOD:
        case VtlParser.LEN:
        case VtlParser.TRIM:
        case VtlParser.UCASE:
        case VtlParser.LCASE:
        case VtlParser.SUBSTR:
        case VtlParser.SUM:
        case VtlParser.AVG:
        case VtlParser.MEDIAN:
        case VtlParser.COUNT:
        case VtlParser.EXP:
        case VtlParser.CHARSET_MATCH:
        case VtlParser.NVL:
        case VtlParser.HIERARCHY:
        case VtlParser.LEVENSHTEIN:
        case VtlParser.LTRIM:
        case VtlParser.RTRIM:
        case VtlParser.INSTR:
        case VtlParser.REPLACE:
        case VtlParser.CEIL:
        case VtlParser.FLOOR:
        case VtlParser.SQRT:
        case VtlParser.RANDOM:
        case VtlParser.SETDIFF:
        case VtlParser.STDDEV_POP:
        case VtlParser.STDDEV_SAMP:
        case VtlParser.VAR_POP:
        case VtlParser.VAR_SAMP:
        case VtlParser.FIRST_VALUE:
        case VtlParser.LAST_VALUE:
        case VtlParser.LAG:
        case VtlParser.LEAD:
        case VtlParser.RATIO_TO_REPORT:
        case VtlParser.FILL_TIME_SERIES:
        case VtlParser.FLOW_TO_STOCK:
        case VtlParser.STOCK_TO_FLOW:
        case VtlParser.TIMESHIFT:
        case VtlParser.INNER_JOIN:
        case VtlParser.LEFT_JOIN:
        case VtlParser.CROSS_JOIN:
        case VtlParser.FULL_JOIN:
        case VtlParser.PERIOD_INDICATOR:
        case VtlParser.TIME_AGG:
        case VtlParser.CAST:
        case VtlParser.CHECK_DATAPOINT:
        case VtlParser.CHECK_HIERARCHY:
        case VtlParser.INTEGER_CONSTANT:
        case VtlParser.NUMBER_CONSTANT:
        case VtlParser.BOOLEAN_CONSTANT:
        case VtlParser.STRING_CONSTANT:
        case VtlParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1312;
            this.expr(0);
            break;
        case VtlParser.OPTIONAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1313;
            this.match(VtlParser.OPTIONAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_componentRole;
    return this;
}

ComponentRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentRoleContext.prototype.constructor = ComponentRoleContext;

ComponentRoleContext.prototype.MEASURE = function() {
    return this.getToken(VtlParser.MEASURE, 0);
};

ComponentRoleContext.prototype.COMPONENT = function() {
    return this.getToken(VtlParser.COMPONENT, 0);
};

ComponentRoleContext.prototype.DIMENSION = function() {
    return this.getToken(VtlParser.DIMENSION, 0);
};

ComponentRoleContext.prototype.ATTRIBUTE = function() {
    return this.getToken(VtlParser.ATTRIBUTE, 0);
};

ComponentRoleContext.prototype.viralAttribute = function() {
    return this.getTypedRuleContext(ViralAttributeContext,0);
};

ComponentRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentRole(this);
	}
};

ComponentRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentRole(this);
	}
};

ComponentRoleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitComponentRole(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ComponentRoleContext = ComponentRoleContext;

VtlParser.prototype.componentRole = function() {

    var localctx = new ComponentRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, VtlParser.RULE_componentRole);
    try {
        this.state = 1321;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.MEASURE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1316;
            this.match(VtlParser.MEASURE);
            break;
        case VtlParser.COMPONENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1317;
            this.match(VtlParser.COMPONENT);
            break;
        case VtlParser.DIMENSION:
            this.enterOuterAlt(localctx, 3);
            this.state = 1318;
            this.match(VtlParser.DIMENSION);
            break;
        case VtlParser.ATTRIBUTE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1319;
            this.match(VtlParser.ATTRIBUTE);
            break;
        case VtlParser.VIRAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 1320;
            this.viralAttribute();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViralAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_viralAttribute;
    return this;
}

ViralAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViralAttributeContext.prototype.constructor = ViralAttributeContext;

ViralAttributeContext.prototype.VIRAL = function() {
    return this.getToken(VtlParser.VIRAL, 0);
};

ViralAttributeContext.prototype.ATTRIBUTE = function() {
    return this.getToken(VtlParser.ATTRIBUTE, 0);
};

ViralAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterViralAttribute(this);
	}
};

ViralAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitViralAttribute(this);
	}
};

ViralAttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitViralAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ViralAttributeContext = ViralAttributeContext;

VtlParser.prototype.viralAttribute = function() {

    var localctx = new ViralAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, VtlParser.RULE_viralAttribute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1323;
        this.match(VtlParser.VIRAL);
        this.state = 1324;
        this.match(VtlParser.ATTRIBUTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueDomainIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_valueDomainID;
    return this;
}

ValueDomainIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueDomainIDContext.prototype.constructor = ValueDomainIDContext;

ValueDomainIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValueDomainIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValueDomainID(this);
	}
};

ValueDomainIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValueDomainID(this);
	}
};

ValueDomainIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitValueDomainID(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ValueDomainIDContext = ValueDomainIDContext;

VtlParser.prototype.valueDomainID = function() {

    var localctx = new ValueDomainIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, VtlParser.RULE_valueDomainID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1326;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_operatorID;
    return this;
}

OperatorIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorIDContext.prototype.constructor = OperatorIDContext;

OperatorIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

OperatorIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOperatorID(this);
	}
};

OperatorIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOperatorID(this);
	}
};

OperatorIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitOperatorID(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.OperatorIDContext = OperatorIDContext;

VtlParser.prototype.operatorID = function() {

    var localctx = new OperatorIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, VtlParser.RULE_operatorID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1328;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoutineNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_routineName;
    return this;
}

RoutineNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoutineNameContext.prototype.constructor = RoutineNameContext;

RoutineNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RoutineNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRoutineName(this);
	}
};

RoutineNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRoutineName(this);
	}
};

RoutineNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRoutineName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RoutineNameContext = RoutineNameContext;

VtlParser.prototype.routineName = function() {

    var localctx = new RoutineNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, VtlParser.RULE_routineName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1330;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

ConstantContext.prototype.NUMBER_CONSTANT = function() {
    return this.getToken(VtlParser.NUMBER_CONSTANT, 0);
};

ConstantContext.prototype.BOOLEAN_CONSTANT = function() {
    return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
};

ConstantContext.prototype.STRING_CONSTANT = function() {
    return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

ConstantContext.prototype.NULL_CONSTANT = function() {
    return this.getToken(VtlParser.NULL_CONSTANT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.ConstantContext = ConstantContext;

VtlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, VtlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1332;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.NULL_CONSTANT || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (VtlParser.INTEGER_CONSTANT - 231)) | (1 << (VtlParser.NUMBER_CONSTANT - 231)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 231)) | (1 << (VtlParser.STRING_CONSTANT - 231)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BasicScalarTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_basicScalarType;
    return this;
}

BasicScalarTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicScalarTypeContext.prototype.constructor = BasicScalarTypeContext;

BasicScalarTypeContext.prototype.STRING = function() {
    return this.getToken(VtlParser.STRING, 0);
};

BasicScalarTypeContext.prototype.INTEGER = function() {
    return this.getToken(VtlParser.INTEGER, 0);
};

BasicScalarTypeContext.prototype.NUMBER = function() {
    return this.getToken(VtlParser.NUMBER, 0);
};

BasicScalarTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(VtlParser.BOOLEAN, 0);
};

BasicScalarTypeContext.prototype.DATE = function() {
    return this.getToken(VtlParser.DATE, 0);
};

BasicScalarTypeContext.prototype.TIME = function() {
    return this.getToken(VtlParser.TIME, 0);
};

BasicScalarTypeContext.prototype.TIME_PERIOD = function() {
    return this.getToken(VtlParser.TIME_PERIOD, 0);
};

BasicScalarTypeContext.prototype.DURATION = function() {
    return this.getToken(VtlParser.DURATION, 0);
};

BasicScalarTypeContext.prototype.SCALAR = function() {
    return this.getToken(VtlParser.SCALAR, 0);
};

BasicScalarTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterBasicScalarType(this);
	}
};

BasicScalarTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitBasicScalarType(this);
	}
};

BasicScalarTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitBasicScalarType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.BasicScalarTypeContext = BasicScalarTypeContext;

VtlParser.prototype.basicScalarType = function() {

    var localctx = new BasicScalarTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, VtlParser.RULE_basicScalarType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1334;
        _la = this._input.LA(1);
        if(!(((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (VtlParser.BOOLEAN - 158)) | (1 << (VtlParser.DATE - 158)) | (1 << (VtlParser.TIME_PERIOD - 158)) | (1 << (VtlParser.NUMBER - 158)) | (1 << (VtlParser.STRING - 158)) | (1 << (VtlParser.TIME - 158)) | (1 << (VtlParser.INTEGER - 158)))) !== 0) || _la===VtlParser.DURATION || _la===VtlParser.SCALAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RetainTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_retainType;
    return this;
}

RetainTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RetainTypeContext.prototype.constructor = RetainTypeContext;

RetainTypeContext.prototype.BOOLEAN_CONSTANT = function() {
    return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
};

RetainTypeContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

RetainTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRetainType(this);
	}
};

RetainTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRetainType(this);
	}
};

RetainTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof VtlVisitor ) {
        return visitor.visitRetainType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




VtlParser.RetainTypeContext = RetainTypeContext;

VtlParser.prototype.retainType = function() {

    var localctx = new RetainTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, VtlParser.RULE_retainType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1336;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.ALL || _la===VtlParser.BOOLEAN_CONSTANT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


VtlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 2:
			return this.expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

VtlParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 9);
		case 1:
			return this.precpred(this._ctx, 8);
		case 2:
			return this.precpred(this._ctx, 7);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		case 5:
			return this.precpred(this._ctx, 12);
		case 6:
			return this.precpred(this._ctx, 11);
		case 7:
			return this.precpred(this._ctx, 6);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.VtlParser = VtlParser;
