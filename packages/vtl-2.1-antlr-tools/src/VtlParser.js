// Generated from Vtl.g4 by ANTLR 4.8
// jshint ignore: start

/* eslint-disable */
var antlr4 = require('antlr4/index');
var VtlListener = require('./VtlListener').VtlListener;
var VtlVisitor = require('./VtlVisitor').VtlVisitor;

var grammarFileName = 'Vtl.g4';

var serializedATN = [
	'\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964',
	'\u0003\u00ef\u069e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004',
	'\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007',
	'\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f',
	'\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010',
	'\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014',
	'\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017',
	'\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b',
	'\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e',
	'\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#\t#\u0004',
	"$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
	'+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004',
	'2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004',
	'9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004',
	'@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004',
	'G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004',
	'N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004',
	'U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004',
	'\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004',
	'c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004',
	'j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0003\u0002\u0003\u0002\u0003\u0002',
	'\u0007\u0002\u00de\n\u0002\f\u0002\u000e\u0002\u00e1\u000b\u0002\u0003',
	'\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003',
	'\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00ee',
	'\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004',
	'\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004',
	'\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004',
	'\u0005\u0004\u0101\n\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003',
	'\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003',
	'\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003',
	'\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003',
	'\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003',
	'\u0004\u0005\u0004\u011f\n\u0004\u0007\u0004\u0121\n\u0004\f\u0004\u000e',
	'\u0004\u0124\u000b\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005',
	'\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005',
	'\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005',
	'\u0003\u0005\u0005\u0005\u0137\n\u0005\u0003\u0005\u0003\u0005\u0003',
	'\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003',
	'\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003',
	'\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005',
	'\u0005\u014d\n\u0005\u0007\u0005\u014f\n\u0005\f\u0005\u000e\u0005\u0152',
	'\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006',
	'\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u015c\n\u0006\u0003',
	'\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003',
	'\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005',
	'\u0007\u016a\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b',
	'\u0003\b\u0003\b\u0005\b\u0174\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0007',
	'\t\u017a\n\t\f\t\u000e\t\u017d\u000b\t\u0003\n\u0003\n\u0003\n\u0003',
	'\n\u0005\n\u0183\n\n\u0005\n\u0185\n\n\u0003\u000b\u0003\u000b\u0003',
	'\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u018e\n\f\f\f\u000e\f',
	'\u0191\u000b\f\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u0197\n\r\f\r',
	'\u000e\r\u019a\u000b\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e',
	'\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f',
	'\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u01a9\n\u000f\f\u000f',
	'\u000e\u000f\u01ac\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003',
	'\u0010\u0007\u0010\u01b2\n\u0010\f\u0010\u000e\u0010\u01b5\u000b\u0010',
	'\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011',
	'\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011',
	'\u0005\u0011\u01c3\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003',
	'\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u01cc\n\u0012',
	'\f\u0012\u000e\u0012\u01cf\u000b\u0012\u0005\u0012\u01d1\n\u0012\u0003',
	'\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01d6\n\u0012\u0003\u0012',
	'\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012',
	'\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012',
	'\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012',
	'\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012',
	'\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012',
	'\u0005\u0012\u01f7\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003',
	'\u0013\u0003\u0013\u0007\u0013\u01fe\n\u0013\f\u0013\u000e\u0013\u0201',
	'\u000b\u0013\u0005\u0013\u0203\n\u0013\u0003\u0013\u0003\u0013\u0003',
	'\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005',
	'\u0013\u020d\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013',
	'\u0212\n\u0013\u0007\u0013\u0214\n\u0013\f\u0013\u000e\u0013\u0217\u000b',
	'\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u021c\n\u0013',
	'\u0003\u0013\u0003\u0013\u0005\u0013\u0220\n\u0013\u0003\u0013\u0003',
	'\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003',
	'\u0013\u0005\u0013\u022a\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013',
	'\u022e\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0232\n\u0013\u0003',
	'\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u0239',
	'\n\u0014\f\u0014\u000e\u0014\u023c\u000b\u0014\u0005\u0014\u023e\n\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0005\u0014\u0248\n\u0014\u0003\u0014\u0003',
	'\u0014\u0005\u0014\u024c\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014',
	'\u0256\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u025b',
	'\n\u0014\u0007\u0014\u025d\n\u0014\f\u0014\u000e\u0014\u0260\u000b\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0265\n\u0014\u0003',
	'\u0014\u0003\u0014\u0005\u0014\u0269\n\u0014\u0003\u0014\u0003\u0014',
	'\u0005\u0014\u026d\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0005',
	'\u0015\u0272\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016',
	'\u0277\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003',
	'\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003',
	'\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0287\n\u0017',
	'\u0003\u0017\u0003\u0017\u0005\u0017\u028b\n\u0017\u0003\u0017\u0003',
	'\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003',
	'\u0017\u0003\u0017\u0005\u0017\u0296\n\u0017\u0003\u0017\u0003\u0017',
	'\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017',
	'\u0003\u0017\u0005\u0017\u02a1\n\u0017\u0003\u0017\u0003\u0017\u0005',
	'\u0017\u02a5\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02a9\n\u0017',
	'\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018',
	'\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018',
	'\u0003\u0018\u0003\u0018\u0005\u0018\u02b9\n\u0018\u0003\u0018\u0003',
	'\u0018\u0005\u0018\u02bd\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018',
	'\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018',
	'\u0005\u0018\u02c8\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003',
	'\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005',
	'\u0018\u02d3\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u02d7\n\u0018',
	'\u0003\u0018\u0003\u0018\u0005\u0018\u02db\n\u0018\u0003\u0019\u0003',
	'\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003',
	'\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02e7\n\u0019\u0003\u0019',
	'\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019',
	'\u0003\u0019\u0003\u0019\u0005\u0019\u02f2\n\u0019\u0003\u001a\u0003',
	'\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003',
	'\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u02fe\n\u001a\u0003\u001a',
	'\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a',
	'\u0003\u001a\u0003\u001a\u0005\u001a\u0309\n\u001a\u0003\u001b\u0003',
	'\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003',
	'\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003',
	'\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003',
	'\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003',
	'\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0327\n\u001b\u0003\u001b',
	'\u0003\u001b\u0005\u001b\u032b\n\u001b\u0003\u001c\u0003\u001c\u0003',
	'\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003',
	'\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003',
	'\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003',
	'\u001c\u0005\u001c\u0342\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d',
	'\u0005\u001d\u0347\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003',
	'\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u034f\n\u001d\u0003\u001d',
	'\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d',
	'\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d',
	'\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d',
	'\u0005\u001d\u0364\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0368',
	'\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u036c\n\u001d\u0003\u001d',
	'\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0372\n\u001d\u0003',
	'\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0377\n\u001e\u0003\u001e',
	'\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e',
	'\u037f\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003',
	'\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003',
	'\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003',
	'\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0394\n\u001e\u0003\u001e',
	'\u0003\u001e\u0005\u001e\u0398\n\u001e\u0003\u001e\u0003\u001e\u0005',
	'\u001e\u039c\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e',
	'\u0005\u001e\u03a2\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003',
	'\u001f\u0003\u001f\u0006\u001f\u03a9\n\u001f\r\u001f\u000e\u001f\u03aa',
	'\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f',
	'\u0003\u001f\u0006\u001f\u03b4\n\u001f\r\u001f\u000e\u001f\u03b5\u0003',
	'\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003',
	'\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u03c1\n\u001f\u0003 \u0003',
	' \u0003 \u0003 \u0003 \u0003 \u0005 \u03c9\n \u0003 \u0003 \u0005 \u03cd',
	'\n \u0003 \u0005 \u03d0\n \u0003 \u0005 \u03d3\n \u0003 \u0005 \u03d6',
	'\n \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003',
	'!\u0003!\u0007!\u03e3\n!\f!\u000e!\u03e6\u000b!\u0005!\u03e8\n!\u0003',
	'!\u0005!\u03eb\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003',
	'!\u0005!\u03f5\n!\u0003!\u0003!\u0005!\u03f9\n!\u0003!\u0005!\u03fc',
	'\n!\u0003!\u0005!\u03ff\n!\u0003!\u0005!\u0402\n!\u0003!\u0003!\u0003',
	'!\u0003!\u0003!\u0003!\u0005!\u040a\n!\u0003!\u0005!\u040d\n!\u0003',
	'!\u0005!\u0410\n!\u0003!\u0005!\u0413\n!\u0003!\u0003!\u0005!\u0417',
	'\n!\u0003"\u0003"\u0003"\u0003"\u0003"\u0003"\u0003"\u0003#\u0003',
	'#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003',
	'$\u0003$\u0003$\u0003$\u0005$\u042f\n$\u0003%\u0003%\u0003%\u0003%\u0003',
	'%\u0005%\u0436\n%\u0005%\u0438\n%\u0003%\u0003%\u0003&\u0003&\u0003',
	'&\u0003&\u0003&\u0003&\u0005&\u0442\n&\u0003&\u0005&\u0445\n&\u0003',
	'&\u0005&\u0448\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003',
	'&\u0003&\u0005&\u0453\n&\u0005&\u0455\n&\u0003&\u0003&\u0003&\u0005',
	'&\u045a\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003',
	"&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u046a\n&\u0003'\u0003'",
	"\u0003'\u0003'\u0003'\u0003'\u0005'\u0472\n'\u0003'\u0005'\u0475",
	"\n'\u0003'\u0005'\u0478\n'\u0003'\u0003'\u0003'\u0003'\u0003",
	"'\u0003'\u0003'\u0003'\u0003'\u0005'\u0483\n'\u0005'\u0485\n",
	"'\u0003'\u0003'\u0003'\u0005'\u048a\n'\u0003'\u0003'\u0003'",
	"\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0005'\u0496",
	"\n'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'",
	"\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0005'\u04a6\n'\u0003",
	'(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0007)\u04af\n)\f)\u000e',
	')\u04b2\u000b)\u0003*\u0005*\u04b5\n*\u0003*\u0003*\u0003*\u0003*\u0003',
	'+\u0005+\u04bc\n+\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003',
	',\u0003-\u0003-\u0003-\u0007-\u04c9\n-\f-\u000e-\u04cc\u000b-\u0003',
	'.\u0003.\u0003.\u0007.\u04d1\n.\f.\u000e.\u04d4\u000b.\u0003.\u0003',
	'.\u0003.\u0003.\u0007.\u04da\n.\f.\u000e.\u04dd\u000b.\u0005.\u04df',
	'\n.\u0003/\u0003/\u0003/\u0005/\u04e4\n/\u00030\u00050\u04e7\n0\u0003',
	'0\u00030\u00030\u00050\u04ec\n0\u00030\u00050\u04ef\n0\u00030\u0005',
	'0\u04f2\n0\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u0007',
	'2\u04fc\n2\f2\u000e2\u04ff\u000b2\u00033\u00033\u00033\u00033\u0003',
	'3\u00073\u0506\n3\f3\u000e3\u0509\u000b3\u00034\u00034\u00054\u050d',
	'\n4\u00035\u00035\u00035\u00055\u0512\n5\u00035\u00035\u00035\u0003',
	'5\u00035\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u00037\u0003',
	'7\u00037\u00037\u00037\u00037\u00057\u0526\n7\u00038\u00038\u00038\u0003',
	'8\u00038\u00078\u052d\n8\f8\u000e8\u0530\u000b8\u00038\u00038\u0003',
	'8\u00058\u0535\n8\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0005',
	':\u053e\n:\u0003;\u0003;\u0003;\u0005;\u0543\n;\u0003<\u0003<\u0005',
	'<\u0547\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u054e\n=\u0003',
	'>\u0003>\u0003>\u0005>\u0553\n>\u0003?\u0003?\u0005?\u0557\n?\u0003',
	'?\u0005?\u055a\n?\u0003?\u0005?\u055d\n?\u0003?\u0005?\u0560\n?\u0003',
	'@\u0003@\u0003@\u0003@\u0003@\u0005@\u0567\n@\u0003A\u0003A\u0003A\u0003',
	'A\u0003A\u0007A\u056e\nA\fA\u000eA\u0571\u000bA\u0003A\u0003A\u0005',
	'A\u0575\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u057c\nB\u0003',
	'C\u0003C\u0003C\u0003C\u0003C\u0003C\u0007C\u0584\nC\fC\u000eC\u0587',
	'\u000bC\u0003C\u0003C\u0005C\u058b\nC\u0003C\u0003C\u0003C\u0003C\u0003',
	'C\u0007C\u0592\nC\fC\u000eC\u0595\u000bC\u0003C\u0003C\u0005C\u0599',
	'\nC\u0005C\u059b\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003',
	'D\u0003D\u0007D\u05a5\nD\fD\u000eD\u05a8\u000bD\u0003D\u0003D\u0005',
	'D\u05ac\nD\u0003D\u0005D\u05af\nD\u0003D\u0003D\u0003D\u0003D\u0003',
	'D\u0003D\u0003D\u0007D\u05b8\nD\fD\u000eD\u05bb\u000bD\u0003D\u0003',
	'D\u0005D\u05bf\nD\u0003D\u0003D\u0005D\u05c3\nD\u0005D\u05c5\nD\u0003',
	'E\u0003E\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0007G\u05cf\nG\f',
	'G\u000eG\u05d2\u000bG\u0003H\u0003H\u0003H\u0005H\u05d7\nH\u0003I\u0003',
	'I\u0003I\u0007I\u05dc\nI\fI\u000eI\u05df\u000bI\u0003J\u0003J\u0005',
	'J\u05e3\nJ\u0003J\u0003J\u0003J\u0003J\u0005J\u05e9\nJ\u0003J\u0003',
	'J\u0005J\u05ed\nJ\u0003J\u0005J\u05f0\nJ\u0003K\u0003K\u0003K\u0007',
	'K\u05f5\nK\fK\u000eK\u05f8\u000bK\u0003L\u0003L\u0005L\u05fc\nL\u0003',
	'L\u0003L\u0005L\u0600\nL\u0003L\u0005L\u0603\nL\u0003M\u0003M\u0003',
	'M\u0005M\u0608\nM\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0007N\u0610',
	'\nN\fN\u000eN\u0613\u000bN\u0003O\u0003O\u0003O\u0003O\u0005O\u0619',
	'\nO\u0003O\u0003O\u0005O\u061d\nO\u0003O\u0003O\u0007O\u0621\nO\fO\u000e',
	'O\u0624\u000bO\u0003P\u0005P\u0627\nP\u0003P\u0003P\u0003P\u0003P\u0003',
	'P\u0005P\u062e\nP\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003',
	'R\u0003R\u0003R\u0007R\u063a\nR\fR\u000eR\u063d\u000bR\u0003R\u0003',
	'R\u0005R\u0641\nR\u0003S\u0003S\u0003S\u0005S\u0646\nS\u0003T\u0003',
	'T\u0005T\u064a\nT\u0003U\u0003U\u0003V\u0003V\u0003W\u0003W\u0003W\u0003',
	'W\u0007W\u0654\nW\fW\u000eW\u0657\u000bW\u0003X\u0003X\u0003Y\u0003',
	'Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\\u0003]\u0003]\u0003',
	'^\u0003^\u0003_\u0003_\u0003_\u0005_\u066b\n_\u0003`\u0003`\u0003`\u0003',
	'`\u0007`\u0671\n`\f`\u000e`\u0674\u000b`\u0003`\u0003`\u0003a\u0003',
	'a\u0003a\u0003b\u0003b\u0003b\u0003c\u0003c\u0003d\u0003d\u0005d\u0682',
	'\nd\u0003e\u0003e\u0005e\u0686\ne\u0003f\u0003f\u0003f\u0003f\u0003',
	'f\u0005f\u068d\nf\u0003g\u0003g\u0003g\u0003h\u0003h\u0003i\u0003i\u0003',
	'j\u0003j\u0003k\u0003k\u0003l\u0003l\u0003m\u0003m\u0003m\u0002\u0004',
	'\u0006\bn\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018',
	'\u001a\u001c\u001e "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|',
	'~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094',
	'\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac',
	'\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4',
	"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u0002'",
	'\u0004\u0002\u000f\u0010))\u0003\u0002\u0011\u0012\u0004\u0002\u000f',
	"\u0010TT\u0003\u0002'(\u0003\u0002+,\u0003\u0002 !\u0004\u0002\u00c0",
	'\u00c0\u00c2\u00c2\u0003\u0002\u00b7\u00b8\u0003\u0002\u00b9\u00ba\u0005',
	'\u0002SSUWyz\u0006\u0002KKMMbb}\u007f\u0003\u0002OP\u0004\u0002NNQR',
	'\u0004\u0002>>\u00c7\u00c7\u0003\u0002\u0098\u0099\u0004\u0002ii\u00ea',
	'\u00ea\u0003\u0002HI\u0004\u000222\u0081\u0081\u0004\u0002>>jj\u0005',
	'\u0002FGY\\\u0082\u0085\u0006\u0002FGY\\\u0082\u0085\u0089\u008a\u0003',
	'\u0002\u008b\u008c\u0003\u0002DE\u0004\u0002BB\u0087\u0087\u0003\u0002',
	'kl\u0003\u0002\u000f\u0010\u0004\u0002\u00e7\u00e8\u00eb\u00eb\u0004',
	'\u0002\u000f\u000f\u0011\u0011\u0005\u0002>>jj\u00de\u00de\u0003\u0002',
	'\u00d7\u00dc\u0004\u0002oo\u00d2\u00d2\u0005\u0002oovv\u00d1\u00d1\u0004',
	'\u0002>>\u00d6\u00d6\u0003\u0002\t\u000e\u0004\u0002--\u00e7\u00ea\u0005',
	'\u0002\u009e\u00a4\u00c8\u00c8\u00df\u00df\u0004\u0002>>\u00e9\u00e9',
	'\u0002\u0743\u0002\u00df\u0003\u0002\u0002\u0002\u0004\u00ed\u0003\u0002',
	'\u0002\u0002\u0006\u0100\u0003\u0002\u0002\u0002\b\u0136\u0003\u0002',
	'\u0002\u0002\n\u015b\u0003\u0002\u0002\u0002\f\u0169\u0003\u0002\u0002',
	'\u0002\u000e\u0173\u0003\u0002\u0002\u0002\u0010\u0175\u0003\u0002\u0002',
	'\u0002\u0012\u017e\u0003\u0002\u0002\u0002\u0014\u0186\u0003\u0002\u0002',
	'\u0002\u0016\u0189\u0003\u0002\u0002\u0002\u0018\u0192\u0003\u0002\u0002',
	'\u0002\u001a\u019b\u0003\u0002\u0002\u0002\u001c\u01a0\u0003\u0002\u0002',
	'\u0002\u001e\u01ad\u0003\u0002\u0002\u0002 \u01c2\u0003\u0002\u0002',
	'\u0002"\u01f6\u0003\u0002\u0002\u0002$\u0231\u0003\u0002\u0002\u0002',
	'&\u026c\u0003\u0002\u0002\u0002(\u0271\u0003\u0002\u0002\u0002*\u0276',
	'\u0003\u0002\u0002\u0002,\u02a8\u0003\u0002\u0002\u0002.\u02da\u0003',
	'\u0002\u0002\u00020\u02f1\u0003\u0002\u0002\u00022\u0308\u0003\u0002',
	'\u0002\u00024\u032a\u0003\u0002\u0002\u00026\u0341\u0003\u0002\u0002',
	'\u00028\u0371\u0003\u0002\u0002\u0002:\u03a1\u0003\u0002\u0002\u0002',
	'<\u03c0\u0003\u0002\u0002\u0002>\u03c2\u0003\u0002\u0002\u0002@\u0416',
	'\u0003\u0002\u0002\u0002B\u0418\u0003\u0002\u0002\u0002D\u041f\u0003',
	'\u0002\u0002\u0002F\u042e\u0003\u0002\u0002\u0002H\u0430\u0003\u0002',
	'\u0002\u0002J\u0469\u0003\u0002\u0002\u0002L\u04a5\u0003\u0002\u0002',
	'\u0002N\u04a7\u0003\u0002\u0002\u0002P\u04ab\u0003\u0002\u0002\u0002',
	'R\u04b4\u0003\u0002\u0002\u0002T\u04bb\u0003\u0002\u0002\u0002V\u04c1',
	'\u0003\u0002\u0002\u0002X\u04c5\u0003\u0002\u0002\u0002Z\u04cd\u0003',
	'\u0002\u0002\u0002\\\u04e0\u0003\u0002\u0002\u0002^\u04e6\u0003\u0002',
	'\u0002\u0002`\u04f3\u0003\u0002\u0002\u0002b\u04f6\u0003\u0002\u0002',
	'\u0002d\u0500\u0003\u0002\u0002\u0002f\u050a\u0003\u0002\u0002\u0002',
	'h\u0511\u0003\u0002\u0002\u0002j\u0518\u0003\u0002\u0002\u0002l\u0525',
	'\u0003\u0002\u0002\u0002n\u0534\u0003\u0002\u0002\u0002p\u0536\u0003',
	'\u0002\u0002\u0002r\u0539\u0003\u0002\u0002\u0002t\u0542\u0003\u0002',
	'\u0002\u0002v\u0546\u0003\u0002\u0002\u0002x\u054d\u0003\u0002\u0002',
	'\u0002z\u0552\u0003\u0002\u0002\u0002|\u0556\u0003\u0002\u0002\u0002',
	'~\u0561\u0003\u0002\u0002\u0002\u0080\u0568\u0003\u0002\u0002\u0002',
	'\u0082\u0576\u0003\u0002\u0002\u0002\u0084\u059a\u0003\u0002\u0002\u0002',
	'\u0086\u05c4\u0003\u0002\u0002\u0002\u0088\u05c6\u0003\u0002\u0002\u0002',
	'\u008a\u05c8\u0003\u0002\u0002\u0002\u008c\u05ca\u0003\u0002\u0002\u0002',
	'\u008e\u05d3\u0003\u0002\u0002\u0002\u0090\u05d8\u0003\u0002\u0002\u0002',
	'\u0092\u05e2\u0003\u0002\u0002\u0002\u0094\u05f1\u0003\u0002\u0002\u0002',
	'\u0096\u05fb\u0003\u0002\u0002\u0002\u0098\u0604\u0003\u0002\u0002\u0002',
	'\u009a\u060c\u0003\u0002\u0002\u0002\u009c\u0618\u0003\u0002\u0002\u0002',
	'\u009e\u0626\u0003\u0002\u0002\u0002\u00a0\u062f\u0003\u0002\u0002\u0002',
	'\u00a2\u0640\u0003\u0002\u0002\u0002\u00a4\u0642\u0003\u0002\u0002\u0002',
	'\u00a6\u0647\u0003\u0002\u0002\u0002\u00a8\u064b\u0003\u0002\u0002\u0002',
	'\u00aa\u064d\u0003\u0002\u0002\u0002\u00ac\u064f\u0003\u0002\u0002\u0002',
	'\u00ae\u0658\u0003\u0002\u0002\u0002\u00b0\u065a\u0003\u0002\u0002\u0002',
	'\u00b2\u065d\u0003\u0002\u0002\u0002\u00b4\u065f\u0003\u0002\u0002\u0002',
	'\u00b6\u0661\u0003\u0002\u0002\u0002\u00b8\u0663\u0003\u0002\u0002\u0002',
	'\u00ba\u0665\u0003\u0002\u0002\u0002\u00bc\u0667\u0003\u0002\u0002\u0002',
	'\u00be\u066c\u0003\u0002\u0002\u0002\u00c0\u0677\u0003\u0002\u0002\u0002',
	'\u00c2\u067a\u0003\u0002\u0002\u0002\u00c4\u067d\u0003\u0002\u0002\u0002',
	'\u00c6\u0681\u0003\u0002\u0002\u0002\u00c8\u0685\u0003\u0002\u0002\u0002',
	'\u00ca\u068c\u0003\u0002\u0002\u0002\u00cc\u068e\u0003\u0002\u0002\u0002',
	'\u00ce\u0691\u0003\u0002\u0002\u0002\u00d0\u0693\u0003\u0002\u0002\u0002',
	'\u00d2\u0695\u0003\u0002\u0002\u0002\u00d4\u0697\u0003\u0002\u0002\u0002',
	'\u00d6\u0699\u0003\u0002\u0002\u0002\u00d8\u069b\u0003\u0002\u0002\u0002',
	'\u00da\u00db\u0005\u0004\u0003\u0002\u00db\u00dc\u0007\u00ed\u0002\u0002',
	'\u00dc\u00de\u0003\u0002\u0002\u0002\u00dd\u00da\u0003\u0002\u0002\u0002',
	'\u00de\u00e1\u0003\u0002\u0002\u0002\u00df\u00dd\u0003\u0002\u0002\u0002',
	'\u00df\u00e0\u0003\u0002\u0002\u0002\u00e0\u00e2\u0003\u0002\u0002\u0002',
	'\u00e1\u00df\u0003\u0002\u0002\u0002\u00e2\u00e3\u0007\u0002\u0002\u0003',
	'\u00e3\u0003\u0003\u0002\u0002\u0002\u00e4\u00e5\u0005\u00b8]\u0002',
	'\u00e5\u00e6\u0007\u0016\u0002\u0002\u00e6\u00e7\u0005\u0006\u0004\u0002',
	'\u00e7\u00ee\u0003\u0002\u0002\u0002\u00e8\u00e9\u0005\u00b8]\u0002',
	'\u00e9\u00ea\u0007r\u0002\u0002\u00ea\u00eb\u0005\u0006\u0004\u0002',
	'\u00eb\u00ee\u0003\u0002\u0002\u0002\u00ec\u00ee\u0005"\u0012\u0002',
	'\u00ed\u00e4\u0003\u0002\u0002\u0002\u00ed\u00e8\u0003\u0002\u0002\u0002',
	'\u00ed\u00ec\u0003\u0002\u0002\u0002\u00ee\u0005\u0003\u0002\u0002\u0002',
	'\u00ef\u00f0\b\u0004\u0001\u0002\u00f0\u00f1\u0007\u0003\u0002\u0002',
	'\u00f1\u00f2\u0005\u0006\u0004\u0002\u00f2\u00f3\u0007\u0004\u0002\u0002',
	'\u00f3\u0101\u0003\u0002\u0002\u0002\u00f4\u0101\u0005\f\u0007\u0002',
	'\u00f5\u00f6\t\u0002\u0002\u0002\u00f6\u0101\u0005\u0006\u0004\f\u00f7',
	'\u00f8\u0007\u0019\u0002\u0002\u00f8\u00f9\u0005\u0006\u0004\u0002\u00f9',
	'\u00fa\u0007\u001a\u0002\u0002\u00fa\u00fb\u0005\u0006\u0004\u0002\u00fb',
	'\u00fc\u0007\u001b\u0002\u0002\u00fc\u00fd\u0005\u0006\u0004\u0005\u00fd',
	'\u0101\u0003\u0002\u0002\u0002\u00fe\u0101\u0005\u00d4k\u0002\u00ff',
	'\u0101\u0005\u00b8]\u0002\u0100\u00ef\u0003\u0002\u0002\u0002\u0100',
	'\u00f4\u0003\u0002\u0002\u0002\u0100\u00f5\u0003\u0002\u0002\u0002\u0100',
	'\u00f7\u0003\u0002\u0002\u0002\u0100\u00fe\u0003\u0002\u0002\u0002\u0100',
	'\u00ff\u0003\u0002\u0002\u0002\u0101\u0122\u0003\u0002\u0002\u0002\u0102',
	'\u0103\f\u000b\u0002\u0002\u0103\u0104\t\u0003\u0002\u0002\u0104\u0121',
	'\u0005\u0006\u0004\f\u0105\u0106\f\n\u0002\u0002\u0106\u0107\t\u0004',
	'\u0002\u0002\u0107\u0121\u0005\u0006\u0004\u000b\u0108\u0109\f\t\u0002',
	'\u0002\u0109\u010a\u0005\u00c4c\u0002\u010a\u010b\u0005\u0006\u0004',
	'\n\u010b\u0121\u0003\u0002\u0002\u0002\u010c\u010d\f\u0007\u0002\u0002',
	'\u010d\u010e\u0007&\u0002\u0002\u010e\u0121\u0005\u0006\u0004\b\u010f',
	'\u0110\f\u0006\u0002\u0002\u0110\u0111\t\u0005\u0002\u0002\u0111\u0121',
	'\u0005\u0006\u0004\u0007\u0112\u0113\f\u000e\u0002\u0002\u0113\u0114',
	'\u0007\u0005\u0002\u0002\u0114\u0115\u0005\u000e\b\u0002\u0115\u0116',
	'\u0007\u0006\u0002\u0002\u0116\u0121\u0003\u0002\u0002\u0002\u0117\u0118',
	'\f\r\u0002\u0002\u0118\u0119\u0007\u0017\u0002\u0002\u0119\u0121\u0005',
	'\u00ba^\u0002\u011a\u011b\f\b\u0002\u0002\u011b\u011e\t\u0006\u0002',
	'\u0002\u011c\u011f\u0005\u00be`\u0002\u011d\u011f\u0005\u00ceh\u0002',
	'\u011e\u011c\u0003\u0002\u0002\u0002\u011e\u011d\u0003\u0002\u0002\u0002',
	'\u011f\u0121\u0003\u0002\u0002\u0002\u0120\u0102\u0003\u0002\u0002\u0002',
	'\u0120\u0105\u0003\u0002\u0002\u0002\u0120\u0108\u0003\u0002\u0002\u0002',
	'\u0120\u010c\u0003\u0002\u0002\u0002\u0120\u010f\u0003\u0002\u0002\u0002',
	'\u0120\u0112\u0003\u0002\u0002\u0002\u0120\u0117\u0003\u0002\u0002\u0002',
	'\u0120\u011a\u0003\u0002\u0002\u0002\u0121\u0124\u0003\u0002\u0002\u0002',
	'\u0122\u0120\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002',
	'\u0123\u0007\u0003\u0002\u0002\u0002\u0124\u0122\u0003\u0002\u0002\u0002',
	'\u0125\u0126\b\u0005\u0001\u0002\u0126\u0127\u0007\u0003\u0002\u0002',
	'\u0127\u0128\u0005\b\u0005\u0002\u0128\u0129\u0007\u0004\u0002\u0002',
	'\u0129\u0137\u0003\u0002\u0002\u0002\u012a\u0137\u0005\n\u0006\u0002',
	'\u012b\u012c\t\u0002\u0002\u0002\u012c\u0137\u0005\b\u0005\f\u012d\u012e',
	'\u0007\u0019\u0002\u0002\u012e\u012f\u0005\b\u0005\u0002\u012f\u0130',
	'\u0007\u001a\u0002\u0002\u0130\u0131\u0005\b\u0005\u0002\u0131\u0132',
	'\u0007\u001b\u0002\u0002\u0132\u0133\u0005\b\u0005\u0005\u0133\u0137',
	'\u0003\u0002\u0002\u0002\u0134\u0137\u0005\u00d4k\u0002\u0135\u0137',
	'\u0005\u00bc_\u0002\u0136\u0125\u0003\u0002\u0002\u0002\u0136\u012a',
	'\u0003\u0002\u0002\u0002\u0136\u012b\u0003\u0002\u0002\u0002\u0136\u012d',
	'\u0003\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0135',
	'\u0003\u0002\u0002\u0002\u0137\u0150\u0003\u0002\u0002\u0002\u0138\u0139',
	'\f\u000b\u0002\u0002\u0139\u013a\t\u0003\u0002\u0002\u013a\u014f\u0005',
	'\b\u0005\f\u013b\u013c\f\n\u0002\u0002\u013c\u013d\t\u0004\u0002\u0002',
	'\u013d\u014f\u0005\b\u0005\u000b\u013e\u013f\f\t\u0002\u0002\u013f\u0140',
	'\u0005\u00c4c\u0002\u0140\u0141\u0005\b\u0005\n\u0141\u014f\u0003\u0002',
	'\u0002\u0002\u0142\u0143\f\u0007\u0002\u0002\u0143\u0144\u0007&\u0002',
	'\u0002\u0144\u014f\u0005\b\u0005\b\u0145\u0146\f\u0006\u0002\u0002\u0146',
	'\u0147\t\u0005\u0002\u0002\u0147\u014f\u0005\b\u0005\u0007\u0148\u0149',
	'\f\b\u0002\u0002\u0149\u014c\t\u0006\u0002\u0002\u014a\u014d\u0005\u00be',
	'`\u0002\u014b\u014d\u0005\u00ceh\u0002\u014c\u014a\u0003\u0002\u0002',
	'\u0002\u014c\u014b\u0003\u0002\u0002\u0002\u014d\u014f\u0003\u0002\u0002',
	'\u0002\u014e\u0138\u0003\u0002\u0002\u0002\u014e\u013b\u0003\u0002\u0002',
	'\u0002\u014e\u013e\u0003\u0002\u0002\u0002\u014e\u0142\u0003\u0002\u0002',
	'\u0002\u014e\u0145\u0003\u0002\u0002\u0002\u014e\u0148\u0003\u0002\u0002',
	'\u0002\u014f\u0152\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002',
	'\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151\t\u0003\u0002\u0002',
	'\u0002\u0152\u0150\u0003\u0002\u0002\u0002\u0153\u015c\u0005&\u0014',
	'\u0002\u0154\u015c\u0005.\u0018\u0002\u0155\u015c\u00052\u001a\u0002',
	'\u0156\u015c\u00056\u001c\u0002\u0157\u015c\u0005:\u001e\u0002\u0158',
	"\u015c\u0005D#\u0002\u0159\u015c\u0005F$\u0002\u015a\u015c\u0005L'",
	'\u0002\u015b\u0153\u0003\u0002\u0002\u0002\u015b\u0154\u0003\u0002\u0002',
	'\u0002\u015b\u0155\u0003\u0002\u0002\u0002\u015b\u0156\u0003\u0002\u0002',
	'\u0002\u015b\u0157\u0003\u0002\u0002\u0002\u015b\u0158\u0003\u0002\u0002',
	'\u0002\u015b\u0159\u0003\u0002\u0002\u0002\u015b\u015a\u0003\u0002\u0002',
	'\u0002\u015c\u000b\u0003\u0002\u0002\u0002\u015d\u016a\u0005 \u0011',
	'\u0002\u015e\u016a\u0005$\u0013\u0002\u015f\u016a\u0005,\u0017\u0002',
	'\u0160\u016a\u00050\u0019\u0002\u0161\u016a\u00054\u001b\u0002\u0162',
	'\u016a\u00058\u001d\u0002\u0163\u016a\u0005<\u001f\u0002\u0164\u016a',
	'\u0005> \u0002\u0165\u016a\u0005@!\u0002\u0166\u016a\u0005B"\u0002',
	'\u0167\u016a\u0005H%\u0002\u0168\u016a\u0005J&\u0002\u0169\u015d\u0003',
	'\u0002\u0002\u0002\u0169\u015e\u0003\u0002\u0002\u0002\u0169\u015f\u0003',
	'\u0002\u0002\u0002\u0169\u0160\u0003\u0002\u0002\u0002\u0169\u0161\u0003',
	'\u0002\u0002\u0002\u0169\u0162\u0003\u0002\u0002\u0002\u0169\u0163\u0003',
	'\u0002\u0002\u0002\u0169\u0164\u0003\u0002\u0002\u0002\u0169\u0165\u0003',
	'\u0002\u0002\u0002\u0169\u0166\u0003\u0002\u0002\u0002\u0169\u0167\u0003',
	'\u0002\u0002\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\r\u0003',
	'\u0002\u0002\u0002\u016b\u0174\u0005\u0010\t\u0002\u016c\u0174\u0005',
	'\u0012\n\u0002\u016d\u0174\u0005\u0014\u000b\u0002\u016e\u0174\u0005',
	'\u0016\f\u0002\u016f\u0174\u0005\u0018\r\u0002\u0170\u0174\u0005\u001a',
	'\u000e\u0002\u0171\u0174\u0005\u001c\u000f\u0002\u0172\u0174\u0005\u001e',
	'\u0010\u0002\u0173\u016b\u0003\u0002\u0002\u0002\u0173\u016c\u0003\u0002',
	'\u0002\u0002\u0173\u016d\u0003\u0002\u0002\u0002\u0173\u016e\u0003\u0002',
	'\u0002\u0002\u0173\u016f\u0003\u0002\u0002\u0002\u0173\u0170\u0003\u0002',
	'\u0002\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0173\u0172\u0003\u0002',
	'\u0002\u0002\u0174\u000f\u0003\u0002\u0002\u0002\u0175\u0176\u0007$',
	'\u0002\u0002\u0176\u017b\u0005N(\u0002\u0177\u0178\u0007\u0013\u0002',
	'\u0002\u0178\u017a\u0005N(\u0002\u0179\u0177\u0003\u0002\u0002\u0002',
	'\u017a\u017d\u0003\u0002\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002',
	'\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u0011\u0003\u0002\u0002\u0002',
	'\u017d\u017b\u0003\u0002\u0002\u0002\u017e\u017f\u0007?\u0002\u0002',
	'\u017f\u0184\u0005P)\u0002\u0180\u0182\u0005n8\u0002\u0181\u0183\u0005',
	'p9\u0002\u0182\u0181\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002',
	'\u0002\u0002\u0183\u0185\u0003\u0002\u0002\u0002\u0184\u0180\u0003\u0002',
	'\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002\u0185\u0013\u0003\u0002',
	'\u0002\u0002\u0186\u0187\u0007`\u0002\u0002\u0187\u0188\u0005\b\u0005',
	'\u0002\u0188\u0015\u0003\u0002\u0002\u0002\u0189\u018a\u0007"\u0002',
	'\u0002\u018a\u018f\u0005T+\u0002\u018b\u018c\u0007\u0013\u0002\u0002',
	'\u018c\u018e\u0005T+\u0002\u018d\u018b\u0003\u0002\u0002\u0002\u018e',
	'\u0191\u0003\u0002\u0002\u0002\u018f\u018d\u0003\u0002\u0002\u0002\u018f',
	'\u0190\u0003\u0002\u0002\u0002\u0190\u0017\u0003\u0002\u0002\u0002\u0191',
	'\u018f\u0003\u0002\u0002\u0002\u0192\u0193\t\u0007\u0002\u0002\u0193',
	'\u0198\u0005\u00bc_\u0002\u0194\u0195\u0007\u0013\u0002\u0002\u0195',
	'\u0197\u0005\u00bc_\u0002\u0196\u0194\u0003\u0002\u0002\u0002\u0197',
	'\u019a\u0003\u0002\u0002\u0002\u0198\u0196\u0003\u0002\u0002\u0002\u0198',
	'\u0199\u0003\u0002\u0002\u0002\u0199\u0019\u0003\u0002\u0002\u0002\u019a',
	'\u0198\u0003\u0002\u0002\u0002\u019b\u019c\t\b\u0002\u0002\u019c\u019d',
	'\u0005\u00bc_\u0002\u019d\u019e\u0007\u0013\u0002\u0002\u019e\u019f',
	'\u0005\u00bc_\u0002\u019f\u001b\u0003\u0002\u0002\u0002\u01a0\u01a1',
	'\u0007\u00c1\u0002\u0002\u01a1\u01a2\u0005\u00bc_\u0002\u01a2\u01a3',
	'\u0007\u0013\u0002\u0002\u01a3\u01a4\u0005\u00bc_\u0002\u01a4\u01a5',
	'\u0007+\u0002\u0002\u01a5\u01aa\u0005\u00d4k\u0002\u01a6\u01a7\u0007',
	'\u0013\u0002\u0002\u01a7\u01a9\u0005\u00d4k\u0002\u01a8\u01a6\u0003',
	'\u0002\u0002\u0002\u01a9\u01ac\u0003\u0002\u0002\u0002\u01aa\u01a8\u0003',
	'\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u001d\u0003',
	'\u0002\u0002\u0002\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007',
	'\u00c3\u0002\u0002\u01ae\u01b3\u0005V,\u0002\u01af\u01b0\u0007\u0013',
	'\u0002\u0002\u01b0\u01b2\u0005V,\u0002\u01b1\u01af\u0003\u0002\u0002',
	'\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002\u01b3\u01b1\u0003\u0002\u0002',
	'\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u001f\u0003\u0002\u0002',
	'\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b6\u01b7\t\t\u0002\u0002',
	'\u01b7\u01b8\u0007\u0003\u0002\u0002\u01b8\u01b9\u0005Z.\u0002\u01b9',
	'\u01ba\u0005^0\u0002\u01ba\u01bb\u0007\u0004\u0002\u0002\u01bb\u01c3',
	'\u0003\u0002\u0002\u0002\u01bc\u01bd\t\n\u0002\u0002\u01bd\u01be\u0007',
	'\u0003\u0002\u0002\u01be\u01bf\u0005X-\u0002\u01bf\u01c0\u0005^0\u0002',
	'\u01c0\u01c1\u0007\u0004\u0002\u0002\u01c1\u01c3\u0003\u0002\u0002\u0002',
	'\u01c2\u01b6\u0003\u0002\u0002\u0002\u01c2\u01bc\u0003\u0002\u0002\u0002',
	'\u01c3!\u0003\u0002\u0002\u0002\u01c4\u01c5\u0007q\u0002\u0002\u01c5',
	'\u01c6\u0007p\u0002\u0002\u01c6\u01c7\u0005\u00d0i\u0002\u01c7\u01d0',
	'\u0007\u0003\u0002\u0002\u01c8\u01cd\u0005r:\u0002\u01c9\u01ca\u0007',
	'\u0013\u0002\u0002\u01ca\u01cc\u0005r:\u0002\u01cb\u01c9\u0003\u0002',
	'\u0002\u0002\u01cc\u01cf\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002',
	'\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003\u0002',
	'\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01d0\u01c8\u0003\u0002',
	'\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002',
	'\u0002\u0002\u01d2\u01d5\u0007\u0004\u0002\u0002\u01d3\u01d4\u0007\u00bf',
	'\u0002\u0002\u01d4\u01d6\u0005t;\u0002\u01d5\u01d3\u0003\u0002\u0002',
	'\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002',
	'\u0002\u01d7\u01d8\u0007\u00ae\u0002\u0002\u01d8\u01d9\u0005\u0006\u0004',
	'\u0002\u01d9\u01da\u0007w\u0002\u0002\u01da\u01db\u0007p\u0002\u0002',
	'\u01db\u01f7\u0003\u0002\u0002\u0002\u01dc\u01dd\u0007q\u0002\u0002',
	'\u01dd\u01de\u0007s\u0002\u0002\u01de\u01df\u0007u\u0002\u0002\u01df',
	'\u01e0\u0005\u008aF\u0002\u01e0\u01e1\u0007\u0003\u0002\u0002\u01e1',
	'\u01e2\u0005\u008cG\u0002\u01e2\u01e3\u0007\u0004\u0002\u0002\u01e3',
	'\u01e4\u0007\u00ae\u0002\u0002\u01e4\u01e5\u0005\u0090I\u0002\u01e5',
	'\u01e6\u0007w\u0002\u0002\u01e6\u01e7\u0007s\u0002\u0002\u01e7\u01e8',
	'\u0007u\u0002\u0002\u01e8\u01f7\u0003\u0002\u0002\u0002\u01e9\u01ea',
	'\u0007q\u0002\u0002\u01ea\u01eb\u0007t\u0002\u0002\u01eb\u01ec\u0007',
	'u\u0002\u0002\u01ec\u01ed\u0005\u008aF\u0002\u01ed\u01ee\u0007\u0003',
	'\u0002\u0002\u01ee\u01ef\u0005\u0098M\u0002\u01ef\u01f0\u0007\u0004',
	'\u0002\u0002\u01f0\u01f1\u0007\u00ae\u0002\u0002\u01f1\u01f2\u0005\u0094',
	'K\u0002\u01f2\u01f3\u0007w\u0002\u0002\u01f3\u01f4\u0007t\u0002\u0002',
	'\u01f4\u01f5\u0007u\u0002\u0002\u01f5\u01f7\u0003\u0002\u0002\u0002',
	'\u01f6\u01c4\u0003\u0002\u0002\u0002\u01f6\u01dc\u0003\u0002\u0002\u0002',
	'\u01f6\u01e9\u0003\u0002\u0002\u0002\u01f7#\u0003\u0002\u0002\u0002',
	'\u01f8\u01f9\u0005\u00d0i\u0002\u01f9\u0202\u0007\u0003\u0002\u0002',
	'\u01fa\u01ff\u0005*\u0016\u0002\u01fb\u01fc\u0007\u0013\u0002\u0002',
	'\u01fc\u01fe\u0005*\u0016\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002',
	'\u01fe\u0201\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002',
	'\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0203\u0003\u0002\u0002\u0002',
	'\u0201\u01ff\u0003\u0002\u0002\u0002\u0202\u01fa\u0003\u0002\u0002\u0002',
	'\u0202\u0203\u0003\u0002\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002',
	'\u0204\u0205\u0007\u0004\u0002\u0002\u0205\u0232\u0003\u0002\u0002\u0002',
	'\u0206\u0207\u0007\u0018\u0002\u0002\u0207\u0208\u0007\u0003\u0002\u0002',
	'\u0208\u0209\u0005\u00d2j\u0002\u0209\u020c\u0007\u0003\u0002\u0002',
	'\u020a\u020d\u0005\u00b8]\u0002\u020b\u020d\u0005\u00d4k\u0002\u020c',
	'\u020a\u0003\u0002\u0002\u0002\u020c\u020b\u0003\u0002\u0002\u0002\u020c',
	'\u020d\u0003\u0002\u0002\u0002\u020d\u0215\u0003\u0002\u0002\u0002\u020e',
	'\u0211\u0007\u0013\u0002\u0002\u020f\u0212\u0005\u00b8]\u0002\u0210',
	'\u0212\u0005\u00d4k\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0211',
	'\u0210\u0003\u0002\u0002\u0002\u0212\u0214\u0003\u0002\u0002\u0002\u0213',
	'\u020e\u0003\u0002\u0002\u0002\u0214\u0217\u0003\u0002\u0002\u0002\u0215',
	'\u0213\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216',
	'\u0218\u0003\u0002\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0218',
	'\u021b\u0007\u0004\u0002\u0002\u0219\u021a\u0007\u00e6\u0002\u0002\u021a',
	'\u021c\u0007\u00ea\u0002\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021b',
	'\u021c\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002\u0002\u0002\u021d',
	'\u021e\u0007\u00bf\u0002\u0002\u021e\u0220\u0005\u0080A\u0002\u021f',
	'\u021d\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220',
	'\u0221\u0003\u0002\u0002\u0002\u0221\u0222\u0007\u0004\u0002\u0002\u0222',
	'\u0232\u0003\u0002\u0002\u0002\u0223\u0224\u0007\u00d0\u0002\u0002\u0224',
	'\u0225\u0007\u0003\u0002\u0002\u0225\u0226\u0005\u0006\u0004\u0002\u0226',
	'\u0229\u0007\u0013\u0002\u0002\u0227\u022a\u0005\u00d6l\u0002\u0228',
	'\u022a\u0005\u0088E\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229',
	'\u0228\u0003\u0002\u0002\u0002\u022a\u022d\u0003\u0002\u0002\u0002\u022b',
	'\u022c\u0007\u0013\u0002\u0002\u022c\u022e\u0007\u00ea\u0002\u0002\u022d',
	'\u022b\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022e',
	'\u022f\u0003\u0002\u0002\u0002\u022f\u0230\u0007\u0004\u0002\u0002\u0230',
	'\u0232\u0003\u0002\u0002\u0002\u0231\u01f8\u0003\u0002\u0002\u0002\u0231',
	'\u0206\u0003\u0002\u0002\u0002\u0231\u0223\u0003\u0002\u0002\u0002\u0232',
	'%\u0003\u0002\u0002\u0002\u0233\u0234\u0005\u00d0i\u0002\u0234\u023d',
	'\u0007\u0003\u0002\u0002\u0235\u023a\u0005(\u0015\u0002\u0236\u0237',
	'\u0007\u0013\u0002\u0002\u0237\u0239\u0005(\u0015\u0002\u0238\u0236',
	'\u0003\u0002\u0002\u0002\u0239\u023c\u0003\u0002\u0002\u0002\u023a\u0238',
	'\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b\u023e',
	'\u0003\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023d\u0235',
	'\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e\u023f',
	'\u0003\u0002\u0002\u0002\u023f\u0240\u0007\u0004\u0002\u0002\u0240\u026d',
	'\u0003\u0002\u0002\u0002\u0241\u0242\u0007\u00d0\u0002\u0002\u0242\u0243',
	'\u0007\u0003\u0002\u0002\u0243\u0244\u0005\b\u0005\u0002\u0244\u0247',
	'\u0007\u0013\u0002\u0002\u0245\u0248\u0005\u00d6l\u0002\u0246\u0248',
	'\u0005\u0088E\u0002\u0247\u0245\u0003\u0002\u0002\u0002\u0247\u0246',
	'\u0003\u0002\u0002\u0002\u0248\u024b\u0003\u0002\u0002\u0002\u0249\u024a',
	'\u0007\u0013\u0002\u0002\u024a\u024c\u0007\u00ea\u0002\u0002\u024b\u0249',
	'\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024d',
	'\u0003\u0002\u0002\u0002\u024d\u024e\u0007\u0004\u0002\u0002\u024e\u026d',
	'\u0003\u0002\u0002\u0002\u024f\u0250\u0007\u0018\u0002\u0002\u0250\u0251',
	'\u0007\u0003\u0002\u0002\u0251\u0252\u0005\u00d2j\u0002\u0252\u0255',
	'\u0007\u0003\u0002\u0002\u0253\u0256\u0005\u00bc_\u0002\u0254\u0256',
	'\u0005\u00d4k\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0254',
	'\u0003\u0002\u0002\u0002\u0255\u0256\u0003\u0002\u0002\u0002\u0256\u025e',
	'\u0003\u0002\u0002\u0002\u0257\u025a\u0007\u0013\u0002\u0002\u0258\u025b',
	'\u0005\u00bc_\u0002\u0259\u025b\u0005\u00d4k\u0002\u025a\u0258\u0003',
	'\u0002\u0002\u0002\u025a\u0259\u0003\u0002\u0002\u0002\u025b\u025d\u0003',
	'\u0002\u0002\u0002\u025c\u0257\u0003\u0002\u0002\u0002\u025d\u0260\u0003',
	'\u0002\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025e\u025f\u0003',
	'\u0002\u0002\u0002\u025f\u0261\u0003\u0002\u0002\u0002\u0260\u025e\u0003',
	'\u0002\u0002\u0002\u0261\u0264\u0007\u0004\u0002\u0002\u0262\u0263\u0007',
	'\u00e6\u0002\u0002\u0263\u0265\u0007\u00ea\u0002\u0002\u0264\u0262\u0003',
	'\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0268\u0003',
	'\u0002\u0002\u0002\u0266\u0267\u0007\u00bf\u0002\u0002\u0267\u0269\u0005',
	'v<\u0002\u0268\u0266\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002',
	'\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u026b\u0007\u0004',
	'\u0002\u0002\u026b\u026d\u0003\u0002\u0002\u0002\u026c\u0233\u0003\u0002',
	'\u0002\u0002\u026c\u0241\u0003\u0002\u0002\u0002\u026c\u024f\u0003\u0002',
	"\u0002\u0002\u026d'\u0003\u0002\u0002\u0002\u026e\u0272\u0005\u00bc",
	'_\u0002\u026f\u0272\u0005\u00d4k\u0002\u0270\u0272\u0007i\u0002\u0002',
	'\u0271\u026e\u0003\u0002\u0002\u0002\u0271\u026f\u0003\u0002\u0002\u0002',
	'\u0271\u0270\u0003\u0002\u0002\u0002\u0272)\u0003\u0002\u0002\u0002',
	'\u0273\u0277\u0005\u00b8]\u0002\u0274\u0277\u0005\u00d4k\u0002\u0275',
	'\u0277\u0007i\u0002\u0002\u0276\u0273\u0003\u0002\u0002\u0002\u0276',
	'\u0274\u0003\u0002\u0002\u0002\u0276\u0275\u0003\u0002\u0002\u0002\u0277',
	'+\u0003\u0002\u0002\u0002\u0278\u0279\t\u000b\u0002\u0002\u0279\u027a',
	'\u0007\u0003\u0002\u0002\u027a\u027b\u0005\u0006\u0004\u0002\u027b\u027c',
	'\u0007\u0004\u0002\u0002\u027c\u02a9\u0003\u0002\u0002\u0002\u027d\u027e',
	'\u0007X\u0002\u0002\u027e\u027f\u0007\u0003\u0002\u0002\u027f\u028a',
	'\u0005\u0006\u0004\u0002\u0280\u0281\u0007\u0013\u0002\u0002\u0281\u0282',
	'\u0005\u00c6d\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0284',
	'\u0007\u0013\u0002\u0002\u0284\u0285\u0005\u00c6d\u0002\u0285\u0287',
	'\u0003\u0002\u0002\u0002\u0286\u0280\u0003\u0002\u0002\u0002\u0286\u0287',
	'\u0003\u0002\u0002\u0002\u0287\u028b\u0003\u0002\u0002\u0002\u0288\u0289',
	'\u0007\u0013\u0002\u0002\u0289\u028b\u0005\u00c6d\u0002\u028a\u0286',
	'\u0003\u0002\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028b\u028c',
	'\u0003\u0002\u0002\u0002\u028c\u028d\u0007\u0004\u0002\u0002\u028d\u02a9',
	'\u0003\u0002\u0002\u0002\u028e\u028f\u0007|\u0002\u0002\u028f\u0290',
	'\u0007\u0003\u0002\u0002\u0290\u0291\u0005\u0006\u0004\u0002\u0291\u0292',
	'\u0007\u0013\u0002\u0002\u0292\u0295\u0005\u0006\u0004\u0002\u0293\u0294',
	'\u0007\u0013\u0002\u0002\u0294\u0296\u0005\u00c6d\u0002\u0295\u0293',
	'\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002\u0296\u0297',
	'\u0003\u0002\u0002\u0002\u0297\u0298\u0007\u0004\u0002\u0002\u0298\u02a9',
	'\u0003\u0002\u0002\u0002\u0299\u029a\u0007{\u0002\u0002\u029a\u029b',
	'\u0007\u0003\u0002\u0002\u029b\u029c\u0005\u0006\u0004\u0002\u029c\u029d',
	'\u0007\u0013\u0002\u0002\u029d\u02a0\u0005\u0006\u0004\u0002\u029e\u029f',
	'\u0007\u0013\u0002\u0002\u029f\u02a1\u0005\u00c6d\u0002\u02a0\u029e',
	'\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002\u02a1\u02a4',
	'\u0003\u0002\u0002\u0002\u02a2\u02a3\u0007\u0013\u0002\u0002\u02a3\u02a5',
	'\u0005\u00c6d\u0002\u02a4\u02a2\u0003\u0002\u0002\u0002\u02a4\u02a5',
	'\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a7',
	'\u0007\u0004\u0002\u0002\u02a7\u02a9\u0003\u0002\u0002\u0002\u02a8\u0278',
	'\u0003\u0002\u0002\u0002\u02a8\u027d\u0003\u0002\u0002\u0002\u02a8\u028e',
	'\u0003\u0002\u0002\u0002\u02a8\u0299\u0003\u0002\u0002\u0002\u02a9-',
	'\u0003\u0002\u0002\u0002\u02aa\u02ab\t\u000b\u0002\u0002\u02ab\u02ac',
	'\u0007\u0003\u0002\u0002\u02ac\u02ad\u0005\b\u0005\u0002\u02ad\u02ae',
	'\u0007\u0004\u0002\u0002\u02ae\u02db\u0003\u0002\u0002\u0002\u02af\u02b0',
	'\u0007X\u0002\u0002\u02b0\u02b1\u0007\u0003\u0002\u0002\u02b1\u02bc',
	'\u0005\b\u0005\u0002\u02b2\u02b3\u0007\u0013\u0002\u0002\u02b3\u02b4',
	'\u0005\u00c8e\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b6',
	'\u0007\u0013\u0002\u0002\u02b6\u02b7\u0005\u00c8e\u0002\u02b7\u02b9',
	'\u0003\u0002\u0002\u0002\u02b8\u02b2\u0003\u0002\u0002\u0002\u02b8\u02b9',
	'\u0003\u0002\u0002\u0002\u02b9\u02bd\u0003\u0002\u0002\u0002\u02ba\u02bb',
	'\u0007\u0013\u0002\u0002\u02bb\u02bd\u0005\u00c8e\u0002\u02bc\u02b8',
	'\u0003\u0002\u0002\u0002\u02bc\u02ba\u0003\u0002\u0002\u0002\u02bd\u02be',
	'\u0003\u0002\u0002\u0002\u02be\u02bf\u0007\u0004\u0002\u0002\u02bf\u02db',
	'\u0003\u0002\u0002\u0002\u02c0\u02c1\u0007|\u0002\u0002\u02c1\u02c2',
	'\u0007\u0003\u0002\u0002\u02c2\u02c3\u0005\b\u0005\u0002\u02c3\u02c4',
	'\u0007\u0013\u0002\u0002\u02c4\u02c7\u0005\b\u0005\u0002\u02c5\u02c6',
	'\u0007\u0013\u0002\u0002\u02c6\u02c8\u0005\u00c8e\u0002\u02c7\u02c5',
	'\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02c9',
	'\u0003\u0002\u0002\u0002\u02c9\u02ca\u0007\u0004\u0002\u0002\u02ca\u02db',
	'\u0003\u0002\u0002\u0002\u02cb\u02cc\u0007{\u0002\u0002\u02cc\u02cd',
	'\u0007\u0003\u0002\u0002\u02cd\u02ce\u0005\b\u0005\u0002\u02ce\u02cf',
	'\u0007\u0013\u0002\u0002\u02cf\u02d2\u0005\b\u0005\u0002\u02d0\u02d1',
	'\u0007\u0013\u0002\u0002\u02d1\u02d3\u0005\u00c8e\u0002\u02d2\u02d0',
	'\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d6',
	'\u0003\u0002\u0002\u0002\u02d4\u02d5\u0007\u0013\u0002\u0002\u02d5\u02d7',
	'\u0005\u00c8e\u0002\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d7',
	'\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002\u0002\u0002\u02d8\u02d9',
	'\u0007\u0004\u0002\u0002\u02d9\u02db\u0003\u0002\u0002\u0002\u02da\u02aa',
	'\u0003\u0002\u0002\u0002\u02da\u02af\u0003\u0002\u0002\u0002\u02da\u02c0',
	'\u0003\u0002\u0002\u0002\u02da\u02cb\u0003\u0002\u0002\u0002\u02db/',
	'\u0003\u0002\u0002\u0002\u02dc\u02dd\t\f\u0002\u0002\u02dd\u02de\u0007',
	'\u0003\u0002\u0002\u02de\u02df\u0005\u0006\u0004\u0002\u02df\u02e0\u0007',
	'\u0004\u0002\u0002\u02e0\u02f2\u0003\u0002\u0002\u0002\u02e1\u02e2\t',
	'\r\u0002\u0002\u02e2\u02e3\u0007\u0003\u0002\u0002\u02e3\u02e6\u0005',
	'\u0006\u0004\u0002\u02e4\u02e5\u0007\u0013\u0002\u0002\u02e5\u02e7\u0005',
	'\u00c6d\u0002\u02e6\u02e4\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003',
	'\u0002\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u02e9\u0007',
	'\u0004\u0002\u0002\u02e9\u02f2\u0003\u0002\u0002\u0002\u02ea\u02eb\t',
	'\u000e\u0002\u0002\u02eb\u02ec\u0007\u0003\u0002\u0002\u02ec\u02ed\u0005',
	'\u0006\u0004\u0002\u02ed\u02ee\u0007\u0013\u0002\u0002\u02ee\u02ef\u0005',
	'\u0006\u0004\u0002\u02ef\u02f0\u0007\u0004\u0002\u0002\u02f0\u02f2\u0003',
	'\u0002\u0002\u0002\u02f1\u02dc\u0003\u0002\u0002\u0002\u02f1\u02e1\u0003',
	'\u0002\u0002\u0002\u02f1\u02ea\u0003\u0002\u0002\u0002\u02f21\u0003',
	'\u0002\u0002\u0002\u02f3\u02f4\t\f\u0002\u0002\u02f4\u02f5\u0007\u0003',
	'\u0002\u0002\u02f5\u02f6\u0005\b\u0005\u0002\u02f6\u02f7\u0007\u0004',
	'\u0002\u0002\u02f7\u0309\u0003\u0002\u0002\u0002\u02f8\u02f9\t\r\u0002',
	'\u0002\u02f9\u02fa\u0007\u0003\u0002\u0002\u02fa\u02fd\u0005\b\u0005',
	'\u0002\u02fb\u02fc\u0007\u0013\u0002\u0002\u02fc\u02fe\u0005\u00c8e',
	'\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002',
	'\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff\u0300\u0007\u0004\u0002',
	'\u0002\u0300\u0309\u0003\u0002\u0002\u0002\u0301\u0302\t\u000e\u0002',
	'\u0002\u0302\u0303\u0007\u0003\u0002\u0002\u0303\u0304\u0005\b\u0005',
	'\u0002\u0304\u0305\u0007\u0013\u0002\u0002\u0305\u0306\u0005\b\u0005',
	'\u0002\u0306\u0307\u0007\u0004\u0002\u0002\u0307\u0309\u0003\u0002\u0002',
	'\u0002\u0308\u02f3\u0003\u0002\u0002\u0002\u0308\u02f8\u0003\u0002\u0002',
	'\u0002\u0308\u0301\u0003\u0002\u0002\u0002\u03093\u0003\u0002\u0002',
	'\u0002\u030a\u030b\u0007*\u0002\u0002\u030b\u030c\u0007\u0003\u0002',
	'\u0002\u030c\u030d\u0005\u0006\u0004\u0002\u030d\u030e\u0007\u0013\u0002',
	'\u0002\u030e\u030f\u0005\u0006\u0004\u0002\u030f\u0310\u0007\u0013\u0002',
	'\u0002\u0310\u0311\u0005\u0006\u0004\u0002\u0311\u0312\u0007\u0004\u0002',
	'\u0002\u0312\u032b\u0003\u0002\u0002\u0002\u0313\u0314\u0007e\u0002',
	'\u0002\u0314\u0315\u0007\u0003\u0002\u0002\u0315\u0316\u0005\u0006\u0004',
	'\u0002\u0316\u0317\u0007\u0013\u0002\u0002\u0317\u0318\u0005\u0006\u0004',
	'\u0002\u0318\u0319\u0007\u0004\u0002\u0002\u0319\u032b\u0003\u0002\u0002',
	'\u0002\u031a\u031b\u0007.\u0002\u0002\u031b\u031c\u0007\u0003\u0002',
	'\u0002\u031c\u031d\u0005\u0006\u0004\u0002\u031d\u031e\u0007\u0004\u0002',
	'\u0002\u031e\u032b\u0003\u0002\u0002\u0002\u031f\u0320\u00079\u0002',
	'\u0002\u0320\u0321\u0007\u0003\u0002\u0002\u0321\u0322\u0005\u0006\u0004',
	'\u0002\u0322\u0323\u0007\u0013\u0002\u0002\u0323\u0326\u0005\u0006\u0004',
	'\u0002\u0324\u0325\u0007\u0013\u0002\u0002\u0325\u0327\u0005\u00d8m',
	'\u0002\u0326\u0324\u0003\u0002\u0002\u0002\u0326\u0327\u0003\u0002\u0002',
	'\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u0329\u0007\u0004\u0002',
	'\u0002\u0329\u032b\u0003\u0002\u0002\u0002\u032a\u030a\u0003\u0002\u0002',
	'\u0002\u032a\u0313\u0003\u0002\u0002\u0002\u032a\u031a\u0003\u0002\u0002',
	'\u0002\u032a\u031f\u0003\u0002\u0002\u0002\u032b5\u0003\u0002\u0002',
	'\u0002\u032c\u032d\u0007*\u0002\u0002\u032d\u032e\u0007\u0003\u0002',
	'\u0002\u032e\u032f\u0005\b\u0005\u0002\u032f\u0330\u0007\u0013\u0002',
	'\u0002\u0330\u0331\u0005\b\u0005\u0002\u0331\u0332\u0007\u0013\u0002',
	'\u0002\u0332\u0333\u0005\b\u0005\u0002\u0333\u0334\u0007\u0004\u0002',
	'\u0002\u0334\u0342\u0003\u0002\u0002\u0002\u0335\u0336\u0007e\u0002',
	'\u0002\u0336\u0337\u0007\u0003\u0002\u0002\u0337\u0338\u0005\b\u0005',
	'\u0002\u0338\u0339\u0007\u0013\u0002\u0002\u0339\u033a\u0005\b\u0005',
	'\u0002\u033a\u033b\u0007\u0004\u0002\u0002\u033b\u0342\u0003\u0002\u0002',
	'\u0002\u033c\u033d\u0007.\u0002\u0002\u033d\u033e\u0007\u0003\u0002',
	'\u0002\u033e\u033f\u0005\b\u0005\u0002\u033f\u0340\u0007\u0004\u0002',
	'\u0002\u0340\u0342\u0003\u0002\u0002\u0002\u0341\u032c\u0003\u0002\u0002',
	'\u0002\u0341\u0335\u0003\u0002\u0002\u0002\u0341\u033c\u0003\u0002\u0002',
	'\u0002\u03427\u0003\u0002\u0002\u0002\u0343\u0344\u0007\u00c6\u0002',
	'\u0002\u0344\u0346\u0007\u0003\u0002\u0002\u0345\u0347\u0005\u0006\u0004',
	'\u0002\u0346\u0345\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002\u0002',
	'\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0372\u0007\u0004\u0002',
	'\u0002\u0349\u034a\u0007\u0097\u0002\u0002\u034a\u034b\u0007\u0003\u0002',
	'\u0002\u034b\u034e\u0005\u0006\u0004\u0002\u034c\u034d\u0007\u0013\u0002',
	'\u0002\u034d\u034f\t\u000f\u0002\u0002\u034e\u034c\u0003\u0002\u0002',
	'\u0002\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002\u0002',
	'\u0002\u0350\u0351\u0007\u0004\u0002\u0002\u0351\u0372\u0003\u0002\u0002',
	'\u0002\u0352\u0353\t\u0010\u0002\u0002\u0353\u0354\u0007\u0003\u0002',
	'\u0002\u0354\u0355\u0005\u0006\u0004\u0002\u0355\u0356\u0007\u0004\u0002',
	'\u0002\u0356\u0372\u0003\u0002\u0002\u0002\u0357\u0358\u0007\u009a\u0002',
	'\u0002\u0358\u0359\u0007\u0003\u0002\u0002\u0359\u035a\u0005\u0006\u0004',
	'\u0002\u035a\u035b\u0007\u0013\u0002\u0002\u035b\u035c\u0005j6\u0002',
	'\u035c\u035d\u0007\u0004\u0002\u0002\u035d\u0372\u0003\u0002\u0002\u0002',
	'\u035e\u035f\u0007\u00c9\u0002\u0002\u035f\u0360\u0007\u0003\u0002\u0002',
	'\u0360\u0363\u0007\u00ea\u0002\u0002\u0361\u0362\u0007\u0013\u0002\u0002',
	'\u0362\u0364\t\u0011\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002',
	'\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u0367\u0003\u0002\u0002\u0002',
	'\u0365\u0366\u0007\u0013\u0002\u0002\u0366\u0368\u0005\u00c6d\u0002',
	'\u0367\u0365\u0003\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002',
	'\u0368\u036b\u0003\u0002\u0002\u0002\u0369\u036a\u0007\u0013\u0002\u0002',
	'\u036a\u036c\t\u0012\u0002\u0002\u036b\u0369\u0003\u0002\u0002\u0002',
	'\u036b\u036c\u0003\u0002\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002',
	'\u036d\u0372\u0007\u0004\u0002\u0002\u036e\u036f\u0007\u001e\u0002\u0002',
	'\u036f\u0370\u0007\u0003\u0002\u0002\u0370\u0372\u0007\u0004\u0002\u0002',
	'\u0371\u0343\u0003\u0002\u0002\u0002\u0371\u0349\u0003\u0002\u0002\u0002',
	'\u0371\u0352\u0003\u0002\u0002\u0002\u0371\u0357\u0003\u0002\u0002\u0002',
	'\u0371\u035e\u0003\u0002\u0002\u0002\u0371\u036e\u0003\u0002\u0002\u0002',
	'\u03729\u0003\u0002\u0002\u0002\u0373\u0374\u0007\u00c6\u0002\u0002',
	'\u0374\u0376\u0007\u0003\u0002\u0002\u0375\u0377\u0005\b\u0005\u0002',
	'\u0376\u0375\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002',
	'\u0377\u0378\u0003\u0002\u0002\u0002\u0378\u03a2\u0007\u0004\u0002\u0002',
	'\u0379\u037a\u0007\u0097\u0002\u0002\u037a\u037b\u0007\u0003\u0002\u0002',
	'\u037b\u037e\u0005\b\u0005\u0002\u037c\u037d\u0007\u0013\u0002\u0002',
	'\u037d\u037f\t\u000f\u0002\u0002\u037e\u037c\u0003\u0002\u0002\u0002',
	'\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u0380\u0003\u0002\u0002\u0002',
	'\u0380\u0381\u0007\u0004\u0002\u0002\u0381\u03a2\u0003\u0002\u0002\u0002',
	'\u0382\u0383\t\u0010\u0002\u0002\u0383\u0384\u0007\u0003\u0002\u0002',
	'\u0384\u0385\u0005\b\u0005\u0002\u0385\u0386\u0007\u0004\u0002\u0002',
	'\u0386\u03a2\u0003\u0002\u0002\u0002\u0387\u0388\u0007\u009a\u0002\u0002',
	'\u0388\u0389\u0007\u0003\u0002\u0002\u0389\u038a\u0005\b\u0005\u0002',
	'\u038a\u038b\u0007\u0013\u0002\u0002\u038b\u038c\u0005j6\u0002\u038c',
	'\u038d\u0007\u0004\u0002\u0002\u038d\u03a2\u0003\u0002\u0002\u0002\u038e',
	'\u038f\u0007\u00c9\u0002\u0002\u038f\u0390\u0007\u0003\u0002\u0002\u0390',
	'\u0393\u0007\u00ea\u0002\u0002\u0391\u0392\u0007\u0013\u0002\u0002\u0392',
	'\u0394\t\u0011\u0002\u0002\u0393\u0391\u0003\u0002\u0002\u0002\u0393',
	'\u0394\u0003\u0002\u0002\u0002\u0394\u0397\u0003\u0002\u0002\u0002\u0395',
	'\u0396\u0007\u0013\u0002\u0002\u0396\u0398\u0005\u00c8e\u0002\u0397',
	'\u0395\u0003\u0002\u0002\u0002\u0397\u0398\u0003\u0002\u0002\u0002\u0398',
	'\u039b\u0003\u0002\u0002\u0002\u0399\u039a\u0007\u0013\u0002\u0002\u039a',
	'\u039c\t\u0012\u0002\u0002\u039b\u0399\u0003\u0002\u0002\u0002\u039b',
	'\u039c\u0003\u0002\u0002\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039d',
	'\u03a2\u0007\u0004\u0002\u0002\u039e\u039f\u0007\u001e\u0002\u0002\u039f',
	'\u03a0\u0007\u0003\u0002\u0002\u03a0\u03a2\u0007\u0004\u0002\u0002\u03a1',
	'\u0373\u0003\u0002\u0002\u0002\u03a1\u0379\u0003\u0002\u0002\u0002\u03a1',
	'\u0382\u0003\u0002\u0002\u0002\u03a1\u0387\u0003\u0002\u0002\u0002\u03a1',
	'\u038e\u0003\u0002\u0002\u0002\u03a1\u039e\u0003\u0002\u0002\u0002\u03a2',
	';\u0003\u0002\u0002\u0002\u03a3\u03a4\u00070\u0002\u0002\u03a4\u03a5',
	'\u0007\u0003\u0002\u0002\u03a5\u03a8\u0005\u0006\u0004\u0002\u03a6\u03a7',
	'\u0007\u0013\u0002\u0002\u03a7\u03a9\u0005\u0006\u0004\u0002\u03a8\u03a6',
	'\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03a8',
	'\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab\u03ac',
	'\u0003\u0002\u0002\u0002\u03ac\u03ad\u0007\u0004\u0002\u0002\u03ad\u03c1',
	'\u0003\u0002\u0002\u0002\u03ae\u03af\u00073\u0002\u0002\u03af\u03b0',
	'\u0007\u0003\u0002\u0002\u03b0\u03b3\u0005\u0006\u0004\u0002\u03b1\u03b2',
	'\u0007\u0013\u0002\u0002\u03b2\u03b4\u0005\u0006\u0004\u0002\u03b3\u03b1',
	'\u0003\u0002\u0002\u0002\u03b4\u03b5\u0003\u0002\u0002\u0002\u03b5\u03b3',
	'\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b7',
	'\u0003\u0002\u0002\u0002\u03b7\u03b8\u0007\u0004\u0002\u0002\u03b8\u03c1',
	'\u0003\u0002\u0002\u0002\u03b9\u03ba\t\u0013\u0002\u0002\u03ba\u03bb',
	'\u0007\u0003\u0002\u0002\u03bb\u03bc\u0005\u0006\u0004\u0002\u03bc\u03bd',
	'\u0007\u0013\u0002\u0002\u03bd\u03be\u0005\u0006\u0004\u0002\u03be\u03bf',
	'\u0007\u0004\u0002\u0002\u03bf\u03c1\u0003\u0002\u0002\u0002\u03c0\u03a3',
	'\u0003\u0002\u0002\u0002\u03c0\u03ae\u0003\u0002\u0002\u0002\u03c0\u03b9',
	'\u0003\u0002\u0002\u0002\u03c1=\u0003\u0002\u0002\u0002\u03c2\u03c3',
	'\u0007h\u0002\u0002\u03c3\u03c4\u0007\u0003\u0002\u0002\u03c4\u03c5',
	'\u0005\u0006\u0004\u0002\u03c5\u03c6\u0007\u0013\u0002\u0002\u03c6\u03c8',
	'\u0007\u00eb\u0002\u0002\u03c7\u03c9\u0005\u00acW\u0002\u03c8\u03c7',
	'\u0003\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9\u03cc',
	'\u0003\u0002\u0002\u0002\u03ca\u03cb\u0007v\u0002\u0002\u03cb\u03cd',
	'\u0005\u00bc_\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cd',
	'\u0003\u0002\u0002\u0002\u03cd\u03cf\u0003\u0002\u0002\u0002\u03ce\u03d0',
	'\u0005\u00aaV\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002\u03cf\u03d0',
	'\u0003\u0002\u0002\u0002\u03d0\u03d2\u0003\u0002\u0002\u0002\u03d1\u03d3',
	'\u0005\u00b2Z\u0002\u03d2\u03d1\u0003\u0002\u0002\u0002\u03d2\u03d3',
	'\u0003\u0002\u0002\u0002\u03d3\u03d5\u0003\u0002\u0002\u0002\u03d4\u03d6',
	'\u0005\u00b4[\u0002\u03d5\u03d4\u0003\u0002\u0002\u0002\u03d5\u03d6',
	'\u0003\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7\u03d8',
	'\u0007\u0004\u0002\u0002\u03d8?\u0003\u0002\u0002\u0002\u03d9\u03da',
	'\u0007\u00d4\u0002\u0002\u03da\u03db\u0007\u0003\u0002\u0002\u03db\u03dc',
	'\u0005\u0006\u0004\u0002\u03dc\u03dd\u0007\u0013\u0002\u0002\u03dd\u03e7',
	'\u0007\u00eb\u0002\u0002\u03de\u03df\u0007\u00dd\u0002\u0002\u03df\u03e4',
	'\u0005\u00bc_\u0002\u03e0\u03e1\u0007\u0013\u0002\u0002\u03e1\u03e3',
	'\u0005\u00bc_\u0002\u03e2\u03e0\u0003\u0002\u0002\u0002\u03e3\u03e6',
	'\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002\u03e4\u03e5',
	'\u0003\u0002\u0002\u0002\u03e5\u03e8\u0003\u0002\u0002\u0002\u03e6\u03e4',
	'\u0003\u0002\u0002\u0002\u03e7\u03de\u0003\u0002\u0002\u0002\u03e7\u03e8',
	'\u0003\u0002\u0002\u0002\u03e8\u03ea\u0003\u0002\u0002\u0002\u03e9\u03eb',
	'\u0005\u00a8U\u0002\u03ea\u03e9\u0003\u0002\u0002\u0002\u03ea\u03eb',
	'\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ed',
	'\u0007\u0004\u0002\u0002\u03ed\u0417\u0003\u0002\u0002\u0002\u03ee\u03ef',
	'\u0007\u00d5\u0002\u0002\u03ef\u03f0\u0007\u0003\u0002\u0002\u03f0\u03f1',
	'\u0005\u0006\u0004\u0002\u03f1\u03f2\u0007\u0013\u0002\u0002\u03f2\u03f4',
	'\u0007\u00eb\u0002\u0002\u03f3\u03f5\u0005\u00acW\u0002\u03f4\u03f3',
	'\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f8',
	'\u0003\u0002\u0002\u0002\u03f6\u03f7\u0007v\u0002\u0002\u03f7\u03f9',
	'\u0005\u00bc_\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8\u03f9',
	'\u0003\u0002\u0002\u0002\u03f9\u03fb\u0003\u0002\u0002\u0002\u03fa\u03fc',
	'\u0005\u00aaV\u0002\u03fb\u03fa\u0003\u0002\u0002\u0002\u03fb\u03fc',
	'\u0003\u0002\u0002\u0002\u03fc\u03fe\u0003\u0002\u0002\u0002\u03fd\u03ff',
	'\u0005\u00aeX\u0002\u03fe\u03fd\u0003\u0002\u0002\u0002\u03fe\u03ff',
	'\u0003\u0002\u0002\u0002\u03ff\u0401\u0003\u0002\u0002\u0002\u0400\u0402',
	'\u0005\u00a8U\u0002\u0401\u0400\u0003\u0002\u0002\u0002\u0401\u0402',
	'\u0003\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0403\u0404',
	'\u0007\u0004\u0002\u0002\u0404\u0417\u0003\u0002\u0002\u0002\u0405\u0406',
	'\u00078\u0002\u0002\u0406\u0407\u0007\u0003\u0002\u0002\u0407\u0409',
	'\u0005\u0006\u0004\u0002\u0408\u040a\u0005\u00c0a\u0002\u0409\u0408',
	'\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002\u0002\u040a\u040c',
	'\u0003\u0002\u0002\u0002\u040b\u040d\u0005\u00c2b\u0002\u040c\u040b',
	'\u0003\u0002\u0002\u0002\u040c\u040d\u0003\u0002\u0002\u0002\u040d\u040f',
	'\u0003\u0002\u0002\u0002\u040e\u0410\u0005\u00b0Y\u0002\u040f\u040e',
	'\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0412',
	'\u0003\u0002\u0002\u0002\u0411\u0413\t\u0014\u0002\u0002\u0412\u0411',
	'\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002\u0413\u0414',
	'\u0003\u0002\u0002\u0002\u0414\u0415\u0007\u0004\u0002\u0002\u0415\u0417',
	'\u0003\u0002\u0002\u0002\u0416\u03d9\u0003\u0002\u0002\u0002\u0416\u03ee',
	'\u0003\u0002\u0002\u0002\u0416\u0405\u0003\u0002\u0002\u0002\u0417A',
	'\u0003\u0002\u0002\u0002\u0418\u0419\u0007g\u0002\u0002\u0419\u041a',
	'\u0007\u0003\u0002\u0002\u041a\u041b\u0005\u0006\u0004\u0002\u041b\u041c',
	'\u0007\u0013\u0002\u0002\u041c\u041d\u0005\u0006\u0004\u0002\u041d\u041e',
	'\u0007\u0004\u0002\u0002\u041eC\u0003\u0002\u0002\u0002\u041f\u0420',
	'\u0007g\u0002\u0002\u0420\u0421\u0007\u0003\u0002\u0002\u0421\u0422',
	'\u0005\b\u0005\u0002\u0422\u0423\u0007\u0013\u0002\u0002\u0423\u0424',
	'\u0005\b\u0005\u0002\u0424\u0425\u0007\u0004\u0002\u0002\u0425E\u0003',
	'\u0002\u0002\u0002\u0426\u0427\t\u0015\u0002\u0002\u0427\u0428\u0007',
	'\u0003\u0002\u0002\u0428\u0429\u0005\b\u0005\u0002\u0429\u042a\u0007',
	'\u0004\u0002\u0002\u042a\u042f\u0003\u0002\u0002\u0002\u042b\u042c\u0007',
	'\\\u0002\u0002\u042c\u042d\u0007\u0003\u0002\u0002\u042d\u042f\u0007',
	'\u0004\u0002\u0002\u042e\u0426\u0003\u0002\u0002\u0002\u042e\u042b\u0003',
	'\u0002\u0002\u0002\u042fG\u0003\u0002\u0002\u0002\u0430\u0431\t\u0015',
	'\u0002\u0002\u0431\u0432\u0007\u0003\u0002\u0002\u0432\u0437\u0005\u0006',
	'\u0004\u0002\u0433\u0435\u0005n8\u0002\u0434\u0436\u0005p9\u0002\u0435',
	'\u0434\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002\u0436',
	'\u0438\u0003\u0002\u0002\u0002\u0437\u0433\u0003\u0002\u0002\u0002\u0437',
	'\u0438\u0003\u0002\u0002\u0002\u0438\u0439\u0003\u0002\u0002\u0002\u0439',
	'\u043a\u0007\u0004\u0002\u0002\u043aI\u0003\u0002\u0002\u0002\u043b',
	'\u043c\t\u0016\u0002\u0002\u043c\u043d\u0007\u0003\u0002\u0002\u043d',
	'\u043e\u0005\u0006\u0004\u0002\u043e\u043f\u0007\u008e\u0002\u0002\u043f',
	'\u0441\u0007\u0003\u0002\u0002\u0440\u0442\u0005b2\u0002\u0441\u0440',
	'\u0003\u0002\u0002\u0002\u0441\u0442\u0003\u0002\u0002\u0002\u0442\u0444',
	'\u0003\u0002\u0002\u0002\u0443\u0445\u0005d3\u0002\u0444\u0443\u0003',
	'\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u0447\u0003',
	'\u0002\u0002\u0002\u0446\u0448\u0005h5\u0002\u0447\u0446\u0003\u0002',
	'\u0002\u0002\u0447\u0448\u0003\u0002\u0002\u0002\u0448\u0449\u0003\u0002',
	'\u0002\u0002\u0449\u044a\u0007\u0004\u0002\u0002\u044a\u044b\u0007\u0004',
	'\u0002\u0002\u044b\u046a\u0003\u0002\u0002\u0002\u044c\u044d\t\u0017',
	'\u0002\u0002\u044d\u044e\u0007\u0003\u0002\u0002\u044e\u0454\u0005\u0006',
	'\u0004\u0002\u044f\u0450\u0007\u0013\u0002\u0002\u0450\u0452\u0005j',
	'6\u0002\u0451\u0453\u0005\u00d4k\u0002\u0452\u0451\u0003\u0002\u0002',
	'\u0002\u0452\u0453\u0003\u0002\u0002\u0002\u0453\u0455\u0003\u0002\u0002',
	'\u0002\u0454\u044f\u0003\u0002\u0002\u0002\u0454\u0455\u0003\u0002\u0002',
	'\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u0457\u0007\u008e\u0002',
	'\u0002\u0457\u0459\u0007\u0003\u0002\u0002\u0458\u045a\u0005b2\u0002',
	'\u0459\u0458\u0003\u0002\u0002\u0002\u0459\u045a\u0003\u0002\u0002\u0002',
	'\u045a\u045b\u0003\u0002\u0002\u0002\u045b\u045c\u0005d3\u0002\u045c',
	'\u045d\u0003\u0002\u0002\u0002\u045d\u045e\u0007\u0004\u0002\u0002\u045e',
	'\u045f\u0007\u0004\u0002\u0002\u045f\u046a\u0003\u0002\u0002\u0002\u0460',
	'\u0461\u0007\u008d\u0002\u0002\u0461\u0462\u0007\u0003\u0002\u0002\u0462',
	'\u0463\u0005\u0006\u0004\u0002\u0463\u0464\u0007\u008e\u0002\u0002\u0464',
	'\u0465\u0007\u0003\u0002\u0002\u0465\u0466\u0005b2\u0002\u0466\u0467',
	'\u0007\u0004\u0002\u0002\u0467\u0468\u0007\u0004\u0002\u0002\u0468\u046a',
	'\u0003\u0002\u0002\u0002\u0469\u043b\u0003\u0002\u0002\u0002\u0469\u044c',
	'\u0003\u0002\u0002\u0002\u0469\u0460\u0003\u0002\u0002\u0002\u046aK',
	'\u0003\u0002\u0002\u0002\u046b\u046c\t\u0016\u0002\u0002\u046c\u046d',
	'\u0007\u0003\u0002\u0002\u046d\u046e\u0005\b\u0005\u0002\u046e\u046f',
	'\u0007\u008e\u0002\u0002\u046f\u0471\u0007\u0003\u0002\u0002\u0470\u0472',
	'\u0005b2\u0002\u0471\u0470\u0003\u0002\u0002\u0002\u0471\u0472\u0003',
	'\u0002\u0002\u0002\u0472\u0474\u0003\u0002\u0002\u0002\u0473\u0475\u0005',
	'd3\u0002\u0474\u0473\u0003\u0002\u0002\u0002\u0474\u0475\u0003\u0002',
	'\u0002\u0002\u0475\u0477\u0003\u0002\u0002\u0002\u0476\u0478\u0005h',
	'5\u0002\u0477\u0476\u0003\u0002\u0002\u0002\u0477\u0478\u0003\u0002',
	'\u0002\u0002\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u047a\u0007\u0004',
	'\u0002\u0002\u047a\u047b\u0007\u0004\u0002\u0002\u047b\u04a6\u0003\u0002',
	'\u0002\u0002\u047c\u047d\t\u0017\u0002\u0002\u047d\u047e\u0007\u0003',
	'\u0002\u0002\u047e\u0484\u0005\b\u0005\u0002\u047f\u0480\u0007\u0013',
	'\u0002\u0002\u0480\u0482\u0005j6\u0002\u0481\u0483\u0005\u00d4k\u0002',
	'\u0482\u0481\u0003\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002',
	'\u0483\u0485\u0003\u0002\u0002\u0002\u0484\u047f\u0003\u0002\u0002\u0002',
	'\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u0486\u0003\u0002\u0002\u0002',
	'\u0486\u0487\u0007\u008e\u0002\u0002\u0487\u0489\u0007\u0003\u0002\u0002',
	'\u0488\u048a\u0005b2\u0002\u0489\u0488\u0003\u0002\u0002\u0002\u0489',
	'\u048a\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002\u0002\u0002\u048b',
	'\u048c\u0005d3\u0002\u048c\u048d\u0003\u0002\u0002\u0002\u048d\u048e',
	'\u0007\u0004\u0002\u0002\u048e\u048f\u0007\u0004\u0002\u0002\u048f\u04a6',
	'\u0003\u0002\u0002\u0002\u0490\u0491\u0007C\u0002\u0002\u0491\u0492',
	'\u0007\u0003\u0002\u0002\u0492\u0493\u0007\u008e\u0002\u0002\u0493\u0495',
	'\u0007\u0003\u0002\u0002\u0494\u0496\u0005b2\u0002\u0495\u0494\u0003',
	'\u0002\u0002\u0002\u0495\u0496\u0003\u0002\u0002\u0002\u0496\u0497\u0003',
	'\u0002\u0002\u0002\u0497\u0498\u0005d3\u0002\u0498\u0499\u0003\u0002',
	'\u0002\u0002\u0499\u049a\u0007\u0004\u0002\u0002\u049a\u049b\u0007\u0004',
	'\u0002\u0002\u049b\u04a6\u0003\u0002\u0002\u0002\u049c\u049d\u0007\u008d',
	'\u0002\u0002\u049d\u049e\u0007\u0003\u0002\u0002\u049e\u049f\u0005\b',
	'\u0005\u0002\u049f\u04a0\u0007\u008e\u0002\u0002\u04a0\u04a1\u0007\u0003',
	'\u0002\u0002\u04a1\u04a2\u0005b2\u0002\u04a2\u04a3\u0007\u0004\u0002',
	'\u0002\u04a3\u04a4\u0007\u0004\u0002\u0002\u04a4\u04a6\u0003\u0002\u0002',
	'\u0002\u04a5\u046b\u0003\u0002\u0002\u0002\u04a5\u047c\u0003\u0002\u0002',
	'\u0002\u04a5\u0490\u0003\u0002\u0002\u0002\u04a5\u049c\u0003\u0002\u0002',
	'\u0002\u04a6M\u0003\u0002\u0002\u0002\u04a7\u04a8\u0005\u00bc_\u0002',
	'\u04a8\u04a9\u0007:\u0002\u0002\u04a9\u04aa\u0005\u00bc_\u0002\u04aa',
	'O\u0003\u0002\u0002\u0002\u04ab\u04b0\u0005R*\u0002\u04ac\u04ad\u0007',
	'\u0013\u0002\u0002\u04ad\u04af\u0005R*\u0002\u04ae\u04ac\u0003\u0002',
	'\u0002\u0002\u04af\u04b2\u0003\u0002\u0002\u0002\u04b0\u04ae\u0003\u0002',
	'\u0002\u0002\u04b0\u04b1\u0003\u0002\u0002\u0002\u04b1Q\u0003\u0002',
	'\u0002\u0002\u04b2\u04b0\u0003\u0002\u0002\u0002\u04b3\u04b5\u0005\u00ca',
	'f\u0002\u04b4\u04b3\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002',
	'\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7\u0005\u00bc',
	'_\u0002\u04b7\u04b8\u0007\u0016\u0002\u0002\u04b8\u04b9\u0005F$\u0002',
	'\u04b9S\u0003\u0002\u0002\u0002\u04ba\u04bc\u0005\u00caf\u0002\u04bb',
	'\u04ba\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc',
	'\u04bd\u0003\u0002\u0002\u0002\u04bd\u04be\u0005\u00bc_\u0002\u04be',
	'\u04bf\u0007\u0016\u0002\u0002\u04bf\u04c0\u0005\b\u0005\u0002\u04c0',
	'U\u0003\u0002\u0002\u0002\u04c1\u04c2\u0005\u00bc_\u0002\u04c2\u04c3',
	'\u0007\t\u0002\u0002\u04c3\u04c4\u0005\u00d4k\u0002\u04c4W\u0003\u0002',
	'\u0002\u0002\u04c5\u04ca\u0005\\/\u0002\u04c6\u04c7\u0007\u0013\u0002',
	'\u0002\u04c7\u04c9\u0005\\/\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002',
	'\u04c9\u04cc\u0003\u0002\u0002\u0002\u04ca\u04c8\u0003\u0002\u0002\u0002',
	'\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cbY\u0003\u0002\u0002\u0002',
	'\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cd\u04d2\u0005\\/\u0002\u04ce',
	'\u04cf\u0007\u0013\u0002\u0002\u04cf\u04d1\u0005\\/\u0002\u04d0\u04ce',
	'\u0003\u0002\u0002\u0002\u04d1\u04d4\u0003\u0002\u0002\u0002\u04d2\u04d0',
	'\u0003\u0002\u0002\u0002\u04d2\u04d3\u0003\u0002\u0002\u0002\u04d3\u04de',
	'\u0003\u0002\u0002\u0002\u04d4\u04d2\u0003\u0002\u0002\u0002\u04d5\u04d6',
	'\u0007\u001c\u0002\u0002\u04d6\u04db\u0005\u00bc_\u0002\u04d7\u04d8',
	'\u0007\u0013\u0002\u0002\u04d8\u04da\u0005\u00bc_\u0002\u04d9\u04d7',
	'\u0003\u0002\u0002\u0002\u04da\u04dd\u0003\u0002\u0002\u0002\u04db\u04d9',
	'\u0003\u0002\u0002\u0002\u04db\u04dc\u0003\u0002\u0002\u0002\u04dc\u04df',
	'\u0003\u0002\u0002\u0002\u04dd\u04db\u0003\u0002\u0002\u0002\u04de\u04d5',
	'\u0003\u0002\u0002\u0002\u04de\u04df\u0003\u0002\u0002\u0002\u04df[',
	'\u0003\u0002\u0002\u0002\u04e0\u04e3\u0005\u0006\u0004\u0002\u04e1\u04e2',
	'\u0007%\u0002\u0002\u04e2\u04e4\u0005\u00b6\\\u0002\u04e3\u04e1\u0003',
	'\u0002\u0002\u0002\u04e3\u04e4\u0003\u0002\u0002\u0002\u04e4]\u0003',
	'\u0002\u0002\u0002\u04e5\u04e7\u0005\u0014\u000b\u0002\u04e6\u04e5\u0003',
	'\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u04eb\u0003',
	'\u0002\u0002\u0002\u04e8\u04ec\u0005\u0016\f\u0002\u04e9\u04ec\u0005',
	'`1\u0002\u04ea\u04ec\u0005\u0012\n\u0002\u04eb\u04e8\u0003\u0002\u0002',
	'\u0002\u04eb\u04e9\u0003\u0002\u0002\u0002\u04eb\u04ea\u0003\u0002\u0002',
	'\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec\u04ee\u0003\u0002\u0002',
	'\u0002\u04ed\u04ef\u0005\u0018\r\u0002\u04ee\u04ed\u0003\u0002\u0002',
	'\u0002\u04ee\u04ef\u0003\u0002\u0002\u0002\u04ef\u04f1\u0003\u0002\u0002',
	'\u0002\u04f0\u04f2\u0005\u0010\t\u0002\u04f1\u04f0\u0003\u0002\u0002',
	'\u0002\u04f1\u04f2\u0003\u0002\u0002\u0002\u04f2_\u0003\u0002\u0002',
	'\u0002\u04f3\u04f4\u0007\u00c4\u0002\u0002\u04f4\u04f5\u0005\u0006\u0004',
	'\u0002\u04f5a\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007\u0092\u0002',
	'\u0002\u04f7\u04f8\u0007B\u0002\u0002\u04f8\u04fd\u0005\u00bc_\u0002',
	'\u04f9\u04fa\u0007\u0013\u0002\u0002\u04fa\u04fc\u0005\u00bc_\u0002',
	'\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fc\u04ff\u0003\u0002\u0002\u0002',
	'\u04fd\u04fb\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003\u0002\u0002\u0002',
	'\u04fec\u0003\u0002\u0002\u0002\u04ff\u04fd\u0003\u0002\u0002\u0002',
	'\u0500\u0501\u0007A\u0002\u0002\u0501\u0502\u0007B\u0002\u0002\u0502',
	'\u0507\u0005f4\u0002\u0503\u0504\u0007\u0013\u0002\u0002\u0504\u0506',
	'\u0005f4\u0002\u0505\u0503\u0003\u0002\u0002\u0002\u0506\u0509\u0003',
	'\u0002\u0002\u0002\u0507\u0505\u0003\u0002\u0002\u0002\u0507\u0508\u0003',
	'\u0002\u0002\u0002\u0508e\u0003\u0002\u0002\u0002\u0509\u0507\u0003',
	'\u0002\u0002\u0002\u050a\u050c\u0005\u00bc_\u0002\u050b\u050d\t\u0018',
	'\u0002\u0002\u050c\u050b\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002',
	'\u0002\u0002\u050dg\u0003\u0002\u0002\u0002\u050e\u050f\u0007m\u0002',
	'\u0002\u050f\u0512\u0007\u00b2\u0002\u0002\u0510\u0512\u0007\u0094\u0002',
	'\u0002\u0511\u050e\u0003\u0002\u0002\u0002\u0511\u0510\u0003\u0002\u0002',
	'\u0002\u0512\u0513\u0003\u0002\u0002\u0002\u0513\u0514\u0007*\u0002',
	'\u0002\u0514\u0515\u0005l7\u0002\u0515\u0516\u0007&\u0002\u0002\u0516',
	'\u0517\u0005l7\u0002\u0517i\u0003\u0002\u0002\u0002\u0518\u0519\u0007',
	'\u00e7\u0002\u0002\u0519k\u0003\u0002\u0002\u0002\u051a\u051b\u0007',
	'\u00e7\u0002\u0002\u051b\u0526\u0007\u008f\u0002\u0002\u051c\u051d\u0007',
	'\u00e7\u0002\u0002\u051d\u0526\u0007\u0090\u0002\u0002\u051e\u051f\u0007',
	'\u0095\u0002\u0002\u051f\u0520\u0007m\u0002\u0002\u0520\u0526\u0007',
	'\u00b3\u0002\u0002\u0521\u0522\u0007\u0091\u0002\u0002\u0522\u0526\u0007',
	'\u008f\u0002\u0002\u0523\u0524\u0007\u0091\u0002\u0002\u0524\u0526\u0007',
	'\u0090\u0002\u0002\u0525\u051a\u0003\u0002\u0002\u0002\u0525\u051c\u0003',
	'\u0002\u0002\u0002\u0525\u051e\u0003\u0002\u0002\u0002\u0525\u0521\u0003',
	'\u0002\u0002\u0002\u0525\u0523\u0003\u0002\u0002\u0002\u0526m\u0003',
	'\u0002\u0002\u0002\u0527\u0528\u0007\u0086\u0002\u0002\u0528\u0529\t',
	'\u0019\u0002\u0002\u0529\u052e\u0005\u00bc_\u0002\u052a\u052b\u0007',
	'\u0013\u0002\u0002\u052b\u052d\u0005\u00bc_\u0002\u052c\u052a\u0003',
	'\u0002\u0002\u0002\u052d\u0530\u0003\u0002\u0002\u0002\u052e\u052c\u0003',
	'\u0002\u0002\u0002\u052e\u052f\u0003\u0002\u0002\u0002\u052f\u0535\u0003',
	'\u0002\u0002\u0002\u0530\u052e\u0003\u0002\u0002\u0002\u0531\u0532\u0007',
	'\u0086\u0002\u0002\u0532\u0533\u0007>\u0002\u0002\u0533\u0535\u0005',
	'\b\u0005\u0002\u0534\u0527\u0003\u0002\u0002\u0002\u0534\u0531\u0003',
	'\u0002\u0002\u0002\u0535o\u0003\u0002\u0002\u0002\u0536\u0537\u0007',
	'\u0088\u0002\u0002\u0537\u0538\u0005\b\u0005\u0002\u0538q\u0003\u0002',
	'\u0002\u0002\u0539\u053a\u0005\u00b8]\u0002\u053a\u053d\u0005x=\u0002',
	'\u053b\u053c\u0007\u00d3\u0002\u0002\u053c\u053e\u0005\u00d4k\u0002',
	'\u053d\u053b\u0003\u0002\u0002\u0002\u053d\u053e\u0003\u0002\u0002\u0002',
	'\u053es\u0003\u0002\u0002\u0002\u053f\u0543\u0005|?\u0002\u0540\u0543',
	'\u0005\u0080A\u0002\u0541\u0543\u0005~@\u0002\u0542\u053f\u0003\u0002',
	'\u0002\u0002\u0542\u0540\u0003\u0002\u0002\u0002\u0542\u0541\u0003\u0002',
	'\u0002\u0002\u0543u\u0003\u0002\u0002\u0002\u0544\u0547\u0005~@\u0002',
	'\u0545\u0547\u0005|?\u0002\u0546\u0544\u0003\u0002\u0002\u0002\u0546',
	'\u0545\u0003\u0002\u0002\u0002\u0547w\u0003\u0002\u0002\u0002\u0548',
	'\u054e\u0005|?\u0002\u0549\u054e\u0005\u0080A\u0002\u054a\u054e\u0005',
	'\u0082B\u0002\u054b\u054e\u0005z>\u0002\u054c\u054e\u0005~@\u0002\u054d',
	'\u0548\u0003\u0002\u0002\u0002\u054d\u0549\u0003\u0002\u0002\u0002\u054d',
	'\u054a\u0003\u0002\u0002\u0002\u054d\u054b\u0003\u0002\u0002\u0002\u054d',
	'\u054c\u0003\u0002\u0002\u0002\u054ey\u0003\u0002\u0002\u0002\u054f',
	'\u0553\u0007u\u0002\u0002\u0550\u0553\u0005\u0084C\u0002\u0551\u0553',
	'\u0005\u0086D\u0002\u0552\u054f\u0003\u0002\u0002\u0002\u0552\u0550',
	'\u0003\u0002\u0002\u0002\u0552\u0551\u0003\u0002\u0002\u0002\u0553{',
	'\u0003\u0002\u0002\u0002\u0554\u0557\u0005\u00d6l\u0002\u0555\u0557',
	'\u0005\u0088E\u0002\u0556\u0554\u0003\u0002\u0002\u0002\u0556\u0555',
	'\u0003\u0002\u0002\u0002\u0557\u0559\u0003\u0002\u0002\u0002\u0558\u055a',
	'\u0005\u00a2R\u0002\u0559\u0558\u0003\u0002\u0002\u0002\u0559\u055a',
	'\u0003\u0002\u0002\u0002\u055a\u055f\u0003\u0002\u0002\u0002\u055b\u055d',
	'\u0007)\u0002\u0002\u055c\u055b\u0003\u0002\u0002\u0002\u055c\u055d',
	'\u0003\u0002\u0002\u0002\u055d\u055e\u0003\u0002\u0002\u0002\u055e\u0560',
	'\u0007-\u0002\u0002\u055f\u055c\u0003\u0002\u0002\u0002\u055f\u0560',
	'\u0003\u0002\u0002\u0002\u0560}\u0003\u0002\u0002\u0002\u0561\u0566',
	'\u0005\u00caf\u0002\u0562\u0563\u0007\n\u0002\u0002\u0563\u0564\u0005',
	'|?\u0002\u0564\u0565\u0007\u000b\u0002\u0002\u0565\u0567\u0003\u0002',
	'\u0002\u0002\u0566\u0562\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002',
	'\u0002\u0002\u0567\u007f\u0003\u0002\u0002\u0002\u0568\u0574\u0007o',
	'\u0002\u0002\u0569\u056a\u0007\u0007\u0002\u0002\u056a\u056f\u0005\u00a4',
	'S\u0002\u056b\u056c\u0007\u0013\u0002\u0002\u056c\u056e\u0005\u00a4',
	'S\u0002\u056d\u056b\u0003\u0002\u0002\u0002\u056e\u0571\u0003\u0002',
	'\u0002\u0002\u056f\u056d\u0003\u0002\u0002\u0002\u056f\u0570\u0003\u0002',
	'\u0002\u0002\u0570\u0572\u0003\u0002\u0002\u0002\u0571\u056f\u0003\u0002',
	'\u0002\u0002\u0572\u0573\u0007\b\u0002\u0002\u0573\u0575\u0003\u0002',
	'\u0002\u0002\u0574\u0569\u0003\u0002\u0002\u0002\u0574\u0575\u0003\u0002',
	'\u0002\u0002\u0575\u0081\u0003\u0002\u0002\u0002\u0576\u057b\u0007\u00e5',
	'\u0002\u0002\u0577\u0578\u0007\n\u0002\u0002\u0578\u0579\u0005|?\u0002',
	'\u0579\u057a\u0007\u000b\u0002\u0002\u057a\u057c\u0003\u0002\u0002\u0002',
	'\u057b\u0577\u0003\u0002\u0002\u0002\u057b\u057c\u0003\u0002\u0002\u0002',
	'\u057c\u0083\u0003\u0002\u0002\u0002\u057d\u059b\u0007s\u0002\u0002',
	'\u057e\u058a\u0007\u00e1\u0002\u0002\u057f\u0580\u0007\u0007\u0002\u0002',
	'\u0580\u0585\u0005\u0088E\u0002\u0581\u0582\u0007\u0011\u0002\u0002',
	'\u0582\u0584\u0005\u0088E\u0002\u0583\u0581\u0003\u0002\u0002\u0002',
	'\u0584\u0587\u0003\u0002\u0002\u0002\u0585\u0583\u0003\u0002\u0002\u0002',
	'\u0585\u0586\u0003\u0002\u0002\u0002\u0586\u0588\u0003\u0002\u0002\u0002',
	'\u0587\u0585\u0003\u0002\u0002\u0002\u0588\u0589\u0007\b\u0002\u0002',
	'\u0589\u058b\u0003\u0002\u0002\u0002\u058a\u057f\u0003\u0002\u0002\u0002',
	'\u058a\u058b\u0003\u0002\u0002\u0002\u058b\u059b\u0003\u0002\u0002\u0002',
	'\u058c\u0598\u0007\u00e2\u0002\u0002\u058d\u058e\u0007\u0007\u0002\u0002',
	'\u058e\u0593\u0005\u00b8]\u0002\u058f\u0590\u0007\u0011\u0002\u0002',
	'\u0590\u0592\u0005\u00b8]\u0002\u0591\u058f\u0003\u0002\u0002\u0002',
	'\u0592\u0595\u0003\u0002\u0002\u0002\u0593\u0591\u0003\u0002\u0002\u0002',
	'\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0596\u0003\u0002\u0002\u0002',
	'\u0595\u0593\u0003\u0002\u0002\u0002\u0596\u0597\u0007\b\u0002\u0002',
	'\u0597\u0599\u0003\u0002\u0002\u0002\u0598\u058d\u0003\u0002\u0002\u0002',
	'\u0598\u0599\u0003\u0002\u0002\u0002\u0599\u059b\u0003\u0002\u0002\u0002',
	'\u059a\u057d\u0003\u0002\u0002\u0002\u059a\u057e\u0003\u0002\u0002\u0002',
	'\u059a\u058c\u0003\u0002\u0002\u0002\u059b\u0085\u0003\u0002\u0002\u0002',
	'\u059c\u05c5\u0007t\u0002\u0002\u059d\u05ae\u0007\u00e3\u0002\u0002',
	'\u059e\u059f\u0007\u0007\u0002\u0002\u059f\u05ab\u0007\u00eb\u0002\u0002',
	'\u05a0\u05a1\u0007\u0003\u0002\u0002\u05a1\u05a6\u0005\u0088E\u0002',
	'\u05a2\u05a3\u0007\u0011\u0002\u0002\u05a3\u05a5\u0005\u0088E\u0002',
	'\u05a4\u05a2\u0003\u0002\u0002\u0002\u05a5\u05a8\u0003\u0002\u0002\u0002',
	'\u05a6\u05a4\u0003\u0002\u0002\u0002\u05a6\u05a7\u0003\u0002\u0002\u0002',
	'\u05a7\u05a9\u0003\u0002\u0002\u0002\u05a8\u05a6\u0003\u0002\u0002\u0002',
	'\u05a9\u05aa\u0007\u0004\u0002\u0002\u05aa\u05ac\u0003\u0002\u0002\u0002',
	'\u05ab\u05a0\u0003\u0002\u0002\u0002\u05ab\u05ac\u0003\u0002\u0002\u0002',
	'\u05ac\u05ad\u0003\u0002\u0002\u0002\u05ad\u05af\u0007\b\u0002\u0002',
	'\u05ae\u059e\u0003\u0002\u0002\u0002\u05ae\u05af\u0003\u0002\u0002\u0002',
	'\u05af\u05c5\u0003\u0002\u0002\u0002\u05b0\u05c2\u0007\u00e4\u0002\u0002',
	'\u05b1\u05b2\u0007\u0007\u0002\u0002\u05b2\u05be\u0005\u00b8]\u0002',
	'\u05b3\u05b4\u0007\u0003\u0002\u0002\u05b4\u05b9\u0005\u00b8]\u0002',
	'\u05b5\u05b6\u0007\u0011\u0002\u0002\u05b6\u05b8\u0005\u00b8]\u0002',
	'\u05b7\u05b5\u0003\u0002\u0002\u0002\u05b8\u05bb\u0003\u0002\u0002\u0002',
	'\u05b9\u05b7\u0003\u0002\u0002\u0002\u05b9\u05ba\u0003\u0002\u0002\u0002',
	'\u05ba\u05bc\u0003\u0002\u0002\u0002\u05bb\u05b9\u0003\u0002\u0002\u0002',
	'\u05bc\u05bd\u0007\u0004\u0002\u0002\u05bd\u05bf\u0003\u0002\u0002\u0002',
	'\u05be\u05b3\u0003\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002',
	'\u05bf\u05c0\u0003\u0002\u0002\u0002\u05c0\u05c1\u0007\b\u0002\u0002',
	'\u05c1\u05c3\u0003\u0002\u0002\u0002\u05c2\u05b1\u0003\u0002\u0002\u0002',
	'\u05c2\u05c3\u0003\u0002\u0002\u0002\u05c3\u05c5\u0003\u0002\u0002\u0002',
	'\u05c4\u059c\u0003\u0002\u0002\u0002\u05c4\u059d\u0003\u0002\u0002\u0002',
	'\u05c4\u05b0\u0003\u0002\u0002\u0002\u05c5\u0087\u0003\u0002\u0002\u0002',
	'\u05c6\u05c7\u0007\u00eb\u0002\u0002\u05c7\u0089\u0003\u0002\u0002\u0002',
	'\u05c8\u05c9\u0007\u00eb\u0002\u0002\u05c9\u008b\u0003\u0002\u0002\u0002',
	'\u05ca\u05cb\t\u001a\u0002\u0002\u05cb\u05d0\u0005\u008eH\u0002\u05cc',
	'\u05cd\u0007\u0013\u0002\u0002\u05cd\u05cf\u0005\u008eH\u0002\u05ce',
	'\u05cc\u0003\u0002\u0002\u0002\u05cf\u05d2\u0003\u0002\u0002\u0002\u05d0',
	'\u05ce\u0003\u0002\u0002\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002\u05d1',
	'\u008d\u0003\u0002\u0002\u0002\u05d2\u05d0\u0003\u0002\u0002\u0002\u05d3',
	'\u05d6\u0005\u00b8]\u0002\u05d4\u05d5\u0007%\u0002\u0002\u05d5\u05d7',
	'\u0005\u00b6\\\u0002\u05d6\u05d4\u0003\u0002\u0002\u0002\u05d6\u05d7',
	'\u0003\u0002\u0002\u0002\u05d7\u008f\u0003\u0002\u0002\u0002\u05d8\u05dd',
	'\u0005\u0092J\u0002\u05d9\u05da\u0007\u00ed\u0002\u0002\u05da\u05dc',
	'\u0005\u0092J\u0002\u05db\u05d9\u0003\u0002\u0002\u0002\u05dc\u05df',
	'\u0003\u0002\u0002\u0002\u05dd\u05db\u0003\u0002\u0002\u0002\u05dd\u05de',
	'\u0003\u0002\u0002\u0002\u05de\u0091\u0003\u0002\u0002\u0002\u05df\u05dd',
	'\u0003\u0002\u0002\u0002\u05e0\u05e1\u0007\u00eb\u0002\u0002\u05e1\u05e3',
	'\u0007\u0015\u0002\u0002\u05e2\u05e0\u0003\u0002\u0002\u0002\u05e2\u05e3',
	'\u0003\u0002\u0002\u0002\u05e3\u05e8\u0003\u0002\u0002\u0002\u05e4\u05e5',
	'\u0007\u00af\u0002\u0002\u05e5\u05e6\u0005\b\u0005\u0002\u05e6\u05e7',
	'\u0007\u001a\u0002\u0002\u05e7\u05e9\u0003\u0002\u0002\u0002\u05e8\u05e4',
	'\u0003\u0002\u0002\u0002\u05e8\u05e9\u0003\u0002\u0002\u0002\u05e9\u05ea',
	'\u0003\u0002\u0002\u0002\u05ea\u05ec\u0005\b\u0005\u0002\u05eb\u05ed',
	'\u0005\u00c0a\u0002\u05ec\u05eb\u0003\u0002\u0002\u0002\u05ec\u05ed',
	'\u0003\u0002\u0002\u0002\u05ed\u05ef\u0003\u0002\u0002\u0002\u05ee\u05f0',
	'\u0005\u00c2b\u0002\u05ef\u05ee\u0003\u0002\u0002\u0002\u05ef\u05f0',
	'\u0003\u0002\u0002\u0002\u05f0\u0093\u0003\u0002\u0002\u0002\u05f1\u05f6',
	'\u0005\u0096L\u0002\u05f2\u05f3\u0007\u00ed\u0002\u0002\u05f3\u05f5',
	'\u0005\u0096L\u0002\u05f4\u05f2\u0003\u0002\u0002\u0002\u05f5\u05f8',
	'\u0003\u0002\u0002\u0002\u05f6\u05f4\u0003\u0002\u0002\u0002\u05f6\u05f7',
	'\u0003\u0002\u0002\u0002\u05f7\u0095\u0003\u0002\u0002\u0002\u05f8\u05f6',
	'\u0003\u0002\u0002\u0002\u05f9\u05fa\u0007\u00eb\u0002\u0002\u05fa\u05fc',
	'\u0007\u0015\u0002\u0002\u05fb\u05f9\u0003\u0002\u0002\u0002\u05fb\u05fc',
	'\u0003\u0002\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002\u05fd\u05ff',
	'\u0005\u009cO\u0002\u05fe\u0600\u0005\u00c0a\u0002\u05ff\u05fe\u0003',
	'\u0002\u0002\u0002\u05ff\u0600\u0003\u0002\u0002\u0002\u0600\u0602\u0003',
	'\u0002\u0002\u0002\u0601\u0603\u0005\u00c2b\u0002\u0602\u0601\u0003',
	'\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603\u0097\u0003',
	'\u0002\u0002\u0002\u0604\u0607\t\u001a\u0002\u0002\u0605\u0606\u0007',
	'\u009d\u0002\u0002\u0606\u0608\u0005\u009aN\u0002\u0607\u0605\u0003',
	'\u0002\u0002\u0002\u0607\u0608\u0003\u0002\u0002\u0002\u0608\u0609\u0003',
	'\u0002\u0002\u0002\u0609\u060a\u0007v\u0002\u0002\u060a\u060b\u0007',
	'\u00eb\u0002\u0002\u060b\u0099\u0003\u0002\u0002\u0002\u060c\u0611\u0005',
	'\u008eH\u0002\u060d\u060e\u0007\u0013\u0002\u0002\u060e\u0610\u0005',
	'\u008eH\u0002\u060f\u060d\u0003\u0002\u0002\u0002\u0610\u0613\u0003',
	'\u0002\u0002\u0002\u0611\u060f\u0003\u0002\u0002\u0002\u0611\u0612\u0003',
	'\u0002\u0002\u0002\u0612\u009b\u0003\u0002\u0002\u0002\u0613\u0611\u0003',
	'\u0002\u0002\u0002\u0614\u0615\u0007\u00af\u0002\u0002\u0615\u0616\u0005',
	'\b\u0005\u0002\u0616\u0617\u0007\u001a\u0002\u0002\u0617\u0619\u0003',
	'\u0002\u0002\u0002\u0618\u0614\u0003\u0002\u0002\u0002\u0618\u0619\u0003',
	'\u0002\u0002\u0002\u0619\u061a\u0003\u0002\u0002\u0002\u061a\u061c\u0005',
	'\u00a0Q\u0002\u061b\u061d\u0005\u00c4c\u0002\u061c\u061b\u0003\u0002',
	'\u0002\u0002\u061c\u061d\u0003\u0002\u0002\u0002\u061d\u061e\u0003\u0002',
	'\u0002\u0002\u061e\u0622\u0005\u009eP\u0002\u061f\u0621\u0005\u009e',
	'P\u0002\u0620\u061f\u0003\u0002\u0002\u0002\u0621\u0624\u0003\u0002',
	'\u0002\u0002\u0622\u0620\u0003\u0002\u0002\u0002\u0622\u0623\u0003\u0002',
	'\u0002\u0002\u0623\u009d\u0003\u0002\u0002\u0002\u0624\u0622\u0003\u0002',
	'\u0002\u0002\u0625\u0627\t\u001b\u0002\u0002\u0626\u0625\u0003\u0002',
	'\u0002\u0002\u0626\u0627\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002',
	'\u0002\u0002\u0628\u062d\u0005\u00a0Q\u0002\u0629\u062a\u0007\u0005',
	'\u0002\u0002\u062a\u062b\u0005\b\u0005\u0002\u062b\u062c\u0007\u0006',
	'\u0002\u0002\u062c\u062e\u0003\u0002\u0002\u0002\u062d\u0629\u0003\u0002',
	'\u0002\u0002\u062d\u062e\u0003\u0002\u0002\u0002\u062e\u009f\u0003\u0002',
	'\u0002\u0002\u062f\u0630\t\u001c\u0002\u0002\u0630\u00a1\u0003\u0002',
	'\u0002\u0002\u0631\u0632\u0007\u0005\u0002\u0002\u0632\u0633\u0005\b',
	'\u0005\u0002\u0633\u0634\u0007\u0006\u0002\u0002\u0634\u0641\u0003\u0002',
	'\u0002\u0002\u0635\u0636\u0007\u0007\u0002\u0002\u0636\u063b\u0005\u00d4',
	'k\u0002\u0637\u0638\u0007\u0013\u0002\u0002\u0638\u063a\u0005\u00d4',
	'k\u0002\u0639\u0637\u0003\u0002\u0002\u0002\u063a\u063d\u0003\u0002',
	'\u0002\u0002\u063b\u0639\u0003\u0002\u0002\u0002\u063b\u063c\u0003\u0002',
	'\u0002\u0002\u063c\u063e\u0003\u0002\u0002\u0002\u063d\u063b\u0003\u0002',
	'\u0002\u0002\u063e\u063f\u0007\b\u0002\u0002\u063f\u0641\u0003\u0002',
	'\u0002\u0002\u0640\u0631\u0003\u0002\u0002\u0002\u0640\u0635\u0003\u0002',
	'\u0002\u0002\u0641\u00a3\u0003\u0002\u0002\u0002\u0642\u0645\u0005~',
	'@\u0002\u0643\u0646\u0005\u00bc_\u0002\u0644\u0646\u0005\u00a6T\u0002',
	'\u0645\u0643\u0003\u0002\u0002\u0002\u0645\u0644\u0003\u0002\u0002\u0002',
	'\u0646\u00a5\u0003\u0002\u0002\u0002\u0647\u0649\u0007i\u0002\u0002',
	'\u0648\u064a\t\u001d\u0002\u0002\u0649\u0648\u0003\u0002\u0002\u0002',
	'\u0649\u064a\u0003\u0002\u0002\u0002\u064a\u00a7\u0003\u0002\u0002\u0002',
	'\u064b\u064c\t\u001e\u0002\u0002\u064c\u00a9\u0003\u0002\u0002\u0002',
	'\u064d\u064e\t\u001f\u0002\u0002\u064e\u00ab\u0003\u0002\u0002\u0002',
	'\u064f\u0650\u0007\u009d\u0002\u0002\u0650\u0655\u0005\u00bc_\u0002',
	'\u0651\u0652\u0007\u0013\u0002\u0002\u0652\u0654\u0005\u00bc_\u0002',
	'\u0653\u0651\u0003\u0002\u0002\u0002\u0654\u0657\u0003\u0002\u0002\u0002',
	'\u0655\u0653\u0003\u0002\u0002\u0002\u0655\u0656\u0003\u0002\u0002\u0002',
	'\u0656\u00ad\u0003\u0002\u0002\u0002\u0657\u0655\u0003\u0002\u0002\u0002',
	'\u0658\u0659\t \u0002\u0002\u0659\u00af\u0003\u0002\u0002\u0002\u065a',
	'\u065b\u0007<\u0002\u0002\u065b\u065c\u0005\u0006\u0004\u0002\u065c',
	'\u00b1\u0003\u0002\u0002\u0002\u065d\u065e\t!\u0002\u0002\u065e\u00b3',
	'\u0003\u0002\u0002\u0002\u065f\u0660\t"\u0002\u0002\u0660\u00b5\u0003',
	'\u0002\u0002\u0002\u0661\u0662\u0007\u00eb\u0002\u0002\u0662\u00b7\u0003',
	'\u0002\u0002\u0002\u0663\u0664\u0007\u00eb\u0002\u0002\u0664\u00b9\u0003',
	'\u0002\u0002\u0002\u0665\u0666\u0007\u00eb\u0002\u0002\u0666\u00bb\u0003',
	'\u0002\u0002\u0002\u0667\u066a\u0007\u00eb\u0002\u0002\u0668\u0669\u0007',
	'\u0017\u0002\u0002\u0669\u066b\u0007\u00eb\u0002\u0002\u066a\u0668\u0003',
	'\u0002\u0002\u0002\u066a\u066b\u0003\u0002\u0002\u0002\u066b\u00bd\u0003',
	'\u0002\u0002\u0002\u066c\u066d\u0007\u0007\u0002\u0002\u066d\u0672\u0005',
	'\u00d4k\u0002\u066e\u066f\u0007\u0013\u0002\u0002\u066f\u0671\u0005',
	'\u00d4k\u0002\u0670\u066e\u0003\u0002\u0002\u0002\u0671\u0674\u0003',
	'\u0002\u0002\u0002\u0672\u0670\u0003\u0002\u0002\u0002\u0672\u0673\u0003',
	'\u0002\u0002\u0002\u0673\u0675\u0003\u0002\u0002\u0002\u0674\u0672\u0003',
	'\u0002\u0002\u0002\u0675\u0676\u0007\b\u0002\u0002\u0676\u00bf\u0003',
	'\u0002\u0002\u0002\u0677\u0678\u0007=\u0002\u0002\u0678\u0679\u0005',
	'\u00d4k\u0002\u0679\u00c1\u0003\u0002\u0002\u0002\u067a\u067b\u0007',
	'@\u0002\u0002\u067b\u067c\u0005\u00d4k\u0002\u067c\u00c3\u0003\u0002',
	'\u0002\u0002\u067d\u067e\t#\u0002\u0002\u067e\u00c5\u0003\u0002\u0002',
	'\u0002\u067f\u0682\u0005\u0006\u0004\u0002\u0680\u0682\u0007i\u0002',
	'\u0002\u0681\u067f\u0003\u0002\u0002\u0002\u0681\u0680\u0003\u0002\u0002',
	'\u0002\u0682\u00c7\u0003\u0002\u0002\u0002\u0683\u0686\u0005\b\u0005',
	'\u0002\u0684\u0686\u0007i\u0002\u0002\u0685\u0683\u0003\u0002\u0002',
	'\u0002\u0685\u0684\u0003\u0002\u0002\u0002\u0686\u00c9\u0003\u0002\u0002',
	'\u0002\u0687\u068d\u0007^\u0002\u0002\u0688\u068d\u0007\u00e0\u0002',
	'\u0002\u0689\u068d\u0007]\u0002\u0002\u068a\u068d\u0007_\u0002\u0002',
	'\u068b\u068d\u0005\u00ccg\u0002\u068c\u0687\u0003\u0002\u0002\u0002',
	'\u068c\u0688\u0003\u0002\u0002\u0002\u068c\u0689\u0003\u0002\u0002\u0002',
	'\u068c\u068a\u0003\u0002\u0002\u0002\u068c\u068b\u0003\u0002\u0002\u0002',
	'\u068d\u00cb\u0003\u0002\u0002\u0002\u068e\u068f\u0007d\u0002\u0002',
	'\u068f\u0690\u0007_\u0002\u0002\u0690\u00cd\u0003\u0002\u0002\u0002',
	'\u0691\u0692\u0007\u00eb\u0002\u0002\u0692\u00cf\u0003\u0002\u0002\u0002',
	'\u0693\u0694\u0007\u00eb\u0002\u0002\u0694\u00d1\u0003\u0002\u0002\u0002',
	'\u0695\u0696\u0007\u00eb\u0002\u0002\u0696\u00d3\u0003\u0002\u0002\u0002',
	'\u0697\u0698\t$\u0002\u0002\u0698\u00d5\u0003\u0002\u0002\u0002\u0699',
	'\u069a\t%\u0002\u0002\u069a\u00d7\u0003\u0002\u0002\u0002\u069b\u069c',
	'\t&\u0002\u0002\u069c\u00d9\u0003\u0002\u0002\u0002\u00bf\u00df\u00ed',
	'\u0100\u011e\u0120\u0122\u0136\u014c\u014e\u0150\u015b\u0169\u0173\u017b',
	'\u0182\u0184\u018f\u0198\u01aa\u01b3\u01c2\u01cd\u01d0\u01d5\u01f6\u01ff',
	'\u0202\u020c\u0211\u0215\u021b\u021f\u0229\u022d\u0231\u023a\u023d\u0247',
	'\u024b\u0255\u025a\u025e\u0264\u0268\u026c\u0271\u0276\u0286\u028a\u0295',
	'\u02a0\u02a4\u02a8\u02b8\u02bc\u02c7\u02d2\u02d6\u02da\u02e6\u02f1\u02fd',
	'\u0308\u0326\u032a\u0341\u0346\u034e\u0363\u0367\u036b\u0371\u0376\u037e',
	'\u0393\u0397\u039b\u03a1\u03aa\u03b5\u03c0\u03c8\u03cc\u03cf\u03d2\u03d5',
	'\u03e4\u03e7\u03ea\u03f4\u03f8\u03fb\u03fe\u0401\u0409\u040c\u040f\u0412',
	'\u0416\u042e\u0435\u0437\u0441\u0444\u0447\u0452\u0454\u0459\u0469\u0471',
	'\u0474\u0477\u0482\u0484\u0489\u0495\u04a5\u04b0\u04b4\u04bb\u04ca\u04d2',
	'\u04db\u04de\u04e3\u04e6\u04eb\u04ee\u04f1\u04fd\u0507\u050c\u0511\u0525',
	'\u052e\u0534\u053d\u0542\u0546\u054d\u0552\u0556\u0559\u055c\u055f\u0566',
	'\u056f\u0574\u057b\u0585\u058a\u0593\u0598\u059a\u05a6\u05ab\u05ae\u05b9',
	'\u05be\u05c2\u05c4\u05d0\u05d6\u05dd\u05e2\u05e8\u05ec\u05ef\u05f6\u05fb',
	'\u05ff\u0602\u0607\u0611\u0618\u061c\u0622\u0626\u062d\u063b\u0640\u0645',
	'\u0649\u0655\u066a\u0672\u0681\u0685\u068c',
].join('');

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
	return new antlr4.dfa.DFA(ds, index);
});

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [
	null,
	"'('",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"'='",
	"'<'",
	"'>'",
	"'>='",
	"'<>'",
	"'<='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"','",
	"'->'",
	"':'",
	"':='",
	"'#'",
	"'eval'",
	"'if'",
	"'then'",
	"'else'",
	"'using'",
	"'with'",
	"'current_date'",
	"'on'",
	"'drop'",
	"'keep'",
	"'calc'",
	"'attrcalc'",
	"'rename'",
	"'as'",
	"'and'",
	"'or'",
	"'xor'",
	"'not'",
	"'between'",
	"'in'",
	"'not_in'",
	"'null'",
	"'isnull'",
	"'ex'",
	"'union'",
	"'diff'",
	"'symdiff'",
	"'intersect'",
	"'keys'",
	"'intyear'",
	"'intmonth'",
	"'intday'",
	"'check'",
	"'exists_in'",
	"'to'",
	"'return'",
	"'imbalance'",
	"'errorcode'",
	"'all'",
	"'aggr'",
	"'errorlevel'",
	"'order'",
	"'by'",
	"'rank'",
	"'asc'",
	"'desc'",
	"'min'",
	"'max'",
	"'first'",
	"'last'",
	"'indexof'",
	"'abs'",
	"'key'",
	"'ln'",
	"'log'",
	"'trunc'",
	"'round'",
	"'power'",
	"'mod'",
	"'length'",
	"'||'",
	"'trim'",
	"'upper'",
	"'lower'",
	"'substr'",
	"'sum'",
	"'avg'",
	"'median'",
	"'count'",
	"'identifier'",
	"'measure'",
	"'attribute'",
	"'filter'",
	"'merge'",
	"'exp'",
	"'componentRole'",
	"'viral'",
	"'match_characters'",
	"'type'",
	"'nvl'",
	"'hierarchy'",
	"'_'",
	"'invalid'",
	"'valuedomain'",
	"'variable'",
	"'data'",
	"'structure'",
	"'dataset'",
	"'operator'",
	"'define'",
	"'<-'",
	"'datapoint'",
	"'hierarchical'",
	"'ruleset'",
	"'rule'",
	"'end'",
	"'alterDataset'",
	"'ltrim'",
	"'rtrim'",
	"'instr'",
	"'replace'",
	"'ceil'",
	"'floor'",
	"'sqrt'",
	"'any'",
	"'setdiff'",
	"'stddev_pop'",
	"'stddev_samp'",
	"'var_pop'",
	"'var_samp'",
	"'group'",
	"'except'",
	"'having'",
	"'first_value'",
	"'last_value'",
	"'lag'",
	"'lead'",
	"'ratio_to_report'",
	"'over'",
	"'preceding'",
	"'following'",
	"'unbounded'",
	"'partition'",
	"'rows'",
	"'range'",
	"'current'",
	"'valid'",
	"'fill_time_series'",
	"'flow_to_stock'",
	"'stock_to_flow'",
	"'timeshift'",
	"'measures'",
	"'no_measures'",
	"'condition'",
	"'boolean'",
	"'date'",
	"'time_period'",
	"'number'",
	"'string'",
	"'time'",
	"'integer'",
	"'float'",
	"'list'",
	"'record'",
	"'restrict'",
	"'yyyy'",
	"'mm'",
	"'dd'",
	"'maxLength'",
	"'regexp'",
	"'is'",
	"'when'",
	"'from'",
	"'aggregates'",
	"'points'",
	"'point'",
	"'total'",
	"'partial'",
	"'always'",
	"'inner_join'",
	"'left_join'",
	"'cross_join'",
	"'full_join'",
	"'maps_from'",
	"'maps_to'",
	"'map_to'",
	"'map_from'",
	"'returns'",
	"'pivot'",
	"'customPivot'",
	"'unpivot'",
	"'sub'",
	"'apply'",
	"'conditioned'",
	"'period_indicator'",
	"'single'",
	"'duration'",
	"'time_agg'",
	"'unit'",
	"'Value'",
	"'valuedomains'",
	"'variables'",
	"'input'",
	"'output'",
	"'cast'",
	"'rule_priority'",
	"'dataset_priority'",
	"'default'",
	"'check_datapoint'",
	"'check_hierarchy'",
	"'computed'",
	"'non_null'",
	"'non_zero'",
	"'partial_null'",
	"'partial_zero'",
	"'always_null'",
	"'always_zero'",
	"'components'",
	"'all_measures'",
	"'scalar'",
	"'component'",
	"'datapoint_on_valuedomains'",
	"'datapoint_on_variables'",
	"'hierarchical_on_valuedomains'",
	"'hierarchical_on_variables'",
	"'set'",
	"'language'",
	null,
	null,
	null,
	null,
	null,
	null,
	"';'",
];

var symbolicNames = [
	null,
	'LPAREN',
	'RPAREN',
	'QLPAREN',
	'QRPAREN',
	'GLPAREN',
	'GRPAREN',
	'EQ',
	'LT',
	'MT',
	'ME',
	'NEQ',
	'LE',
	'PLUS',
	'MINUS',
	'MUL',
	'DIV',
	'COMMA',
	'POINTER',
	'COLON',
	'ASSIGN',
	'MEMBERSHIP',
	'EVAL',
	'IF',
	'THEN',
	'ELSE',
	'USING',
	'WITH',
	'CURRENT_DATE',
	'ON',
	'DROP',
	'KEEP',
	'CALC',
	'ATTRCALC',
	'RENAME',
	'AS',
	'AND',
	'OR',
	'XOR',
	'NOT',
	'BETWEEN',
	'IN',
	'NOT_IN',
	'NULL_CONSTANT',
	'ISNULL',
	'EX',
	'UNION',
	'DIFF',
	'SYMDIFF',
	'INTERSECT',
	'KEYS',
	'INTYEAR',
	'INTMONTH',
	'INTDAY',
	'CHECK',
	'EXISTS_IN',
	'TO',
	'RETURN',
	'IMBALANCE',
	'ERRORCODE',
	'ALL',
	'AGGREGATE',
	'ERRORLEVEL',
	'ORDER',
	'BY',
	'RANK',
	'ASC',
	'DESC',
	'MIN',
	'MAX',
	'FIRST',
	'LAST',
	'INDEXOF',
	'ABS',
	'KEY',
	'LN',
	'LOG',
	'TRUNC',
	'ROUND',
	'POWER',
	'MOD',
	'LEN',
	'CONCAT',
	'TRIM',
	'UCASE',
	'LCASE',
	'SUBSTR',
	'SUM',
	'AVG',
	'MEDIAN',
	'COUNT',
	'DIMENSION',
	'MEASURE',
	'ATTRIBUTE',
	'FILTER',
	'MERGE',
	'EXP',
	'ROLE',
	'VIRAL',
	'CHARSET_MATCH',
	'TYPE',
	'NVL',
	'HIERARCHY',
	'OPTIONAL',
	'INVALID',
	'VALUE_DOMAIN',
	'VARIABLE',
	'DATA',
	'STRUCTURE',
	'DATASET',
	'OPERATOR',
	'DEFINE',
	'PUT_SYMBOL',
	'DATAPOINT',
	'HIERARCHICAL',
	'RULESET',
	'RULE',
	'END',
	'ALTER_DATASET',
	'LTRIM',
	'RTRIM',
	'INSTR',
	'REPLACE',
	'CEIL',
	'FLOOR',
	'SQRT',
	'ANY',
	'SETDIFF',
	'STDDEV_POP',
	'STDDEV_SAMP',
	'VAR_POP',
	'VAR_SAMP',
	'GROUP',
	'EXCEPT',
	'HAVING',
	'FIRST_VALUE',
	'LAST_VALUE',
	'LAG',
	'LEAD',
	'RATIO_TO_REPORT',
	'OVER',
	'PRECEDING',
	'FOLLOWING',
	'UNBOUNDED',
	'PARTITION',
	'ROWS',
	'RANGE',
	'CURRENT',
	'VALID',
	'FILL_TIME_SERIES',
	'FLOW_TO_STOCK',
	'STOCK_TO_FLOW',
	'TIMESHIFT',
	'MEASURES',
	'NO_MEASURES',
	'CONDITION',
	'BOOLEAN',
	'DATE',
	'TIME_PERIOD',
	'NUMBER',
	'STRING',
	'TIME',
	'INTEGER',
	'FLOAT',
	'LIST',
	'RECORD',
	'RESTRICT',
	'YYYY',
	'MM',
	'DD',
	'MAX_LENGTH',
	'REGEXP',
	'IS',
	'WHEN',
	'FROM',
	'AGGREGATES',
	'POINTS',
	'POINT',
	'TOTAL',
	'PARTIAL',
	'ALWAYS',
	'INNER_JOIN',
	'LEFT_JOIN',
	'CROSS_JOIN',
	'FULL_JOIN',
	'MAPS_FROM',
	'MAPS_TO',
	'MAP_TO',
	'MAP_FROM',
	'RETURNS',
	'PIVOT',
	'CUSTOMPIVOT',
	'UNPIVOT',
	'SUBSPACE',
	'APPLY',
	'CONDITIONED',
	'PERIOD_INDICATOR',
	'SINGLE',
	'DURATION',
	'TIME_AGG',
	'UNIT',
	'VALUE',
	'VALUEDOMAINS',
	'VARIABLES',
	'INPUT',
	'OUTPUT',
	'CAST',
	'RULE_PRIORITY',
	'DATASET_PRIORITY',
	'DEFAULT',
	'CHECK_DATAPOINT',
	'CHECK_HIERARCHY',
	'COMPUTED',
	'NON_NULL',
	'NON_ZERO',
	'PARTIAL_NULL',
	'PARTIAL_ZERO',
	'ALWAYS_NULL',
	'ALWAYS_ZERO',
	'COMPONENTS',
	'ALL_MEASURES',
	'SCALAR',
	'COMPONENT',
	'DATAPOINT_ON_VD',
	'DATAPOINT_ON_VAR',
	'HIERARCHICAL_ON_VD',
	'HIERARCHICAL_ON_VAR',
	'SET',
	'LANGUAGE',
	'INTEGER_CONSTANT',
	'NUMBER_CONSTANT',
	'BOOLEAN_CONSTANT',
	'STRING_CONSTANT',
	'IDENTIFIER',
	'WS',
	'EOL',
	'ML_COMMENT',
	'SL_COMMENT',
];

var ruleNames = [
	'start',
	'statement',
	'expr',
	'exprComponent',
	'functionsComponents',
	'functions',
	'datasetClause',
	'renameClause',
	'aggrClause',
	'filterClause',
	'calcClause',
	'keepOrDropClause',
	'pivotOrUnpivotClause',
	'customPivotClause',
	'subspaceClause',
	'joinOperators',
	'defOperators',
	'genericOperators',
	'genericOperatorsComponent',
	'parameterComponent',
	'parameter',
	'stringOperators',
	'stringOperatorsComponent',
	'numericOperators',
	'numericOperatorsComponent',
	'comparisonOperators',
	'comparisonOperatorsComponent',
	'timeOperators',
	'timeOperatorsComponent',
	'setOperators',
	'hierarchyOperators',
	'validationOperators',
	'conditionalOperators',
	'conditionalOperatorsComponent',
	'aggrOperators',
	'aggrOperatorsGrouping',
	'anFunction',
	'anFunctionComponent',
	'renameClauseItem',
	'aggregateClause',
	'aggrFunctionClause',
	'calcClauseItem',
	'subspaceClauseItem',
	'joinClauseWithoutUsing',
	'joinClause',
	'joinClauseItem',
	'joinBody',
	'joinApplyClause',
	'partitionByClause',
	'orderByClause',
	'orderByItem',
	'windowingClause',
	'signedInteger',
	'limitClauseItem',
	'groupingClause',
	'havingClause',
	'parameterItem',
	'outputParameterType',
	'outputParameterTypeComponent',
	'inputParameterType',
	'rulesetType',
	'scalarType',
	'componentType',
	'datasetType',
	'scalarSetType',
	'dpRuleset',
	'hrRuleset',
	'valueDomainName',
	'rulesetID',
	'rulesetSignature',
	'signature',
	'ruleClauseDatapoint',
	'ruleItemDatapoint',
	'ruleClauseHierarchical',
	'ruleItemHierarchical',
	'hierRuleSignature',
	'valueDomainSignature',
	'codeItemRelation',
	'codeItemRelationClause',
	'valueDomainValue',
	'scalarTypeConstraint',
	'compConstraint',
	'multModifier',
	'validationOutput',
	'validationMode',
	'conditionClause',
	'inputMode',
	'imbalanceExpr',
	'inputModeHierarchy',
	'outputModeHierarchy',
	'alias',
	'varID',
	'simpleComponentId',
	'componentID',
	'lists',
	'erCode',
	'erLevel',
	'comparisonOperand',
	'optionalExpr',
	'optionalExprComponent',
	'componentRole',
	'viralAttribute',
	'valueDomainID',
	'operatorID',
	'routineName',
	'constant',
	'basicScalarType',
	'retainType',
];

function VtlParser(input) {
	antlr4.Parser.call(this, input);
	this._interp = new antlr4.atn.ParserATNSimulator(
		this,
		atn,
		decisionsToDFA,
		sharedContextCache
	);
	this.ruleNames = ruleNames;
	this.literalNames = literalNames;
	this.symbolicNames = symbolicNames;
	return this;
}

VtlParser.prototype = Object.create(antlr4.Parser.prototype);
VtlParser.prototype.constructor = VtlParser;

Object.defineProperty(VtlParser.prototype, 'atn', {
	get: function () {
		return atn;
	},
});

VtlParser.EOF = antlr4.Token.EOF;
VtlParser.LPAREN = 1;
VtlParser.RPAREN = 2;
VtlParser.QLPAREN = 3;
VtlParser.QRPAREN = 4;
VtlParser.GLPAREN = 5;
VtlParser.GRPAREN = 6;
VtlParser.EQ = 7;
VtlParser.LT = 8;
VtlParser.MT = 9;
VtlParser.ME = 10;
VtlParser.NEQ = 11;
VtlParser.LE = 12;
VtlParser.PLUS = 13;
VtlParser.MINUS = 14;
VtlParser.MUL = 15;
VtlParser.DIV = 16;
VtlParser.COMMA = 17;
VtlParser.POINTER = 18;
VtlParser.COLON = 19;
VtlParser.ASSIGN = 20;
VtlParser.MEMBERSHIP = 21;
VtlParser.EVAL = 22;
VtlParser.IF = 23;
VtlParser.THEN = 24;
VtlParser.ELSE = 25;
VtlParser.USING = 26;
VtlParser.WITH = 27;
VtlParser.CURRENT_DATE = 28;
VtlParser.ON = 29;
VtlParser.DROP = 30;
VtlParser.KEEP = 31;
VtlParser.CALC = 32;
VtlParser.ATTRCALC = 33;
VtlParser.RENAME = 34;
VtlParser.AS = 35;
VtlParser.AND = 36;
VtlParser.OR = 37;
VtlParser.XOR = 38;
VtlParser.NOT = 39;
VtlParser.BETWEEN = 40;
VtlParser.IN = 41;
VtlParser.NOT_IN = 42;
VtlParser.NULL_CONSTANT = 43;
VtlParser.ISNULL = 44;
VtlParser.EX = 45;
VtlParser.UNION = 46;
VtlParser.DIFF = 47;
VtlParser.SYMDIFF = 48;
VtlParser.INTERSECT = 49;
VtlParser.KEYS = 50;
VtlParser.INTYEAR = 51;
VtlParser.INTMONTH = 52;
VtlParser.INTDAY = 53;
VtlParser.CHECK = 54;
VtlParser.EXISTS_IN = 55;
VtlParser.TO = 56;
VtlParser.RETURN = 57;
VtlParser.IMBALANCE = 58;
VtlParser.ERRORCODE = 59;
VtlParser.ALL = 60;
VtlParser.AGGREGATE = 61;
VtlParser.ERRORLEVEL = 62;
VtlParser.ORDER = 63;
VtlParser.BY = 64;
VtlParser.RANK = 65;
VtlParser.ASC = 66;
VtlParser.DESC = 67;
VtlParser.MIN = 68;
VtlParser.MAX = 69;
VtlParser.FIRST = 70;
VtlParser.LAST = 71;
VtlParser.INDEXOF = 72;
VtlParser.ABS = 73;
VtlParser.KEY = 74;
VtlParser.LN = 75;
VtlParser.LOG = 76;
VtlParser.TRUNC = 77;
VtlParser.ROUND = 78;
VtlParser.POWER = 79;
VtlParser.MOD = 80;
VtlParser.LEN = 81;
VtlParser.CONCAT = 82;
VtlParser.TRIM = 83;
VtlParser.UCASE = 84;
VtlParser.LCASE = 85;
VtlParser.SUBSTR = 86;
VtlParser.SUM = 87;
VtlParser.AVG = 88;
VtlParser.MEDIAN = 89;
VtlParser.COUNT = 90;
VtlParser.DIMENSION = 91;
VtlParser.MEASURE = 92;
VtlParser.ATTRIBUTE = 93;
VtlParser.FILTER = 94;
VtlParser.MERGE = 95;
VtlParser.EXP = 96;
VtlParser.ROLE = 97;
VtlParser.VIRAL = 98;
VtlParser.CHARSET_MATCH = 99;
VtlParser.TYPE = 100;
VtlParser.NVL = 101;
VtlParser.HIERARCHY = 102;
VtlParser.OPTIONAL = 103;
VtlParser.INVALID = 104;
VtlParser.VALUE_DOMAIN = 105;
VtlParser.VARIABLE = 106;
VtlParser.DATA = 107;
VtlParser.STRUCTURE = 108;
VtlParser.DATASET = 109;
VtlParser.OPERATOR = 110;
VtlParser.DEFINE = 111;
VtlParser.PUT_SYMBOL = 112;
VtlParser.DATAPOINT = 113;
VtlParser.HIERARCHICAL = 114;
VtlParser.RULESET = 115;
VtlParser.RULE = 116;
VtlParser.END = 117;
VtlParser.ALTER_DATASET = 118;
VtlParser.LTRIM = 119;
VtlParser.RTRIM = 120;
VtlParser.INSTR = 121;
VtlParser.REPLACE = 122;
VtlParser.CEIL = 123;
VtlParser.FLOOR = 124;
VtlParser.SQRT = 125;
VtlParser.ANY = 126;
VtlParser.SETDIFF = 127;
VtlParser.STDDEV_POP = 128;
VtlParser.STDDEV_SAMP = 129;
VtlParser.VAR_POP = 130;
VtlParser.VAR_SAMP = 131;
VtlParser.GROUP = 132;
VtlParser.EXCEPT = 133;
VtlParser.HAVING = 134;
VtlParser.FIRST_VALUE = 135;
VtlParser.LAST_VALUE = 136;
VtlParser.LAG = 137;
VtlParser.LEAD = 138;
VtlParser.RATIO_TO_REPORT = 139;
VtlParser.OVER = 140;
VtlParser.PRECEDING = 141;
VtlParser.FOLLOWING = 142;
VtlParser.UNBOUNDED = 143;
VtlParser.PARTITION = 144;
VtlParser.ROWS = 145;
VtlParser.RANGE = 146;
VtlParser.CURRENT = 147;
VtlParser.VALID = 148;
VtlParser.FILL_TIME_SERIES = 149;
VtlParser.FLOW_TO_STOCK = 150;
VtlParser.STOCK_TO_FLOW = 151;
VtlParser.TIMESHIFT = 152;
VtlParser.MEASURES = 153;
VtlParser.NO_MEASURES = 154;
VtlParser.CONDITION = 155;
VtlParser.BOOLEAN = 156;
VtlParser.DATE = 157;
VtlParser.TIME_PERIOD = 158;
VtlParser.NUMBER = 159;
VtlParser.STRING = 160;
VtlParser.TIME = 161;
VtlParser.INTEGER = 162;
VtlParser.FLOAT = 163;
VtlParser.LIST = 164;
VtlParser.RECORD = 165;
VtlParser.RESTRICT = 166;
VtlParser.YYYY = 167;
VtlParser.MM = 168;
VtlParser.DD = 169;
VtlParser.MAX_LENGTH = 170;
VtlParser.REGEXP = 171;
VtlParser.IS = 172;
VtlParser.WHEN = 173;
VtlParser.FROM = 174;
VtlParser.AGGREGATES = 175;
VtlParser.POINTS = 176;
VtlParser.POINT = 177;
VtlParser.TOTAL = 178;
VtlParser.PARTIAL = 179;
VtlParser.ALWAYS = 180;
VtlParser.INNER_JOIN = 181;
VtlParser.LEFT_JOIN = 182;
VtlParser.CROSS_JOIN = 183;
VtlParser.FULL_JOIN = 184;
VtlParser.MAPS_FROM = 185;
VtlParser.MAPS_TO = 186;
VtlParser.MAP_TO = 187;
VtlParser.MAP_FROM = 188;
VtlParser.RETURNS = 189;
VtlParser.PIVOT = 190;
VtlParser.CUSTOMPIVOT = 191;
VtlParser.UNPIVOT = 192;
VtlParser.SUBSPACE = 193;
VtlParser.APPLY = 194;
VtlParser.CONDITIONED = 195;
VtlParser.PERIOD_INDICATOR = 196;
VtlParser.SINGLE = 197;
VtlParser.DURATION = 198;
VtlParser.TIME_AGG = 199;
VtlParser.UNIT = 200;
VtlParser.VALUE = 201;
VtlParser.VALUEDOMAINS = 202;
VtlParser.VARIABLES = 203;
VtlParser.INPUT = 204;
VtlParser.OUTPUT = 205;
VtlParser.CAST = 206;
VtlParser.RULE_PRIORITY = 207;
VtlParser.DATASET_PRIORITY = 208;
VtlParser.DEFAULT = 209;
VtlParser.CHECK_DATAPOINT = 210;
VtlParser.CHECK_HIERARCHY = 211;
VtlParser.COMPUTED = 212;
VtlParser.NON_NULL = 213;
VtlParser.NON_ZERO = 214;
VtlParser.PARTIAL_NULL = 215;
VtlParser.PARTIAL_ZERO = 216;
VtlParser.ALWAYS_NULL = 217;
VtlParser.ALWAYS_ZERO = 218;
VtlParser.COMPONENTS = 219;
VtlParser.ALL_MEASURES = 220;
VtlParser.SCALAR = 221;
VtlParser.COMPONENT = 222;
VtlParser.DATAPOINT_ON_VD = 223;
VtlParser.DATAPOINT_ON_VAR = 224;
VtlParser.HIERARCHICAL_ON_VD = 225;
VtlParser.HIERARCHICAL_ON_VAR = 226;
VtlParser.SET = 227;
VtlParser.LANGUAGE = 228;
VtlParser.INTEGER_CONSTANT = 229;
VtlParser.NUMBER_CONSTANT = 230;
VtlParser.BOOLEAN_CONSTANT = 231;
VtlParser.STRING_CONSTANT = 232;
VtlParser.IDENTIFIER = 233;
VtlParser.WS = 234;
VtlParser.EOL = 235;
VtlParser.ML_COMMENT = 236;
VtlParser.SL_COMMENT = 237;

VtlParser.RULE_start = 0;
VtlParser.RULE_statement = 1;
VtlParser.RULE_expr = 2;
VtlParser.RULE_exprComponent = 3;
VtlParser.RULE_functionsComponents = 4;
VtlParser.RULE_functions = 5;
VtlParser.RULE_datasetClause = 6;
VtlParser.RULE_renameClause = 7;
VtlParser.RULE_aggrClause = 8;
VtlParser.RULE_filterClause = 9;
VtlParser.RULE_calcClause = 10;
VtlParser.RULE_keepOrDropClause = 11;
VtlParser.RULE_pivotOrUnpivotClause = 12;
VtlParser.RULE_customPivotClause = 13;
VtlParser.RULE_subspaceClause = 14;
VtlParser.RULE_joinOperators = 15;
VtlParser.RULE_defOperators = 16;
VtlParser.RULE_genericOperators = 17;
VtlParser.RULE_genericOperatorsComponent = 18;
VtlParser.RULE_parameterComponent = 19;
VtlParser.RULE_parameter = 20;
VtlParser.RULE_stringOperators = 21;
VtlParser.RULE_stringOperatorsComponent = 22;
VtlParser.RULE_numericOperators = 23;
VtlParser.RULE_numericOperatorsComponent = 24;
VtlParser.RULE_comparisonOperators = 25;
VtlParser.RULE_comparisonOperatorsComponent = 26;
VtlParser.RULE_timeOperators = 27;
VtlParser.RULE_timeOperatorsComponent = 28;
VtlParser.RULE_setOperators = 29;
VtlParser.RULE_hierarchyOperators = 30;
VtlParser.RULE_validationOperators = 31;
VtlParser.RULE_conditionalOperators = 32;
VtlParser.RULE_conditionalOperatorsComponent = 33;
VtlParser.RULE_aggrOperators = 34;
VtlParser.RULE_aggrOperatorsGrouping = 35;
VtlParser.RULE_anFunction = 36;
VtlParser.RULE_anFunctionComponent = 37;
VtlParser.RULE_renameClauseItem = 38;
VtlParser.RULE_aggregateClause = 39;
VtlParser.RULE_aggrFunctionClause = 40;
VtlParser.RULE_calcClauseItem = 41;
VtlParser.RULE_subspaceClauseItem = 42;
VtlParser.RULE_joinClauseWithoutUsing = 43;
VtlParser.RULE_joinClause = 44;
VtlParser.RULE_joinClauseItem = 45;
VtlParser.RULE_joinBody = 46;
VtlParser.RULE_joinApplyClause = 47;
VtlParser.RULE_partitionByClause = 48;
VtlParser.RULE_orderByClause = 49;
VtlParser.RULE_orderByItem = 50;
VtlParser.RULE_windowingClause = 51;
VtlParser.RULE_signedInteger = 52;
VtlParser.RULE_limitClauseItem = 53;
VtlParser.RULE_groupingClause = 54;
VtlParser.RULE_havingClause = 55;
VtlParser.RULE_parameterItem = 56;
VtlParser.RULE_outputParameterType = 57;
VtlParser.RULE_outputParameterTypeComponent = 58;
VtlParser.RULE_inputParameterType = 59;
VtlParser.RULE_rulesetType = 60;
VtlParser.RULE_scalarType = 61;
VtlParser.RULE_componentType = 62;
VtlParser.RULE_datasetType = 63;
VtlParser.RULE_scalarSetType = 64;
VtlParser.RULE_dpRuleset = 65;
VtlParser.RULE_hrRuleset = 66;
VtlParser.RULE_valueDomainName = 67;
VtlParser.RULE_rulesetID = 68;
VtlParser.RULE_rulesetSignature = 69;
VtlParser.RULE_signature = 70;
VtlParser.RULE_ruleClauseDatapoint = 71;
VtlParser.RULE_ruleItemDatapoint = 72;
VtlParser.RULE_ruleClauseHierarchical = 73;
VtlParser.RULE_ruleItemHierarchical = 74;
VtlParser.RULE_hierRuleSignature = 75;
VtlParser.RULE_valueDomainSignature = 76;
VtlParser.RULE_codeItemRelation = 77;
VtlParser.RULE_codeItemRelationClause = 78;
VtlParser.RULE_valueDomainValue = 79;
VtlParser.RULE_scalarTypeConstraint = 80;
VtlParser.RULE_compConstraint = 81;
VtlParser.RULE_multModifier = 82;
VtlParser.RULE_validationOutput = 83;
VtlParser.RULE_validationMode = 84;
VtlParser.RULE_conditionClause = 85;
VtlParser.RULE_inputMode = 86;
VtlParser.RULE_imbalanceExpr = 87;
VtlParser.RULE_inputModeHierarchy = 88;
VtlParser.RULE_outputModeHierarchy = 89;
VtlParser.RULE_alias = 90;
VtlParser.RULE_varID = 91;
VtlParser.RULE_simpleComponentId = 92;
VtlParser.RULE_componentID = 93;
VtlParser.RULE_lists = 94;
VtlParser.RULE_erCode = 95;
VtlParser.RULE_erLevel = 96;
VtlParser.RULE_comparisonOperand = 97;
VtlParser.RULE_optionalExpr = 98;
VtlParser.RULE_optionalExprComponent = 99;
VtlParser.RULE_componentRole = 100;
VtlParser.RULE_viralAttribute = 101;
VtlParser.RULE_valueDomainID = 102;
VtlParser.RULE_operatorID = 103;
VtlParser.RULE_routineName = 104;
VtlParser.RULE_constant = 105;
VtlParser.RULE_basicScalarType = 106;
VtlParser.RULE_retainType = 107;

function StartContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_start;
	return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.EOF = function () {
	return this.getToken(VtlParser.EOF, 0);
};

StartContext.prototype.statement = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(StatementContext);
	} else {
		return this.getTypedRuleContext(StatementContext, i);
	}
};

StartContext.prototype.EOL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.EOL);
	} else {
		return this.getToken(VtlParser.EOL, i);
	}
};

StartContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterStart(this);
	}
};

StartContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitStart(this);
	}
};

StartContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitStart(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.StartContext = StartContext;

VtlParser.prototype.start = function () {
	var localctx = new StartContext(this, this._ctx, this.state);
	this.enterRule(localctx, 0, VtlParser.RULE_start);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 221;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.DEFINE || _la === VtlParser.IDENTIFIER) {
			this.state = 216;
			this.statement();
			this.state = 217;
			this.match(VtlParser.EOL);
			this.state = 223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 224;
		this.match(VtlParser.EOF);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_statement;
	return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DefineExpressionContext(parser, ctx) {
	StatementContext.call(this, parser);
	StatementContext.prototype.copyFrom.call(this, ctx);
	return this;
}

DefineExpressionContext.prototype = Object.create(StatementContext.prototype);
DefineExpressionContext.prototype.constructor = DefineExpressionContext;

VtlParser.DefineExpressionContext = DefineExpressionContext;

DefineExpressionContext.prototype.defOperators = function () {
	return this.getTypedRuleContext(DefOperatorsContext, 0);
};
DefineExpressionContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDefineExpression(this);
	}
};

DefineExpressionContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDefineExpression(this);
	}
};

DefineExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDefineExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function TemporaryAssignmentContext(parser, ctx) {
	StatementContext.call(this, parser);
	StatementContext.prototype.copyFrom.call(this, ctx);
	return this;
}

TemporaryAssignmentContext.prototype = Object.create(
	StatementContext.prototype
);
TemporaryAssignmentContext.prototype.constructor = TemporaryAssignmentContext;

VtlParser.TemporaryAssignmentContext = TemporaryAssignmentContext;

TemporaryAssignmentContext.prototype.varID = function () {
	return this.getTypedRuleContext(VarIDContext, 0);
};

TemporaryAssignmentContext.prototype.ASSIGN = function () {
	return this.getToken(VtlParser.ASSIGN, 0);
};

TemporaryAssignmentContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};
TemporaryAssignmentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterTemporaryAssignment(this);
	}
};

TemporaryAssignmentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitTemporaryAssignment(this);
	}
};

TemporaryAssignmentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitTemporaryAssignment(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function PersistAssignmentContext(parser, ctx) {
	StatementContext.call(this, parser);
	StatementContext.prototype.copyFrom.call(this, ctx);
	return this;
}

PersistAssignmentContext.prototype = Object.create(StatementContext.prototype);
PersistAssignmentContext.prototype.constructor = PersistAssignmentContext;

VtlParser.PersistAssignmentContext = PersistAssignmentContext;

PersistAssignmentContext.prototype.varID = function () {
	return this.getTypedRuleContext(VarIDContext, 0);
};

PersistAssignmentContext.prototype.PUT_SYMBOL = function () {
	return this.getToken(VtlParser.PUT_SYMBOL, 0);
};

PersistAssignmentContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};
PersistAssignmentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterPersistAssignment(this);
	}
};

PersistAssignmentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitPersistAssignment(this);
	}
};

PersistAssignmentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitPersistAssignment(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.StatementContext = StatementContext;

VtlParser.prototype.statement = function () {
	var localctx = new StatementContext(this, this._ctx, this.state);
	this.enterRule(localctx, 2, VtlParser.RULE_statement);
	try {
		this.state = 235;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
		switch (la_) {
			case 1:
				localctx = new TemporaryAssignmentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 226;
				this.varID();
				this.state = 227;
				this.match(VtlParser.ASSIGN);
				this.state = 228;
				this.expr(0);
				break;

			case 2:
				localctx = new PersistAssignmentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 230;
				this.varID();
				this.state = 231;
				this.match(VtlParser.PUT_SYMBOL);
				this.state = 232;
				this.expr(0);
				break;

			case 3:
				localctx = new DefineExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 234;
				this.defOperators();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_expr;
	return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function VarIdExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

VarIdExprContext.prototype = Object.create(ExprContext.prototype);
VarIdExprContext.prototype.constructor = VarIdExprContext;

VtlParser.VarIdExprContext = VarIdExprContext;

VarIdExprContext.prototype.varID = function () {
	return this.getTypedRuleContext(VarIDContext, 0);
};
VarIdExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterVarIdExpr(this);
	}
};

VarIdExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitVarIdExpr(this);
	}
};

VarIdExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitVarIdExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function MembershipExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

MembershipExprContext.prototype = Object.create(ExprContext.prototype);
MembershipExprContext.prototype.constructor = MembershipExprContext;

VtlParser.MembershipExprContext = MembershipExprContext;

MembershipExprContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

MembershipExprContext.prototype.MEMBERSHIP = function () {
	return this.getToken(VtlParser.MEMBERSHIP, 0);
};

MembershipExprContext.prototype.simpleComponentId = function () {
	return this.getTypedRuleContext(SimpleComponentIdContext, 0);
};
MembershipExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterMembershipExpr(this);
	}
};

MembershipExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitMembershipExpr(this);
	}
};

MembershipExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitMembershipExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function InNotInExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.left = null; // ExprContext;
	this.op = null; // Token;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

InNotInExprContext.prototype = Object.create(ExprContext.prototype);
InNotInExprContext.prototype.constructor = InNotInExprContext;

VtlParser.InNotInExprContext = InNotInExprContext;

InNotInExprContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

InNotInExprContext.prototype.IN = function () {
	return this.getToken(VtlParser.IN, 0);
};

InNotInExprContext.prototype.NOT_IN = function () {
	return this.getToken(VtlParser.NOT_IN, 0);
};

InNotInExprContext.prototype.lists = function () {
	return this.getTypedRuleContext(ListsContext, 0);
};

InNotInExprContext.prototype.valueDomainID = function () {
	return this.getTypedRuleContext(ValueDomainIDContext, 0);
};
InNotInExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterInNotInExpr(this);
	}
};

InNotInExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitInNotInExpr(this);
	}
};

InNotInExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitInNotInExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function BooleanExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.left = null; // ExprContext;
	this.op = null; // Token;
	this.right = null; // ExprContext;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

BooleanExprContext.prototype = Object.create(ExprContext.prototype);
BooleanExprContext.prototype.constructor = BooleanExprContext;

VtlParser.BooleanExprContext = BooleanExprContext;

BooleanExprContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

BooleanExprContext.prototype.AND = function () {
	return this.getToken(VtlParser.AND, 0);
};

BooleanExprContext.prototype.OR = function () {
	return this.getToken(VtlParser.OR, 0);
};

BooleanExprContext.prototype.XOR = function () {
	return this.getToken(VtlParser.XOR, 0);
};
BooleanExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterBooleanExpr(this);
	}
};

BooleanExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitBooleanExpr(this);
	}
};

BooleanExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitBooleanExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ComparisonExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.left = null; // ExprContext;
	this.op = null; // ComparisonOperandContext;
	this.right = null; // ExprContext;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ComparisonExprContext.prototype = Object.create(ExprContext.prototype);
ComparisonExprContext.prototype.constructor = ComparisonExprContext;

VtlParser.ComparisonExprContext = ComparisonExprContext;

ComparisonExprContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

ComparisonExprContext.prototype.comparisonOperand = function () {
	return this.getTypedRuleContext(ComparisonOperandContext, 0);
};
ComparisonExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComparisonExpr(this);
	}
};

ComparisonExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComparisonExpr(this);
	}
};

ComparisonExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComparisonExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function UnaryExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.op = null; // Token;
	this.right = null; // ExprContext;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryExprContext.prototype = Object.create(ExprContext.prototype);
UnaryExprContext.prototype.constructor = UnaryExprContext;

VtlParser.UnaryExprContext = UnaryExprContext;

UnaryExprContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

UnaryExprContext.prototype.PLUS = function () {
	return this.getToken(VtlParser.PLUS, 0);
};

UnaryExprContext.prototype.MINUS = function () {
	return this.getToken(VtlParser.MINUS, 0);
};

UnaryExprContext.prototype.NOT = function () {
	return this.getToken(VtlParser.NOT, 0);
};
UnaryExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryExpr(this);
	}
};

UnaryExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryExpr(this);
	}
};

UnaryExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function FunctionsExpressionContext(parser, ctx) {
	ExprContext.call(this, parser);
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

FunctionsExpressionContext.prototype = Object.create(ExprContext.prototype);
FunctionsExpressionContext.prototype.constructor = FunctionsExpressionContext;

VtlParser.FunctionsExpressionContext = FunctionsExpressionContext;

FunctionsExpressionContext.prototype.functions = function () {
	return this.getTypedRuleContext(FunctionsContext, 0);
};
FunctionsExpressionContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterFunctionsExpression(this);
	}
};

FunctionsExpressionContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitFunctionsExpression(this);
	}
};

FunctionsExpressionContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitFunctionsExpression(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function IfExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.conditionalExpr = null; // ExprContext;
	this.thenExpr = null; // ExprContext;
	this.elseExpr = null; // ExprContext;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

IfExprContext.prototype = Object.create(ExprContext.prototype);
IfExprContext.prototype.constructor = IfExprContext;

VtlParser.IfExprContext = IfExprContext;

IfExprContext.prototype.IF = function () {
	return this.getToken(VtlParser.IF, 0);
};

IfExprContext.prototype.THEN = function () {
	return this.getToken(VtlParser.THEN, 0);
};

IfExprContext.prototype.ELSE = function () {
	return this.getToken(VtlParser.ELSE, 0);
};

IfExprContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};
IfExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterIfExpr(this);
	}
};

IfExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitIfExpr(this);
	}
};

IfExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitIfExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ClauseExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.dataset = null; // ExprContext;
	this.clause = null; // DatasetClauseContext;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ClauseExprContext.prototype = Object.create(ExprContext.prototype);
ClauseExprContext.prototype.constructor = ClauseExprContext;

VtlParser.ClauseExprContext = ClauseExprContext;

ClauseExprContext.prototype.QLPAREN = function () {
	return this.getToken(VtlParser.QLPAREN, 0);
};

ClauseExprContext.prototype.QRPAREN = function () {
	return this.getToken(VtlParser.QRPAREN, 0);
};

ClauseExprContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

ClauseExprContext.prototype.datasetClause = function () {
	return this.getTypedRuleContext(DatasetClauseContext, 0);
};
ClauseExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterClauseExpr(this);
	}
};

ClauseExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitClauseExpr(this);
	}
};

ClauseExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitClauseExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ArithmeticExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.left = null; // ExprContext;
	this.op = null; // Token;
	this.right = null; // ExprContext;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ArithmeticExprContext.prototype = Object.create(ExprContext.prototype);
ArithmeticExprContext.prototype.constructor = ArithmeticExprContext;

VtlParser.ArithmeticExprContext = ArithmeticExprContext;

ArithmeticExprContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

ArithmeticExprContext.prototype.MUL = function () {
	return this.getToken(VtlParser.MUL, 0);
};

ArithmeticExprContext.prototype.DIV = function () {
	return this.getToken(VtlParser.DIV, 0);
};
ArithmeticExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterArithmeticExpr(this);
	}
};

ArithmeticExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitArithmeticExpr(this);
	}
};

ArithmeticExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitArithmeticExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ParenthesisExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ParenthesisExprContext.prototype = Object.create(ExprContext.prototype);
ParenthesisExprContext.prototype.constructor = ParenthesisExprContext;

VtlParser.ParenthesisExprContext = ParenthesisExprContext;

ParenthesisExprContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ParenthesisExprContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

ParenthesisExprContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
ParenthesisExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterParenthesisExpr(this);
	}
};

ParenthesisExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitParenthesisExpr(this);
	}
};

ParenthesisExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitParenthesisExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ConstantExprContext(parser, ctx) {
	ExprContext.call(this, parser);
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ConstantExprContext.prototype = Object.create(ExprContext.prototype);
ConstantExprContext.prototype.constructor = ConstantExprContext;

VtlParser.ConstantExprContext = ConstantExprContext;

ConstantExprContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};
ConstantExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterConstantExpr(this);
	}
};

ConstantExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitConstantExpr(this);
	}
};

ConstantExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitConstantExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ArithmeticExprOrConcatContext(parser, ctx) {
	ExprContext.call(this, parser);
	this.left = null; // ExprContext;
	this.op = null; // Token;
	this.right = null; // ExprContext;
	ExprContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ArithmeticExprOrConcatContext.prototype = Object.create(ExprContext.prototype);
ArithmeticExprOrConcatContext.prototype.constructor = ArithmeticExprOrConcatContext;

VtlParser.ArithmeticExprOrConcatContext = ArithmeticExprOrConcatContext;

ArithmeticExprOrConcatContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

ArithmeticExprOrConcatContext.prototype.PLUS = function () {
	return this.getToken(VtlParser.PLUS, 0);
};

ArithmeticExprOrConcatContext.prototype.MINUS = function () {
	return this.getToken(VtlParser.MINUS, 0);
};

ArithmeticExprOrConcatContext.prototype.CONCAT = function () {
	return this.getToken(VtlParser.CONCAT, 0);
};
ArithmeticExprOrConcatContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterArithmeticExprOrConcat(this);
	}
};

ArithmeticExprOrConcatContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitArithmeticExprOrConcat(this);
	}
};

ArithmeticExprOrConcatContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitArithmeticExprOrConcat(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.prototype.expr = function (_p) {
	if (_p === undefined) {
		_p = 0;
	}
	var _parentctx = this._ctx;
	var _parentState = this.state;
	var localctx = new ExprContext(this, this._ctx, _parentState);
	var _prevctx = localctx;
	var _startState = 4;
	this.enterRecursionRule(localctx, 4, VtlParser.RULE_expr, _p);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 254;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
		switch (la_) {
			case 1:
				localctx = new ParenthesisExprContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 238;
				this.match(VtlParser.LPAREN);
				this.state = 239;
				this.expr(0);
				this.state = 240;
				this.match(VtlParser.RPAREN);
				break;

			case 2:
				localctx = new FunctionsExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 242;
				this.functions();
				break;

			case 3:
				localctx = new UnaryExprContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 243;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						((_la - 13) & ~0x1f) == 0 &&
						((1 << (_la - 13)) &
							((1 << (VtlParser.PLUS - 13)) |
								(1 << (VtlParser.MINUS - 13)) |
								(1 << (VtlParser.NOT - 13)))) !==
							0
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 244;
				localctx.right = this.expr(10);
				break;

			case 4:
				localctx = new IfExprContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 245;
				this.match(VtlParser.IF);
				this.state = 246;
				localctx.conditionalExpr = this.expr(0);
				this.state = 247;
				this.match(VtlParser.THEN);
				this.state = 248;
				localctx.thenExpr = this.expr(0);
				this.state = 249;
				this.match(VtlParser.ELSE);
				this.state = 250;
				localctx.elseExpr = this.expr(3);
				break;

			case 5:
				localctx = new ConstantExprContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 252;
				this.constant();
				break;

			case 6:
				localctx = new VarIdExprContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 253;
				this.varID();
				break;
		}
		this._ctx.stop = this._input.LT(-1);
		this.state = 288;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 5, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				if (this._parseListeners !== null) {
					this.triggerExitRuleEvent();
				}
				_prevctx = localctx;
				this.state = 286;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);
				switch (la_) {
					case 1:
						localctx = new ArithmeticExprContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 256;
						if (!this.precpred(this._ctx, 9)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 9)'
							);
						}
						this.state = 257;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === VtlParser.MUL || _la === VtlParser.DIV)) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 258;
						localctx.right = this.expr(10);
						break;

					case 2:
						localctx = new ArithmeticExprOrConcatContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 259;
						if (!this.precpred(this._ctx, 8)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 8)'
							);
						}
						this.state = 260;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (
							!(
								_la === VtlParser.PLUS ||
								_la === VtlParser.MINUS ||
								_la === VtlParser.CONCAT
							)
						) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 261;
						localctx.right = this.expr(9);
						break;

					case 3:
						localctx = new ComparisonExprContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 262;
						if (!this.precpred(this._ctx, 7)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 7)'
							);
						}
						this.state = 263;
						localctx.op = this.comparisonOperand();
						this.state = 264;
						localctx.right = this.expr(8);
						break;

					case 4:
						localctx = new BooleanExprContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 266;
						if (!this.precpred(this._ctx, 5)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 5)'
							);
						}
						this.state = 267;
						localctx.op = this.match(VtlParser.AND);
						this.state = 268;
						localctx.right = this.expr(6);
						break;

					case 5:
						localctx = new BooleanExprContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 269;
						if (!this.precpred(this._ctx, 4)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 4)'
							);
						}
						this.state = 270;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === VtlParser.OR || _la === VtlParser.XOR)) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 271;
						localctx.right = this.expr(5);
						break;

					case 6:
						localctx = new ClauseExprContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						localctx.dataset = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 272;
						if (!this.precpred(this._ctx, 12)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 12)'
							);
						}
						this.state = 273;
						this.match(VtlParser.QLPAREN);
						this.state = 274;
						localctx.clause = this.datasetClause();
						this.state = 275;
						this.match(VtlParser.QRPAREN);
						break;

					case 7:
						localctx = new MembershipExprContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 277;
						if (!this.precpred(this._ctx, 11)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 11)'
							);
						}
						this.state = 278;
						this.match(VtlParser.MEMBERSHIP);
						this.state = 279;
						this.simpleComponentId();
						break;

					case 8:
						localctx = new InNotInExprContext(
							this,
							new ExprContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_expr
						);
						this.state = 280;
						if (!this.precpred(this._ctx, 6)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 6)'
							);
						}
						this.state = 281;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === VtlParser.IN || _la === VtlParser.NOT_IN)) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 284;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
							case VtlParser.GLPAREN:
								this.state = 282;
								this.lists();
								break;
							case VtlParser.IDENTIFIER:
								this.state = 283;
								this.valueDomainID();
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
						break;
				}
			}
			this.state = 290;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 5, this._ctx);
		}
	} catch (error) {
		if (error instanceof antlr4.error.RecognitionException) {
			localctx.exception = error;
			this._errHandler.reportError(this, error);
			this._errHandler.recover(this, error);
		} else {
			throw error;
		}
	} finally {
		this.unrollRecursionContexts(_parentctx);
	}
	return localctx;
};

function ExprComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_exprComponent;
	return this;
}

ExprComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ExprComponentContext.prototype.constructor = ExprComponentContext;

ExprComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ArithmeticExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	this.left = null; // ExprComponentContext;
	this.op = null; // Token;
	this.right = null; // ExprComponentContext;
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ArithmeticExprCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
ArithmeticExprCompContext.prototype.constructor = ArithmeticExprCompContext;

VtlParser.ArithmeticExprCompContext = ArithmeticExprCompContext;

ArithmeticExprCompContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};

ArithmeticExprCompContext.prototype.MUL = function () {
	return this.getToken(VtlParser.MUL, 0);
};

ArithmeticExprCompContext.prototype.DIV = function () {
	return this.getToken(VtlParser.DIV, 0);
};
ArithmeticExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterArithmeticExprComp(this);
	}
};

ArithmeticExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitArithmeticExprComp(this);
	}
};

ArithmeticExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitArithmeticExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function IfExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	this.conditionalExpr = null; // ExprComponentContext;
	this.thenExpr = null; // ExprComponentContext;
	this.elseExpr = null; // ExprComponentContext;
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

IfExprCompContext.prototype = Object.create(ExprComponentContext.prototype);
IfExprCompContext.prototype.constructor = IfExprCompContext;

VtlParser.IfExprCompContext = IfExprCompContext;

IfExprCompContext.prototype.IF = function () {
	return this.getToken(VtlParser.IF, 0);
};

IfExprCompContext.prototype.THEN = function () {
	return this.getToken(VtlParser.THEN, 0);
};

IfExprCompContext.prototype.ELSE = function () {
	return this.getToken(VtlParser.ELSE, 0);
};

IfExprCompContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};
IfExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterIfExprComp(this);
	}
};

IfExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitIfExprComp(this);
	}
};

IfExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitIfExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ComparisonExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	this.left = null; // ExprComponentContext;
	this.right = null; // ExprComponentContext;
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ComparisonExprCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
ComparisonExprCompContext.prototype.constructor = ComparisonExprCompContext;

VtlParser.ComparisonExprCompContext = ComparisonExprCompContext;

ComparisonExprCompContext.prototype.comparisonOperand = function () {
	return this.getTypedRuleContext(ComparisonOperandContext, 0);
};

ComparisonExprCompContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};
ComparisonExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComparisonExprComp(this);
	}
};

ComparisonExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComparisonExprComp(this);
	}
};

ComparisonExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComparisonExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function FunctionsExpressionCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

FunctionsExpressionCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
FunctionsExpressionCompContext.prototype.constructor = FunctionsExpressionCompContext;

VtlParser.FunctionsExpressionCompContext = FunctionsExpressionCompContext;

FunctionsExpressionCompContext.prototype.functionsComponents = function () {
	return this.getTypedRuleContext(FunctionsComponentsContext, 0);
};
FunctionsExpressionCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterFunctionsExpressionComp(this);
	}
};

FunctionsExpressionCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitFunctionsExpressionComp(this);
	}
};

FunctionsExpressionCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitFunctionsExpressionComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CompIdContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CompIdContext.prototype = Object.create(ExprComponentContext.prototype);
CompIdContext.prototype.constructor = CompIdContext;

VtlParser.CompIdContext = CompIdContext;

CompIdContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};
CompIdContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCompId(this);
	}
};

CompIdContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCompId(this);
	}
};

CompIdContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCompId(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ConstantExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ConstantExprCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
ConstantExprCompContext.prototype.constructor = ConstantExprCompContext;

VtlParser.ConstantExprCompContext = ConstantExprCompContext;

ConstantExprCompContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};
ConstantExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterConstantExprComp(this);
	}
};

ConstantExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitConstantExprComp(this);
	}
};

ConstantExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitConstantExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ArithmeticExprOrConcatCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	this.left = null; // ExprComponentContext;
	this.op = null; // Token;
	this.right = null; // ExprComponentContext;
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ArithmeticExprOrConcatCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
ArithmeticExprOrConcatCompContext.prototype.constructor = ArithmeticExprOrConcatCompContext;

VtlParser.ArithmeticExprOrConcatCompContext = ArithmeticExprOrConcatCompContext;

ArithmeticExprOrConcatCompContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};

ArithmeticExprOrConcatCompContext.prototype.PLUS = function () {
	return this.getToken(VtlParser.PLUS, 0);
};

ArithmeticExprOrConcatCompContext.prototype.MINUS = function () {
	return this.getToken(VtlParser.MINUS, 0);
};

ArithmeticExprOrConcatCompContext.prototype.CONCAT = function () {
	return this.getToken(VtlParser.CONCAT, 0);
};
ArithmeticExprOrConcatCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterArithmeticExprOrConcatComp(this);
	}
};

ArithmeticExprOrConcatCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitArithmeticExprOrConcatComp(this);
	}
};

ArithmeticExprOrConcatCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitArithmeticExprOrConcatComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ParenthesisExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ParenthesisExprCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
ParenthesisExprCompContext.prototype.constructor = ParenthesisExprCompContext;

VtlParser.ParenthesisExprCompContext = ParenthesisExprCompContext;

ParenthesisExprCompContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ParenthesisExprCompContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

ParenthesisExprCompContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
ParenthesisExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterParenthesisExprComp(this);
	}
};

ParenthesisExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitParenthesisExprComp(this);
	}
};

ParenthesisExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitParenthesisExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function InNotInExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	this.left = null; // ExprComponentContext;
	this.op = null; // Token;
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

InNotInExprCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
InNotInExprCompContext.prototype.constructor = InNotInExprCompContext;

VtlParser.InNotInExprCompContext = InNotInExprCompContext;

InNotInExprCompContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

InNotInExprCompContext.prototype.IN = function () {
	return this.getToken(VtlParser.IN, 0);
};

InNotInExprCompContext.prototype.NOT_IN = function () {
	return this.getToken(VtlParser.NOT_IN, 0);
};

InNotInExprCompContext.prototype.lists = function () {
	return this.getTypedRuleContext(ListsContext, 0);
};

InNotInExprCompContext.prototype.valueDomainID = function () {
	return this.getTypedRuleContext(ValueDomainIDContext, 0);
};
InNotInExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterInNotInExprComp(this);
	}
};

InNotInExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitInNotInExprComp(this);
	}
};

InNotInExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitInNotInExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function UnaryExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	this.op = null; // Token;
	this.right = null; // ExprComponentContext;
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryExprCompContext.prototype = Object.create(ExprComponentContext.prototype);
UnaryExprCompContext.prototype.constructor = UnaryExprCompContext;

VtlParser.UnaryExprCompContext = UnaryExprCompContext;

UnaryExprCompContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

UnaryExprCompContext.prototype.PLUS = function () {
	return this.getToken(VtlParser.PLUS, 0);
};

UnaryExprCompContext.prototype.MINUS = function () {
	return this.getToken(VtlParser.MINUS, 0);
};

UnaryExprCompContext.prototype.NOT = function () {
	return this.getToken(VtlParser.NOT, 0);
};
UnaryExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryExprComp(this);
	}
};

UnaryExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryExprComp(this);
	}
};

UnaryExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function BooleanExprCompContext(parser, ctx) {
	ExprComponentContext.call(this, parser);
	this.left = null; // ExprComponentContext;
	this.op = null; // Token;
	this.right = null; // ExprComponentContext;
	ExprComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

BooleanExprCompContext.prototype = Object.create(
	ExprComponentContext.prototype
);
BooleanExprCompContext.prototype.constructor = BooleanExprCompContext;

VtlParser.BooleanExprCompContext = BooleanExprCompContext;

BooleanExprCompContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};

BooleanExprCompContext.prototype.AND = function () {
	return this.getToken(VtlParser.AND, 0);
};

BooleanExprCompContext.prototype.OR = function () {
	return this.getToken(VtlParser.OR, 0);
};

BooleanExprCompContext.prototype.XOR = function () {
	return this.getToken(VtlParser.XOR, 0);
};
BooleanExprCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterBooleanExprComp(this);
	}
};

BooleanExprCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitBooleanExprComp(this);
	}
};

BooleanExprCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitBooleanExprComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.prototype.exprComponent = function (_p) {
	if (_p === undefined) {
		_p = 0;
	}
	var _parentctx = this._ctx;
	var _parentState = this.state;
	var localctx = new ExprComponentContext(this, this._ctx, _parentState);
	var _prevctx = localctx;
	var _startState = 6;
	this.enterRecursionRule(localctx, 6, VtlParser.RULE_exprComponent, _p);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 308;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
		switch (la_) {
			case 1:
				localctx = new ParenthesisExprCompContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 292;
				this.match(VtlParser.LPAREN);
				this.state = 293;
				this.exprComponent(0);
				this.state = 294;
				this.match(VtlParser.RPAREN);
				break;

			case 2:
				localctx = new FunctionsExpressionCompContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 296;
				this.functionsComponents();
				break;

			case 3:
				localctx = new UnaryExprCompContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 297;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						((_la - 13) & ~0x1f) == 0 &&
						((1 << (_la - 13)) &
							((1 << (VtlParser.PLUS - 13)) |
								(1 << (VtlParser.MINUS - 13)) |
								(1 << (VtlParser.NOT - 13)))) !==
							0
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 298;
				localctx.right = this.exprComponent(10);
				break;

			case 4:
				localctx = new IfExprCompContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 299;
				this.match(VtlParser.IF);
				this.state = 300;
				localctx.conditionalExpr = this.exprComponent(0);
				this.state = 301;
				this.match(VtlParser.THEN);
				this.state = 302;
				localctx.thenExpr = this.exprComponent(0);
				this.state = 303;
				this.match(VtlParser.ELSE);
				this.state = 304;
				localctx.elseExpr = this.exprComponent(3);
				break;

			case 5:
				localctx = new ConstantExprCompContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 306;
				this.constant();
				break;

			case 6:
				localctx = new CompIdContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 307;
				this.componentID();
				break;
		}
		this._ctx.stop = this._input.LT(-1);
		this.state = 334;
		this._errHandler.sync(this);
		var _alt = this._interp.adaptivePredict(this._input, 9, this._ctx);
		while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
			if (_alt === 1) {
				if (this._parseListeners !== null) {
					this.triggerExitRuleEvent();
				}
				_prevctx = localctx;
				this.state = 332;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
				switch (la_) {
					case 1:
						localctx = new ArithmeticExprCompContext(
							this,
							new ExprComponentContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_exprComponent
						);
						this.state = 310;
						if (!this.precpred(this._ctx, 9)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 9)'
							);
						}
						this.state = 311;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === VtlParser.MUL || _la === VtlParser.DIV)) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 312;
						localctx.right = this.exprComponent(10);
						break;

					case 2:
						localctx = new ArithmeticExprOrConcatCompContext(
							this,
							new ExprComponentContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_exprComponent
						);
						this.state = 313;
						if (!this.precpred(this._ctx, 8)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 8)'
							);
						}
						this.state = 314;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (
							!(
								_la === VtlParser.PLUS ||
								_la === VtlParser.MINUS ||
								_la === VtlParser.CONCAT
							)
						) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 315;
						localctx.right = this.exprComponent(9);
						break;

					case 3:
						localctx = new ComparisonExprCompContext(
							this,
							new ExprComponentContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_exprComponent
						);
						this.state = 316;
						if (!this.precpred(this._ctx, 7)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 7)'
							);
						}
						this.state = 317;
						this.comparisonOperand();
						this.state = 318;
						localctx.right = this.exprComponent(8);
						break;

					case 4:
						localctx = new BooleanExprCompContext(
							this,
							new ExprComponentContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_exprComponent
						);
						this.state = 320;
						if (!this.precpred(this._ctx, 5)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 5)'
							);
						}
						this.state = 321;
						localctx.op = this.match(VtlParser.AND);
						this.state = 322;
						localctx.right = this.exprComponent(6);
						break;

					case 5:
						localctx = new BooleanExprCompContext(
							this,
							new ExprComponentContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_exprComponent
						);
						this.state = 323;
						if (!this.precpred(this._ctx, 4)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 4)'
							);
						}
						this.state = 324;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === VtlParser.OR || _la === VtlParser.XOR)) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 325;
						localctx.right = this.exprComponent(5);
						break;

					case 6:
						localctx = new InNotInExprCompContext(
							this,
							new ExprComponentContext(this, _parentctx, _parentState)
						);
						localctx.left = _prevctx;
						this.pushNewRecursionContext(
							localctx,
							_startState,
							VtlParser.RULE_exprComponent
						);
						this.state = 326;
						if (!this.precpred(this._ctx, 6)) {
							throw new antlr4.error.FailedPredicateException(
								this,
								'this.precpred(this._ctx, 6)'
							);
						}
						this.state = 327;
						localctx.op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === VtlParser.IN || _la === VtlParser.NOT_IN)) {
							localctx.op = this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 330;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
							case VtlParser.GLPAREN:
								this.state = 328;
								this.lists();
								break;
							case VtlParser.IDENTIFIER:
								this.state = 329;
								this.valueDomainID();
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
						break;
				}
			}
			this.state = 336;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 9, this._ctx);
		}
	} catch (error) {
		if (error instanceof antlr4.error.RecognitionException) {
			localctx.exception = error;
			this._errHandler.reportError(this, error);
			this._errHandler.recover(this, error);
		} else {
			throw error;
		}
	} finally {
		this.unrollRecursionContexts(_parentctx);
	}
	return localctx;
};

function FunctionsComponentsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_functionsComponents;
	return this;
}

FunctionsComponentsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
FunctionsComponentsContext.prototype.constructor = FunctionsComponentsContext;

FunctionsComponentsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NumericFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

NumericFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
NumericFunctionsComponentsContext.prototype.constructor = NumericFunctionsComponentsContext;

VtlParser.NumericFunctionsComponentsContext = NumericFunctionsComponentsContext;

NumericFunctionsComponentsContext.prototype.numericOperatorsComponent = function () {
	return this.getTypedRuleContext(NumericOperatorsComponentContext, 0);
};
NumericFunctionsComponentsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterNumericFunctionsComponents(this);
	}
};

NumericFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitNumericFunctionsComponents(this);
	}
};

NumericFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitNumericFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function StringFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

StringFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
StringFunctionsComponentsContext.prototype.constructor = StringFunctionsComponentsContext;

VtlParser.StringFunctionsComponentsContext = StringFunctionsComponentsContext;

StringFunctionsComponentsContext.prototype.stringOperatorsComponent = function () {
	return this.getTypedRuleContext(StringOperatorsComponentContext, 0);
};
StringFunctionsComponentsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterStringFunctionsComponents(this);
	}
};

StringFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitStringFunctionsComponents(this);
	}
};

StringFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitStringFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ComparisonFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ComparisonFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
ComparisonFunctionsComponentsContext.prototype.constructor = ComparisonFunctionsComponentsContext;

VtlParser.ComparisonFunctionsComponentsContext = ComparisonFunctionsComponentsContext;

ComparisonFunctionsComponentsContext.prototype.comparisonOperatorsComponent = function () {
	return this.getTypedRuleContext(ComparisonOperatorsComponentContext, 0);
};
ComparisonFunctionsComponentsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComparisonFunctionsComponents(this);
	}
};

ComparisonFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComparisonFunctionsComponents(this);
	}
};

ComparisonFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComparisonFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function TimeFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

TimeFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
TimeFunctionsComponentsContext.prototype.constructor = TimeFunctionsComponentsContext;

VtlParser.TimeFunctionsComponentsContext = TimeFunctionsComponentsContext;

TimeFunctionsComponentsContext.prototype.timeOperatorsComponent = function () {
	return this.getTypedRuleContext(TimeOperatorsComponentContext, 0);
};
TimeFunctionsComponentsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterTimeFunctionsComponents(this);
	}
};

TimeFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitTimeFunctionsComponents(this);
	}
};

TimeFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitTimeFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function GenericFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

GenericFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
GenericFunctionsComponentsContext.prototype.constructor = GenericFunctionsComponentsContext;

VtlParser.GenericFunctionsComponentsContext = GenericFunctionsComponentsContext;

GenericFunctionsComponentsContext.prototype.genericOperatorsComponent = function () {
	return this.getTypedRuleContext(GenericOperatorsComponentContext, 0);
};
GenericFunctionsComponentsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterGenericFunctionsComponents(this);
	}
};

GenericFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitGenericFunctionsComponents(this);
	}
};

GenericFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitGenericFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function AnalyticFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AnalyticFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
AnalyticFunctionsComponentsContext.prototype.constructor = AnalyticFunctionsComponentsContext;

VtlParser.AnalyticFunctionsComponentsContext = AnalyticFunctionsComponentsContext;

AnalyticFunctionsComponentsContext.prototype.anFunctionComponent = function () {
	return this.getTypedRuleContext(AnFunctionComponentContext, 0);
};
AnalyticFunctionsComponentsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAnalyticFunctionsComponents(this);
	}
};

AnalyticFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAnalyticFunctionsComponents(this);
	}
};

AnalyticFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAnalyticFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ConditionalFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ConditionalFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
ConditionalFunctionsComponentsContext.prototype.constructor = ConditionalFunctionsComponentsContext;

VtlParser.ConditionalFunctionsComponentsContext = ConditionalFunctionsComponentsContext;

ConditionalFunctionsComponentsContext.prototype.conditionalOperatorsComponent = function () {
	return this.getTypedRuleContext(ConditionalOperatorsComponentContext, 0);
};
ConditionalFunctionsComponentsContext.prototype.enterRule = function (
	listener
) {
	if (listener instanceof VtlListener) {
		listener.enterConditionalFunctionsComponents(this);
	}
};

ConditionalFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitConditionalFunctionsComponents(this);
	}
};

ConditionalFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitConditionalFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function AggregateFunctionsComponentsContext(parser, ctx) {
	FunctionsComponentsContext.call(this, parser);
	FunctionsComponentsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AggregateFunctionsComponentsContext.prototype = Object.create(
	FunctionsComponentsContext.prototype
);
AggregateFunctionsComponentsContext.prototype.constructor = AggregateFunctionsComponentsContext;

VtlParser.AggregateFunctionsComponentsContext = AggregateFunctionsComponentsContext;

AggregateFunctionsComponentsContext.prototype.aggrOperators = function () {
	return this.getTypedRuleContext(AggrOperatorsContext, 0);
};
AggregateFunctionsComponentsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAggregateFunctionsComponents(this);
	}
};

AggregateFunctionsComponentsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAggregateFunctionsComponents(this);
	}
};

AggregateFunctionsComponentsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAggregateFunctionsComponents(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.FunctionsComponentsContext = FunctionsComponentsContext;

VtlParser.prototype.functionsComponents = function () {
	var localctx = new FunctionsComponentsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 8, VtlParser.RULE_functionsComponents);
	try {
		this.state = 345;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
		switch (la_) {
			case 1:
				localctx = new GenericFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 337;
				this.genericOperatorsComponent();
				break;

			case 2:
				localctx = new StringFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 338;
				this.stringOperatorsComponent();
				break;

			case 3:
				localctx = new NumericFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 339;
				this.numericOperatorsComponent();
				break;

			case 4:
				localctx = new ComparisonFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 340;
				this.comparisonOperatorsComponent();
				break;

			case 5:
				localctx = new TimeFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				this.state = 341;
				this.timeOperatorsComponent();
				break;

			case 6:
				localctx = new ConditionalFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				this.state = 342;
				this.conditionalOperatorsComponent();
				break;

			case 7:
				localctx = new AggregateFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				this.state = 343;
				this.aggrOperators();
				break;

			case 8:
				localctx = new AnalyticFunctionsComponentsContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				this.state = 344;
				this.anFunctionComponent();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_functions;
	return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function HierarchyFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

HierarchyFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
HierarchyFunctionsContext.prototype.constructor = HierarchyFunctionsContext;

VtlParser.HierarchyFunctionsContext = HierarchyFunctionsContext;

HierarchyFunctionsContext.prototype.hierarchyOperators = function () {
	return this.getTypedRuleContext(HierarchyOperatorsContext, 0);
};
HierarchyFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterHierarchyFunctions(this);
	}
};

HierarchyFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitHierarchyFunctions(this);
	}
};

HierarchyFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitHierarchyFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function StringFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

StringFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
StringFunctionsContext.prototype.constructor = StringFunctionsContext;

VtlParser.StringFunctionsContext = StringFunctionsContext;

StringFunctionsContext.prototype.stringOperators = function () {
	return this.getTypedRuleContext(StringOperatorsContext, 0);
};
StringFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterStringFunctions(this);
	}
};

StringFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitStringFunctions(this);
	}
};

StringFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitStringFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ValidationFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ValidationFunctionsContext.prototype = Object.create(
	FunctionsContext.prototype
);
ValidationFunctionsContext.prototype.constructor = ValidationFunctionsContext;

VtlParser.ValidationFunctionsContext = ValidationFunctionsContext;

ValidationFunctionsContext.prototype.validationOperators = function () {
	return this.getTypedRuleContext(ValidationOperatorsContext, 0);
};
ValidationFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValidationFunctions(this);
	}
};

ValidationFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValidationFunctions(this);
	}
};

ValidationFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValidationFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function GenericFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

GenericFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
GenericFunctionsContext.prototype.constructor = GenericFunctionsContext;

VtlParser.GenericFunctionsContext = GenericFunctionsContext;

GenericFunctionsContext.prototype.genericOperators = function () {
	return this.getTypedRuleContext(GenericOperatorsContext, 0);
};
GenericFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterGenericFunctions(this);
	}
};

GenericFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitGenericFunctions(this);
	}
};

GenericFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitGenericFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ConditionalFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ConditionalFunctionsContext.prototype = Object.create(
	FunctionsContext.prototype
);
ConditionalFunctionsContext.prototype.constructor = ConditionalFunctionsContext;

VtlParser.ConditionalFunctionsContext = ConditionalFunctionsContext;

ConditionalFunctionsContext.prototype.conditionalOperators = function () {
	return this.getTypedRuleContext(ConditionalOperatorsContext, 0);
};
ConditionalFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterConditionalFunctions(this);
	}
};

ConditionalFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitConditionalFunctions(this);
	}
};

ConditionalFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitConditionalFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function AggregateFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AggregateFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
AggregateFunctionsContext.prototype.constructor = AggregateFunctionsContext;

VtlParser.AggregateFunctionsContext = AggregateFunctionsContext;

AggregateFunctionsContext.prototype.aggrOperatorsGrouping = function () {
	return this.getTypedRuleContext(AggrOperatorsGroupingContext, 0);
};
AggregateFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAggregateFunctions(this);
	}
};

AggregateFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAggregateFunctions(this);
	}
};

AggregateFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAggregateFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function JoinFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

JoinFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
JoinFunctionsContext.prototype.constructor = JoinFunctionsContext;

VtlParser.JoinFunctionsContext = JoinFunctionsContext;

JoinFunctionsContext.prototype.joinOperators = function () {
	return this.getTypedRuleContext(JoinOperatorsContext, 0);
};
JoinFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterJoinFunctions(this);
	}
};

JoinFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitJoinFunctions(this);
	}
};

JoinFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitJoinFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ComparisonFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ComparisonFunctionsContext.prototype = Object.create(
	FunctionsContext.prototype
);
ComparisonFunctionsContext.prototype.constructor = ComparisonFunctionsContext;

VtlParser.ComparisonFunctionsContext = ComparisonFunctionsContext;

ComparisonFunctionsContext.prototype.comparisonOperators = function () {
	return this.getTypedRuleContext(ComparisonOperatorsContext, 0);
};
ComparisonFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComparisonFunctions(this);
	}
};

ComparisonFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComparisonFunctions(this);
	}
};

ComparisonFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComparisonFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function NumericFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

NumericFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
NumericFunctionsContext.prototype.constructor = NumericFunctionsContext;

VtlParser.NumericFunctionsContext = NumericFunctionsContext;

NumericFunctionsContext.prototype.numericOperators = function () {
	return this.getTypedRuleContext(NumericOperatorsContext, 0);
};
NumericFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterNumericFunctions(this);
	}
};

NumericFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitNumericFunctions(this);
	}
};

NumericFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitNumericFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function TimeFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

TimeFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
TimeFunctionsContext.prototype.constructor = TimeFunctionsContext;

VtlParser.TimeFunctionsContext = TimeFunctionsContext;

TimeFunctionsContext.prototype.timeOperators = function () {
	return this.getTypedRuleContext(TimeOperatorsContext, 0);
};
TimeFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterTimeFunctions(this);
	}
};

TimeFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitTimeFunctions(this);
	}
};

TimeFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitTimeFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function SetFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

SetFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
SetFunctionsContext.prototype.constructor = SetFunctionsContext;

VtlParser.SetFunctionsContext = SetFunctionsContext;

SetFunctionsContext.prototype.setOperators = function () {
	return this.getTypedRuleContext(SetOperatorsContext, 0);
};
SetFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSetFunctions(this);
	}
};

SetFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSetFunctions(this);
	}
};

SetFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSetFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function AnalyticFunctionsContext(parser, ctx) {
	FunctionsContext.call(this, parser);
	FunctionsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AnalyticFunctionsContext.prototype = Object.create(FunctionsContext.prototype);
AnalyticFunctionsContext.prototype.constructor = AnalyticFunctionsContext;

VtlParser.AnalyticFunctionsContext = AnalyticFunctionsContext;

AnalyticFunctionsContext.prototype.anFunction = function () {
	return this.getTypedRuleContext(AnFunctionContext, 0);
};
AnalyticFunctionsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAnalyticFunctions(this);
	}
};

AnalyticFunctionsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAnalyticFunctions(this);
	}
};

AnalyticFunctionsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAnalyticFunctions(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.FunctionsContext = FunctionsContext;

VtlParser.prototype.functions = function () {
	var localctx = new FunctionsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 10, VtlParser.RULE_functions);
	try {
		this.state = 359;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
		switch (la_) {
			case 1:
				localctx = new JoinFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 347;
				this.joinOperators();
				break;

			case 2:
				localctx = new GenericFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 348;
				this.genericOperators();
				break;

			case 3:
				localctx = new StringFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 349;
				this.stringOperators();
				break;

			case 4:
				localctx = new NumericFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 350;
				this.numericOperators();
				break;

			case 5:
				localctx = new ComparisonFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				this.state = 351;
				this.comparisonOperators();
				break;

			case 6:
				localctx = new TimeFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				this.state = 352;
				this.timeOperators();
				break;

			case 7:
				localctx = new SetFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				this.state = 353;
				this.setOperators();
				break;

			case 8:
				localctx = new HierarchyFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				this.state = 354;
				this.hierarchyOperators();
				break;

			case 9:
				localctx = new ValidationFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				this.state = 355;
				this.validationOperators();
				break;

			case 10:
				localctx = new ConditionalFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				this.state = 356;
				this.conditionalOperators();
				break;

			case 11:
				localctx = new AggregateFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				this.state = 357;
				this.aggrOperatorsGrouping();
				break;

			case 12:
				localctx = new AnalyticFunctionsContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				this.state = 358;
				this.anFunction();
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DatasetClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_datasetClause;
	return this;
}

DatasetClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
DatasetClauseContext.prototype.constructor = DatasetClauseContext;

DatasetClauseContext.prototype.renameClause = function () {
	return this.getTypedRuleContext(RenameClauseContext, 0);
};

DatasetClauseContext.prototype.aggrClause = function () {
	return this.getTypedRuleContext(AggrClauseContext, 0);
};

DatasetClauseContext.prototype.filterClause = function () {
	return this.getTypedRuleContext(FilterClauseContext, 0);
};

DatasetClauseContext.prototype.calcClause = function () {
	return this.getTypedRuleContext(CalcClauseContext, 0);
};

DatasetClauseContext.prototype.keepOrDropClause = function () {
	return this.getTypedRuleContext(KeepOrDropClauseContext, 0);
};

DatasetClauseContext.prototype.pivotOrUnpivotClause = function () {
	return this.getTypedRuleContext(PivotOrUnpivotClauseContext, 0);
};

DatasetClauseContext.prototype.customPivotClause = function () {
	return this.getTypedRuleContext(CustomPivotClauseContext, 0);
};

DatasetClauseContext.prototype.subspaceClause = function () {
	return this.getTypedRuleContext(SubspaceClauseContext, 0);
};

DatasetClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDatasetClause(this);
	}
};

DatasetClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDatasetClause(this);
	}
};

DatasetClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDatasetClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.DatasetClauseContext = DatasetClauseContext;

VtlParser.prototype.datasetClause = function () {
	var localctx = new DatasetClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 12, VtlParser.RULE_datasetClause);
	try {
		this.state = 369;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.RENAME:
				this.enterOuterAlt(localctx, 1);
				this.state = 361;
				this.renameClause();
				break;
			case VtlParser.AGGREGATE:
				this.enterOuterAlt(localctx, 2);
				this.state = 362;
				this.aggrClause();
				break;
			case VtlParser.FILTER:
				this.enterOuterAlt(localctx, 3);
				this.state = 363;
				this.filterClause();
				break;
			case VtlParser.CALC:
				this.enterOuterAlt(localctx, 4);
				this.state = 364;
				this.calcClause();
				break;
			case VtlParser.DROP:
			case VtlParser.KEEP:
				this.enterOuterAlt(localctx, 5);
				this.state = 365;
				this.keepOrDropClause();
				break;
			case VtlParser.PIVOT:
			case VtlParser.UNPIVOT:
				this.enterOuterAlt(localctx, 6);
				this.state = 366;
				this.pivotOrUnpivotClause();
				break;
			case VtlParser.CUSTOMPIVOT:
				this.enterOuterAlt(localctx, 7);
				this.state = 367;
				this.customPivotClause();
				break;
			case VtlParser.SUBSPACE:
				this.enterOuterAlt(localctx, 8);
				this.state = 368;
				this.subspaceClause();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RenameClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_renameClause;
	return this;
}

RenameClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RenameClauseContext.prototype.constructor = RenameClauseContext;

RenameClauseContext.prototype.RENAME = function () {
	return this.getToken(VtlParser.RENAME, 0);
};

RenameClauseContext.prototype.renameClauseItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(RenameClauseItemContext);
	} else {
		return this.getTypedRuleContext(RenameClauseItemContext, i);
	}
};

RenameClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

RenameClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRenameClause(this);
	}
};

RenameClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRenameClause(this);
	}
};

RenameClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRenameClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RenameClauseContext = RenameClauseContext;

VtlParser.prototype.renameClause = function () {
	var localctx = new RenameClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 14, VtlParser.RULE_renameClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 371;
		this.match(VtlParser.RENAME);
		this.state = 372;
		this.renameClauseItem();
		this.state = 377;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 373;
			this.match(VtlParser.COMMA);
			this.state = 374;
			this.renameClauseItem();
			this.state = 379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AggrClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_aggrClause;
	return this;
}

AggrClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrClauseContext.prototype.constructor = AggrClauseContext;

AggrClauseContext.prototype.AGGREGATE = function () {
	return this.getToken(VtlParser.AGGREGATE, 0);
};

AggrClauseContext.prototype.aggregateClause = function () {
	return this.getTypedRuleContext(AggregateClauseContext, 0);
};

AggrClauseContext.prototype.groupingClause = function () {
	return this.getTypedRuleContext(GroupingClauseContext, 0);
};

AggrClauseContext.prototype.havingClause = function () {
	return this.getTypedRuleContext(HavingClauseContext, 0);
};

AggrClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAggrClause(this);
	}
};

AggrClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAggrClause(this);
	}
};

AggrClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAggrClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AggrClauseContext = AggrClauseContext;

VtlParser.prototype.aggrClause = function () {
	var localctx = new AggrClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 16, VtlParser.RULE_aggrClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 380;
		this.match(VtlParser.AGGREGATE);
		this.state = 381;
		this.aggregateClause();
		this.state = 386;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.GROUP) {
			this.state = 382;
			this.groupingClause();
			this.state = 384;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === VtlParser.HAVING) {
				this.state = 383;
				this.havingClause();
			}
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function FilterClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_filterClause;
	return this;
}

FilterClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
FilterClauseContext.prototype.constructor = FilterClauseContext;

FilterClauseContext.prototype.FILTER = function () {
	return this.getToken(VtlParser.FILTER, 0);
};

FilterClauseContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

FilterClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterFilterClause(this);
	}
};

FilterClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitFilterClause(this);
	}
};

FilterClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitFilterClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.FilterClauseContext = FilterClauseContext;

VtlParser.prototype.filterClause = function () {
	var localctx = new FilterClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 18, VtlParser.RULE_filterClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 388;
		this.match(VtlParser.FILTER);
		this.state = 389;
		this.exprComponent(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CalcClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_calcClause;
	return this;
}

CalcClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcClauseContext.prototype.constructor = CalcClauseContext;

CalcClauseContext.prototype.CALC = function () {
	return this.getToken(VtlParser.CALC, 0);
};

CalcClauseContext.prototype.calcClauseItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(CalcClauseItemContext);
	} else {
		return this.getTypedRuleContext(CalcClauseItemContext, i);
	}
};

CalcClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

CalcClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCalcClause(this);
	}
};

CalcClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCalcClause(this);
	}
};

CalcClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCalcClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.CalcClauseContext = CalcClauseContext;

VtlParser.prototype.calcClause = function () {
	var localctx = new CalcClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 20, VtlParser.RULE_calcClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 391;
		this.match(VtlParser.CALC);
		this.state = 392;
		this.calcClauseItem();
		this.state = 397;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 393;
			this.match(VtlParser.COMMA);
			this.state = 394;
			this.calcClauseItem();
			this.state = 399;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function KeepOrDropClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_keepOrDropClause;
	this.op = null; // Token
	return this;
}

KeepOrDropClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
KeepOrDropClauseContext.prototype.constructor = KeepOrDropClauseContext;

KeepOrDropClauseContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

KeepOrDropClauseContext.prototype.KEEP = function () {
	return this.getToken(VtlParser.KEEP, 0);
};

KeepOrDropClauseContext.prototype.DROP = function () {
	return this.getToken(VtlParser.DROP, 0);
};

KeepOrDropClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

KeepOrDropClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterKeepOrDropClause(this);
	}
};

KeepOrDropClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitKeepOrDropClause(this);
	}
};

KeepOrDropClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitKeepOrDropClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.KeepOrDropClauseContext = KeepOrDropClauseContext;

VtlParser.prototype.keepOrDropClause = function () {
	var localctx = new KeepOrDropClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 22, VtlParser.RULE_keepOrDropClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 400;
		localctx.op = this._input.LT(1);
		_la = this._input.LA(1);
		if (!(_la === VtlParser.DROP || _la === VtlParser.KEEP)) {
			localctx.op = this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 401;
		this.componentID();
		this.state = 406;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 402;
			this.match(VtlParser.COMMA);
			this.state = 403;
			this.componentID();
			this.state = 408;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PivotOrUnpivotClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_pivotOrUnpivotClause;
	this.op = null; // Token
	this.id_ = null; // ComponentIDContext
	this.mea = null; // ComponentIDContext
	return this;
}

PivotOrUnpivotClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
PivotOrUnpivotClauseContext.prototype.constructor = PivotOrUnpivotClauseContext;

PivotOrUnpivotClauseContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

PivotOrUnpivotClauseContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

PivotOrUnpivotClauseContext.prototype.PIVOT = function () {
	return this.getToken(VtlParser.PIVOT, 0);
};

PivotOrUnpivotClauseContext.prototype.UNPIVOT = function () {
	return this.getToken(VtlParser.UNPIVOT, 0);
};

PivotOrUnpivotClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterPivotOrUnpivotClause(this);
	}
};

PivotOrUnpivotClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitPivotOrUnpivotClause(this);
	}
};

PivotOrUnpivotClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitPivotOrUnpivotClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.PivotOrUnpivotClauseContext = PivotOrUnpivotClauseContext;

VtlParser.prototype.pivotOrUnpivotClause = function () {
	var localctx = new PivotOrUnpivotClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 24, VtlParser.RULE_pivotOrUnpivotClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 409;
		localctx.op = this._input.LT(1);
		_la = this._input.LA(1);
		if (!(_la === VtlParser.PIVOT || _la === VtlParser.UNPIVOT)) {
			localctx.op = this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 410;
		localctx.id_ = this.componentID();
		this.state = 411;
		this.match(VtlParser.COMMA);
		this.state = 412;
		localctx.mea = this.componentID();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CustomPivotClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_customPivotClause;
	this.id_ = null; // ComponentIDContext
	this.mea = null; // ComponentIDContext
	return this;
}

CustomPivotClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
CustomPivotClauseContext.prototype.constructor = CustomPivotClauseContext;

CustomPivotClauseContext.prototype.CUSTOMPIVOT = function () {
	return this.getToken(VtlParser.CUSTOMPIVOT, 0);
};

CustomPivotClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

CustomPivotClauseContext.prototype.IN = function () {
	return this.getToken(VtlParser.IN, 0);
};

CustomPivotClauseContext.prototype.constant = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ConstantContext);
	} else {
		return this.getTypedRuleContext(ConstantContext, i);
	}
};

CustomPivotClauseContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

CustomPivotClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCustomPivotClause(this);
	}
};

CustomPivotClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCustomPivotClause(this);
	}
};

CustomPivotClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCustomPivotClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.CustomPivotClauseContext = CustomPivotClauseContext;

VtlParser.prototype.customPivotClause = function () {
	var localctx = new CustomPivotClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 26, VtlParser.RULE_customPivotClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 414;
		this.match(VtlParser.CUSTOMPIVOT);
		this.state = 415;
		localctx.id_ = this.componentID();
		this.state = 416;
		this.match(VtlParser.COMMA);
		this.state = 417;
		localctx.mea = this.componentID();
		this.state = 418;
		this.match(VtlParser.IN);
		this.state = 419;
		this.constant();
		this.state = 424;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 420;
			this.match(VtlParser.COMMA);
			this.state = 421;
			this.constant();
			this.state = 426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SubspaceClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_subspaceClause;
	return this;
}

SubspaceClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
SubspaceClauseContext.prototype.constructor = SubspaceClauseContext;

SubspaceClauseContext.prototype.SUBSPACE = function () {
	return this.getToken(VtlParser.SUBSPACE, 0);
};

SubspaceClauseContext.prototype.subspaceClauseItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SubspaceClauseItemContext);
	} else {
		return this.getTypedRuleContext(SubspaceClauseItemContext, i);
	}
};

SubspaceClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

SubspaceClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSubspaceClause(this);
	}
};

SubspaceClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSubspaceClause(this);
	}
};

SubspaceClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSubspaceClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.SubspaceClauseContext = SubspaceClauseContext;

VtlParser.prototype.subspaceClause = function () {
	var localctx = new SubspaceClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 28, VtlParser.RULE_subspaceClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 427;
		this.match(VtlParser.SUBSPACE);
		this.state = 428;
		this.subspaceClauseItem();
		this.state = 433;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 429;
			this.match(VtlParser.COMMA);
			this.state = 430;
			this.subspaceClauseItem();
			this.state = 435;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_joinOperators;
	return this;
}

JoinOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
JoinOperatorsContext.prototype.constructor = JoinOperatorsContext;

JoinOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JoinExprContext(parser, ctx) {
	JoinOperatorsContext.call(this, parser);
	this.joinKeyword = null; // Token;
	JoinOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

JoinExprContext.prototype = Object.create(JoinOperatorsContext.prototype);
JoinExprContext.prototype.constructor = JoinExprContext;

VtlParser.JoinExprContext = JoinExprContext;

JoinExprContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

JoinExprContext.prototype.joinClause = function () {
	return this.getTypedRuleContext(JoinClauseContext, 0);
};

JoinExprContext.prototype.joinBody = function () {
	return this.getTypedRuleContext(JoinBodyContext, 0);
};

JoinExprContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

JoinExprContext.prototype.INNER_JOIN = function () {
	return this.getToken(VtlParser.INNER_JOIN, 0);
};

JoinExprContext.prototype.LEFT_JOIN = function () {
	return this.getToken(VtlParser.LEFT_JOIN, 0);
};

JoinExprContext.prototype.joinClauseWithoutUsing = function () {
	return this.getTypedRuleContext(JoinClauseWithoutUsingContext, 0);
};

JoinExprContext.prototype.FULL_JOIN = function () {
	return this.getToken(VtlParser.FULL_JOIN, 0);
};

JoinExprContext.prototype.CROSS_JOIN = function () {
	return this.getToken(VtlParser.CROSS_JOIN, 0);
};
JoinExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterJoinExpr(this);
	}
};

JoinExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitJoinExpr(this);
	}
};

JoinExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitJoinExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.JoinOperatorsContext = JoinOperatorsContext;

VtlParser.prototype.joinOperators = function () {
	var localctx = new JoinOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 30, VtlParser.RULE_joinOperators);
	var _la = 0; // Token type
	try {
		this.state = 448;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.INNER_JOIN:
			case VtlParser.LEFT_JOIN:
				localctx = new JoinExprContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 436;
				localctx.joinKeyword = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.INNER_JOIN || _la === VtlParser.LEFT_JOIN)) {
					localctx.joinKeyword = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 437;
				this.match(VtlParser.LPAREN);
				this.state = 438;
				this.joinClause();
				this.state = 439;
				this.joinBody();
				this.state = 440;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CROSS_JOIN:
			case VtlParser.FULL_JOIN:
				localctx = new JoinExprContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 442;
				localctx.joinKeyword = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.CROSS_JOIN || _la === VtlParser.FULL_JOIN)) {
					localctx.joinKeyword = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 443;
				this.match(VtlParser.LPAREN);
				this.state = 444;
				this.joinClauseWithoutUsing();
				this.state = 445;
				this.joinBody();
				this.state = 446;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DefOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_defOperators;
	return this;
}

DefOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
DefOperatorsContext.prototype.constructor = DefOperatorsContext;

DefOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DefOperatorContext(parser, ctx) {
	DefOperatorsContext.call(this, parser);
	DefOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

DefOperatorContext.prototype = Object.create(DefOperatorsContext.prototype);
DefOperatorContext.prototype.constructor = DefOperatorContext;

VtlParser.DefOperatorContext = DefOperatorContext;

DefOperatorContext.prototype.DEFINE = function () {
	return this.getToken(VtlParser.DEFINE, 0);
};

DefOperatorContext.prototype.OPERATOR = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.OPERATOR);
	} else {
		return this.getToken(VtlParser.OPERATOR, i);
	}
};

DefOperatorContext.prototype.operatorID = function () {
	return this.getTypedRuleContext(OperatorIDContext, 0);
};

DefOperatorContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

DefOperatorContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

DefOperatorContext.prototype.IS = function () {
	return this.getToken(VtlParser.IS, 0);
};

DefOperatorContext.prototype.END = function () {
	return this.getToken(VtlParser.END, 0);
};

DefOperatorContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

DefOperatorContext.prototype.parameterItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ParameterItemContext);
	} else {
		return this.getTypedRuleContext(ParameterItemContext, i);
	}
};

DefOperatorContext.prototype.RETURNS = function () {
	return this.getToken(VtlParser.RETURNS, 0);
};

DefOperatorContext.prototype.outputParameterType = function () {
	return this.getTypedRuleContext(OutputParameterTypeContext, 0);
};

DefOperatorContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

DefOperatorContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDefOperator(this);
	}
};

DefOperatorContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDefOperator(this);
	}
};

DefOperatorContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDefOperator(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function DefHierarchicalContext(parser, ctx) {
	DefOperatorsContext.call(this, parser);
	DefOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

DefHierarchicalContext.prototype = Object.create(DefOperatorsContext.prototype);
DefHierarchicalContext.prototype.constructor = DefHierarchicalContext;

VtlParser.DefHierarchicalContext = DefHierarchicalContext;

DefHierarchicalContext.prototype.DEFINE = function () {
	return this.getToken(VtlParser.DEFINE, 0);
};

DefHierarchicalContext.prototype.HIERARCHICAL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.HIERARCHICAL);
	} else {
		return this.getToken(VtlParser.HIERARCHICAL, i);
	}
};

DefHierarchicalContext.prototype.RULESET = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RULESET);
	} else {
		return this.getToken(VtlParser.RULESET, i);
	}
};

DefHierarchicalContext.prototype.rulesetID = function () {
	return this.getTypedRuleContext(RulesetIDContext, 0);
};

DefHierarchicalContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

DefHierarchicalContext.prototype.hierRuleSignature = function () {
	return this.getTypedRuleContext(HierRuleSignatureContext, 0);
};

DefHierarchicalContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

DefHierarchicalContext.prototype.IS = function () {
	return this.getToken(VtlParser.IS, 0);
};

DefHierarchicalContext.prototype.ruleClauseHierarchical = function () {
	return this.getTypedRuleContext(RuleClauseHierarchicalContext, 0);
};

DefHierarchicalContext.prototype.END = function () {
	return this.getToken(VtlParser.END, 0);
};
DefHierarchicalContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDefHierarchical(this);
	}
};

DefHierarchicalContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDefHierarchical(this);
	}
};

DefHierarchicalContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDefHierarchical(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function DefDatapointRulesetContext(parser, ctx) {
	DefOperatorsContext.call(this, parser);
	DefOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

DefDatapointRulesetContext.prototype = Object.create(
	DefOperatorsContext.prototype
);
DefDatapointRulesetContext.prototype.constructor = DefDatapointRulesetContext;

VtlParser.DefDatapointRulesetContext = DefDatapointRulesetContext;

DefDatapointRulesetContext.prototype.DEFINE = function () {
	return this.getToken(VtlParser.DEFINE, 0);
};

DefDatapointRulesetContext.prototype.DATAPOINT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.DATAPOINT);
	} else {
		return this.getToken(VtlParser.DATAPOINT, i);
	}
};

DefDatapointRulesetContext.prototype.RULESET = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RULESET);
	} else {
		return this.getToken(VtlParser.RULESET, i);
	}
};

DefDatapointRulesetContext.prototype.rulesetID = function () {
	return this.getTypedRuleContext(RulesetIDContext, 0);
};

DefDatapointRulesetContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

DefDatapointRulesetContext.prototype.rulesetSignature = function () {
	return this.getTypedRuleContext(RulesetSignatureContext, 0);
};

DefDatapointRulesetContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

DefDatapointRulesetContext.prototype.IS = function () {
	return this.getToken(VtlParser.IS, 0);
};

DefDatapointRulesetContext.prototype.ruleClauseDatapoint = function () {
	return this.getTypedRuleContext(RuleClauseDatapointContext, 0);
};

DefDatapointRulesetContext.prototype.END = function () {
	return this.getToken(VtlParser.END, 0);
};
DefDatapointRulesetContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDefDatapointRuleset(this);
	}
};

DefDatapointRulesetContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDefDatapointRuleset(this);
	}
};

DefDatapointRulesetContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDefDatapointRuleset(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.DefOperatorsContext = DefOperatorsContext;

VtlParser.prototype.defOperators = function () {
	var localctx = new DefOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 32, VtlParser.RULE_defOperators);
	var _la = 0; // Token type
	try {
		this.state = 500;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
		switch (la_) {
			case 1:
				localctx = new DefOperatorContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 450;
				this.match(VtlParser.DEFINE);
				this.state = 451;
				this.match(VtlParser.OPERATOR);
				this.state = 452;
				this.operatorID();
				this.state = 453;
				this.match(VtlParser.LPAREN);
				this.state = 462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.IDENTIFIER) {
					this.state = 454;
					this.parameterItem();
					this.state = 459;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === VtlParser.COMMA) {
						this.state = 455;
						this.match(VtlParser.COMMA);
						this.state = 456;
						this.parameterItem();
						this.state = 461;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
				}

				this.state = 464;
				this.match(VtlParser.RPAREN);
				this.state = 467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.RETURNS) {
					this.state = 465;
					this.match(VtlParser.RETURNS);
					this.state = 466;
					this.outputParameterType();
				}

				this.state = 469;
				this.match(VtlParser.IS);

				this.state = 470;
				this.expr(0);
				this.state = 471;
				this.match(VtlParser.END);
				this.state = 472;
				this.match(VtlParser.OPERATOR);
				break;

			case 2:
				localctx = new DefDatapointRulesetContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 474;
				this.match(VtlParser.DEFINE);
				this.state = 475;
				this.match(VtlParser.DATAPOINT);
				this.state = 476;
				this.match(VtlParser.RULESET);
				this.state = 477;
				this.rulesetID();
				this.state = 478;
				this.match(VtlParser.LPAREN);
				this.state = 479;
				this.rulesetSignature();
				this.state = 480;
				this.match(VtlParser.RPAREN);
				this.state = 481;
				this.match(VtlParser.IS);
				this.state = 482;
				this.ruleClauseDatapoint();
				this.state = 483;
				this.match(VtlParser.END);
				this.state = 484;
				this.match(VtlParser.DATAPOINT);
				this.state = 485;
				this.match(VtlParser.RULESET);
				break;

			case 3:
				localctx = new DefHierarchicalContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 487;
				this.match(VtlParser.DEFINE);
				this.state = 488;
				this.match(VtlParser.HIERARCHICAL);
				this.state = 489;
				this.match(VtlParser.RULESET);
				this.state = 490;
				this.rulesetID();
				this.state = 491;
				this.match(VtlParser.LPAREN);
				this.state = 492;
				this.hierRuleSignature();
				this.state = 493;
				this.match(VtlParser.RPAREN);
				this.state = 494;
				this.match(VtlParser.IS);
				this.state = 495;
				this.ruleClauseHierarchical();
				this.state = 496;
				this.match(VtlParser.END);
				this.state = 497;
				this.match(VtlParser.HIERARCHICAL);
				this.state = 498;
				this.match(VtlParser.RULESET);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GenericOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_genericOperators;
	return this;
}

GenericOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
GenericOperatorsContext.prototype.constructor = GenericOperatorsContext;

GenericOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function EvalAtomContext(parser, ctx) {
	GenericOperatorsContext.call(this, parser);
	GenericOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

EvalAtomContext.prototype = Object.create(GenericOperatorsContext.prototype);
EvalAtomContext.prototype.constructor = EvalAtomContext;

VtlParser.EvalAtomContext = EvalAtomContext;

EvalAtomContext.prototype.EVAL = function () {
	return this.getToken(VtlParser.EVAL, 0);
};

EvalAtomContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

EvalAtomContext.prototype.routineName = function () {
	return this.getTypedRuleContext(RoutineNameContext, 0);
};

EvalAtomContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

EvalAtomContext.prototype.varID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(VarIDContext);
	} else {
		return this.getTypedRuleContext(VarIDContext, i);
	}
};

EvalAtomContext.prototype.constant = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ConstantContext);
	} else {
		return this.getTypedRuleContext(ConstantContext, i);
	}
};

EvalAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

EvalAtomContext.prototype.LANGUAGE = function () {
	return this.getToken(VtlParser.LANGUAGE, 0);
};

EvalAtomContext.prototype.STRING_CONSTANT = function () {
	return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

EvalAtomContext.prototype.RETURNS = function () {
	return this.getToken(VtlParser.RETURNS, 0);
};

EvalAtomContext.prototype.datasetType = function () {
	return this.getTypedRuleContext(DatasetTypeContext, 0);
};
EvalAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterEvalAtom(this);
	}
};

EvalAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitEvalAtom(this);
	}
};

EvalAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitEvalAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CastExprDatasetContext(parser, ctx) {
	GenericOperatorsContext.call(this, parser);
	GenericOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CastExprDatasetContext.prototype = Object.create(
	GenericOperatorsContext.prototype
);
CastExprDatasetContext.prototype.constructor = CastExprDatasetContext;

VtlParser.CastExprDatasetContext = CastExprDatasetContext;

CastExprDatasetContext.prototype.CAST = function () {
	return this.getToken(VtlParser.CAST, 0);
};

CastExprDatasetContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CastExprDatasetContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

CastExprDatasetContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

CastExprDatasetContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

CastExprDatasetContext.prototype.basicScalarType = function () {
	return this.getTypedRuleContext(BasicScalarTypeContext, 0);
};

CastExprDatasetContext.prototype.valueDomainName = function () {
	return this.getTypedRuleContext(ValueDomainNameContext, 0);
};

CastExprDatasetContext.prototype.STRING_CONSTANT = function () {
	return this.getToken(VtlParser.STRING_CONSTANT, 0);
};
CastExprDatasetContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCastExprDataset(this);
	}
};

CastExprDatasetContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCastExprDataset(this);
	}
};

CastExprDatasetContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCastExprDataset(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CallDatasetContext(parser, ctx) {
	GenericOperatorsContext.call(this, parser);
	GenericOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CallDatasetContext.prototype = Object.create(GenericOperatorsContext.prototype);
CallDatasetContext.prototype.constructor = CallDatasetContext;

VtlParser.CallDatasetContext = CallDatasetContext;

CallDatasetContext.prototype.operatorID = function () {
	return this.getTypedRuleContext(OperatorIDContext, 0);
};

CallDatasetContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CallDatasetContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

CallDatasetContext.prototype.parameter = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ParameterContext);
	} else {
		return this.getTypedRuleContext(ParameterContext, i);
	}
};

CallDatasetContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

CallDatasetContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCallDataset(this);
	}
};

CallDatasetContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCallDataset(this);
	}
};

CallDatasetContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCallDataset(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.GenericOperatorsContext = GenericOperatorsContext;

VtlParser.prototype.genericOperators = function () {
	var localctx = new GenericOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 34, VtlParser.RULE_genericOperators);
	var _la = 0; // Token type
	try {
		this.state = 559;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.IDENTIFIER:
				localctx = new CallDatasetContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 502;
				this.operatorID();
				this.state = 503;
				this.match(VtlParser.LPAREN);
				this.state = 512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					_la === VtlParser.NULL_CONSTANT ||
					_la === VtlParser.OPTIONAL ||
					(((_la - 229) & ~0x1f) == 0 &&
						((1 << (_la - 229)) &
							((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
								(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
								(1 << (VtlParser.BOOLEAN_CONSTANT - 229)) |
								(1 << (VtlParser.STRING_CONSTANT - 229)) |
								(1 << (VtlParser.IDENTIFIER - 229)))) !==
							0)
				) {
					this.state = 504;
					this.parameter();
					this.state = 509;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === VtlParser.COMMA) {
						this.state = 505;
						this.match(VtlParser.COMMA);
						this.state = 506;
						this.parameter();
						this.state = 511;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
				}

				this.state = 514;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.EVAL:
				localctx = new EvalAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 516;
				this.match(VtlParser.EVAL);
				this.state = 517;
				this.match(VtlParser.LPAREN);
				this.state = 518;
				this.routineName();
				this.state = 519;
				this.match(VtlParser.LPAREN);
				this.state = 522;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case VtlParser.IDENTIFIER:
						this.state = 520;
						this.varID();
						break;
					case VtlParser.NULL_CONSTANT:
					case VtlParser.INTEGER_CONSTANT:
					case VtlParser.NUMBER_CONSTANT:
					case VtlParser.BOOLEAN_CONSTANT:
					case VtlParser.STRING_CONSTANT:
						this.state = 521;
						this.constant();
						break;
					case VtlParser.RPAREN:
					case VtlParser.COMMA:
						break;
					default:
						break;
				}
				this.state = 531;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === VtlParser.COMMA) {
					this.state = 524;
					this.match(VtlParser.COMMA);
					this.state = 527;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case VtlParser.IDENTIFIER:
							this.state = 525;
							this.varID();
							break;
						case VtlParser.NULL_CONSTANT:
						case VtlParser.INTEGER_CONSTANT:
						case VtlParser.NUMBER_CONSTANT:
						case VtlParser.BOOLEAN_CONSTANT:
						case VtlParser.STRING_CONSTANT:
							this.state = 526;
							this.constant();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 533;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 534;
				this.match(VtlParser.RPAREN);
				this.state = 537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.LANGUAGE) {
					this.state = 535;
					this.match(VtlParser.LANGUAGE);
					this.state = 536;
					this.match(VtlParser.STRING_CONSTANT);
				}

				this.state = 541;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.RETURNS) {
					this.state = 539;
					this.match(VtlParser.RETURNS);
					this.state = 540;
					this.datasetType();
				}

				this.state = 543;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CAST:
				localctx = new CastExprDatasetContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 545;
				this.match(VtlParser.CAST);
				this.state = 546;
				this.match(VtlParser.LPAREN);
				this.state = 547;
				this.expr(0);
				this.state = 548;
				this.match(VtlParser.COMMA);
				this.state = 551;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case VtlParser.BOOLEAN:
					case VtlParser.DATE:
					case VtlParser.TIME_PERIOD:
					case VtlParser.NUMBER:
					case VtlParser.STRING:
					case VtlParser.TIME:
					case VtlParser.INTEGER:
					case VtlParser.DURATION:
					case VtlParser.SCALAR:
						this.state = 549;
						this.basicScalarType();
						break;
					case VtlParser.IDENTIFIER:
						this.state = 550;
						this.valueDomainName();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 553;
					this.match(VtlParser.COMMA);
					this.state = 554;
					this.match(VtlParser.STRING_CONSTANT);
				}

				this.state = 557;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GenericOperatorsComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_genericOperatorsComponent;
	return this;
}

GenericOperatorsComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
GenericOperatorsComponentContext.prototype.constructor = GenericOperatorsComponentContext;

GenericOperatorsComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function EvalAtomComponentContext(parser, ctx) {
	GenericOperatorsComponentContext.call(this, parser);
	GenericOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

EvalAtomComponentContext.prototype = Object.create(
	GenericOperatorsComponentContext.prototype
);
EvalAtomComponentContext.prototype.constructor = EvalAtomComponentContext;

VtlParser.EvalAtomComponentContext = EvalAtomComponentContext;

EvalAtomComponentContext.prototype.EVAL = function () {
	return this.getToken(VtlParser.EVAL, 0);
};

EvalAtomComponentContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

EvalAtomComponentContext.prototype.routineName = function () {
	return this.getTypedRuleContext(RoutineNameContext, 0);
};

EvalAtomComponentContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

EvalAtomComponentContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

EvalAtomComponentContext.prototype.constant = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ConstantContext);
	} else {
		return this.getTypedRuleContext(ConstantContext, i);
	}
};

EvalAtomComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

EvalAtomComponentContext.prototype.LANGUAGE = function () {
	return this.getToken(VtlParser.LANGUAGE, 0);
};

EvalAtomComponentContext.prototype.STRING_CONSTANT = function () {
	return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

EvalAtomComponentContext.prototype.RETURNS = function () {
	return this.getToken(VtlParser.RETURNS, 0);
};

EvalAtomComponentContext.prototype.outputParameterTypeComponent = function () {
	return this.getTypedRuleContext(OutputParameterTypeComponentContext, 0);
};
EvalAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterEvalAtomComponent(this);
	}
};

EvalAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitEvalAtomComponent(this);
	}
};

EvalAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitEvalAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CastExprComponentContext(parser, ctx) {
	GenericOperatorsComponentContext.call(this, parser);
	GenericOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CastExprComponentContext.prototype = Object.create(
	GenericOperatorsComponentContext.prototype
);
CastExprComponentContext.prototype.constructor = CastExprComponentContext;

VtlParser.CastExprComponentContext = CastExprComponentContext;

CastExprComponentContext.prototype.CAST = function () {
	return this.getToken(VtlParser.CAST, 0);
};

CastExprComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CastExprComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

CastExprComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

CastExprComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

CastExprComponentContext.prototype.basicScalarType = function () {
	return this.getTypedRuleContext(BasicScalarTypeContext, 0);
};

CastExprComponentContext.prototype.valueDomainName = function () {
	return this.getTypedRuleContext(ValueDomainNameContext, 0);
};

CastExprComponentContext.prototype.STRING_CONSTANT = function () {
	return this.getToken(VtlParser.STRING_CONSTANT, 0);
};
CastExprComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCastExprComponent(this);
	}
};

CastExprComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCastExprComponent(this);
	}
};

CastExprComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCastExprComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CallComponentContext(parser, ctx) {
	GenericOperatorsComponentContext.call(this, parser);
	GenericOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CallComponentContext.prototype = Object.create(
	GenericOperatorsComponentContext.prototype
);
CallComponentContext.prototype.constructor = CallComponentContext;

VtlParser.CallComponentContext = CallComponentContext;

CallComponentContext.prototype.operatorID = function () {
	return this.getTypedRuleContext(OperatorIDContext, 0);
};

CallComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CallComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

CallComponentContext.prototype.parameterComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ParameterComponentContext);
	} else {
		return this.getTypedRuleContext(ParameterComponentContext, i);
	}
};

CallComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

CallComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCallComponent(this);
	}
};

CallComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCallComponent(this);
	}
};

CallComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCallComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.GenericOperatorsComponentContext = GenericOperatorsComponentContext;

VtlParser.prototype.genericOperatorsComponent = function () {
	var localctx = new GenericOperatorsComponentContext(
		this,
		this._ctx,
		this.state
	);
	this.enterRule(localctx, 36, VtlParser.RULE_genericOperatorsComponent);
	var _la = 0; // Token type
	try {
		this.state = 618;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.IDENTIFIER:
				localctx = new CallComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 561;
				this.operatorID();
				this.state = 562;
				this.match(VtlParser.LPAREN);
				this.state = 571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					_la === VtlParser.NULL_CONSTANT ||
					_la === VtlParser.OPTIONAL ||
					(((_la - 229) & ~0x1f) == 0 &&
						((1 << (_la - 229)) &
							((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
								(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
								(1 << (VtlParser.BOOLEAN_CONSTANT - 229)) |
								(1 << (VtlParser.STRING_CONSTANT - 229)) |
								(1 << (VtlParser.IDENTIFIER - 229)))) !==
							0)
				) {
					this.state = 563;
					this.parameterComponent();
					this.state = 568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === VtlParser.COMMA) {
						this.state = 564;
						this.match(VtlParser.COMMA);
						this.state = 565;
						this.parameterComponent();
						this.state = 570;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
				}

				this.state = 573;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CAST:
				localctx = new CastExprComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 575;
				this.match(VtlParser.CAST);
				this.state = 576;
				this.match(VtlParser.LPAREN);
				this.state = 577;
				this.exprComponent(0);
				this.state = 578;
				this.match(VtlParser.COMMA);
				this.state = 581;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case VtlParser.BOOLEAN:
					case VtlParser.DATE:
					case VtlParser.TIME_PERIOD:
					case VtlParser.NUMBER:
					case VtlParser.STRING:
					case VtlParser.TIME:
					case VtlParser.INTEGER:
					case VtlParser.DURATION:
					case VtlParser.SCALAR:
						this.state = 579;
						this.basicScalarType();
						break;
					case VtlParser.IDENTIFIER:
						this.state = 580;
						this.valueDomainName();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 585;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 583;
					this.match(VtlParser.COMMA);
					this.state = 584;
					this.match(VtlParser.STRING_CONSTANT);
				}

				this.state = 587;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.EVAL:
				localctx = new EvalAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 589;
				this.match(VtlParser.EVAL);
				this.state = 590;
				this.match(VtlParser.LPAREN);
				this.state = 591;
				this.routineName();
				this.state = 592;
				this.match(VtlParser.LPAREN);
				this.state = 595;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case VtlParser.IDENTIFIER:
						this.state = 593;
						this.componentID();
						break;
					case VtlParser.NULL_CONSTANT:
					case VtlParser.INTEGER_CONSTANT:
					case VtlParser.NUMBER_CONSTANT:
					case VtlParser.BOOLEAN_CONSTANT:
					case VtlParser.STRING_CONSTANT:
						this.state = 594;
						this.constant();
						break;
					case VtlParser.RPAREN:
					case VtlParser.COMMA:
						break;
					default:
						break;
				}
				this.state = 604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === VtlParser.COMMA) {
					this.state = 597;
					this.match(VtlParser.COMMA);
					this.state = 600;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case VtlParser.IDENTIFIER:
							this.state = 598;
							this.componentID();
							break;
						case VtlParser.NULL_CONSTANT:
						case VtlParser.INTEGER_CONSTANT:
						case VtlParser.NUMBER_CONSTANT:
						case VtlParser.BOOLEAN_CONSTANT:
						case VtlParser.STRING_CONSTANT:
							this.state = 599;
							this.constant();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 606;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 607;
				this.match(VtlParser.RPAREN);
				this.state = 610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.LANGUAGE) {
					this.state = 608;
					this.match(VtlParser.LANGUAGE);
					this.state = 609;
					this.match(VtlParser.STRING_CONSTANT);
				}

				this.state = 614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.RETURNS) {
					this.state = 612;
					this.match(VtlParser.RETURNS);
					this.state = 613;
					this.outputParameterTypeComponent();
				}

				this.state = 616;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ParameterComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_parameterComponent;
	return this;
}

ParameterComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ParameterComponentContext.prototype.constructor = ParameterComponentContext;

ParameterComponentContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

ParameterComponentContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

ParameterComponentContext.prototype.OPTIONAL = function () {
	return this.getToken(VtlParser.OPTIONAL, 0);
};

ParameterComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterParameterComponent(this);
	}
};

ParameterComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitParameterComponent(this);
	}
};

ParameterComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitParameterComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ParameterComponentContext = ParameterComponentContext;

VtlParser.prototype.parameterComponent = function () {
	var localctx = new ParameterComponentContext(this, this._ctx, this.state);
	this.enterRule(localctx, 38, VtlParser.RULE_parameterComponent);
	try {
		this.state = 623;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.IDENTIFIER:
				this.enterOuterAlt(localctx, 1);
				this.state = 620;
				this.componentID();
				break;
			case VtlParser.NULL_CONSTANT:
			case VtlParser.INTEGER_CONSTANT:
			case VtlParser.NUMBER_CONSTANT:
			case VtlParser.BOOLEAN_CONSTANT:
			case VtlParser.STRING_CONSTANT:
				this.enterOuterAlt(localctx, 2);
				this.state = 621;
				this.constant();
				break;
			case VtlParser.OPTIONAL:
				this.enterOuterAlt(localctx, 3);
				this.state = 622;
				this.match(VtlParser.OPTIONAL);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_parameter;
	return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.varID = function () {
	return this.getTypedRuleContext(VarIDContext, 0);
};

ParameterContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

ParameterContext.prototype.OPTIONAL = function () {
	return this.getToken(VtlParser.OPTIONAL, 0);
};

ParameterContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitParameter(this);
	}
};

ParameterContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitParameter(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ParameterContext = ParameterContext;

VtlParser.prototype.parameter = function () {
	var localctx = new ParameterContext(this, this._ctx, this.state);
	this.enterRule(localctx, 40, VtlParser.RULE_parameter);
	try {
		this.state = 628;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.IDENTIFIER:
				this.enterOuterAlt(localctx, 1);
				this.state = 625;
				this.varID();
				break;
			case VtlParser.NULL_CONSTANT:
			case VtlParser.INTEGER_CONSTANT:
			case VtlParser.NUMBER_CONSTANT:
			case VtlParser.BOOLEAN_CONSTANT:
			case VtlParser.STRING_CONSTANT:
				this.enterOuterAlt(localctx, 2);
				this.state = 626;
				this.constant();
				break;
			case VtlParser.OPTIONAL:
				this.enterOuterAlt(localctx, 3);
				this.state = 627;
				this.match(VtlParser.OPTIONAL);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StringOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_stringOperators;
	return this;
}

StringOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
StringOperatorsContext.prototype.constructor = StringOperatorsContext;

StringOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function InstrAtomContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
	this.pattern = null; // ExprContext;
	this.startParameter = null; // OptionalExprContext;
	this.occurrenceParameter = null; // OptionalExprContext;
	StringOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

InstrAtomContext.prototype = Object.create(StringOperatorsContext.prototype);
InstrAtomContext.prototype.constructor = InstrAtomContext;

VtlParser.InstrAtomContext = InstrAtomContext;

InstrAtomContext.prototype.INSTR = function () {
	return this.getToken(VtlParser.INSTR, 0);
};

InstrAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

InstrAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

InstrAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

InstrAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

InstrAtomContext.prototype.optionalExpr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(OptionalExprContext);
	} else {
		return this.getTypedRuleContext(OptionalExprContext, i);
	}
};
InstrAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterInstrAtom(this);
	}
};

InstrAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitInstrAtom(this);
	}
};

InstrAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitInstrAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function UnaryStringFunctionContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
	this.op = null; // Token;
	StringOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryStringFunctionContext.prototype = Object.create(
	StringOperatorsContext.prototype
);
UnaryStringFunctionContext.prototype.constructor = UnaryStringFunctionContext;

VtlParser.UnaryStringFunctionContext = UnaryStringFunctionContext;

UnaryStringFunctionContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

UnaryStringFunctionContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

UnaryStringFunctionContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

UnaryStringFunctionContext.prototype.TRIM = function () {
	return this.getToken(VtlParser.TRIM, 0);
};

UnaryStringFunctionContext.prototype.LTRIM = function () {
	return this.getToken(VtlParser.LTRIM, 0);
};

UnaryStringFunctionContext.prototype.RTRIM = function () {
	return this.getToken(VtlParser.RTRIM, 0);
};

UnaryStringFunctionContext.prototype.UCASE = function () {
	return this.getToken(VtlParser.UCASE, 0);
};

UnaryStringFunctionContext.prototype.LCASE = function () {
	return this.getToken(VtlParser.LCASE, 0);
};

UnaryStringFunctionContext.prototype.LEN = function () {
	return this.getToken(VtlParser.LEN, 0);
};
UnaryStringFunctionContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryStringFunction(this);
	}
};

UnaryStringFunctionContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryStringFunction(this);
	}
};

UnaryStringFunctionContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryStringFunction(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function SubstrAtomContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
	this.startParameter = null; // OptionalExprContext;
	this.endParameter = null; // OptionalExprContext;
	StringOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

SubstrAtomContext.prototype = Object.create(StringOperatorsContext.prototype);
SubstrAtomContext.prototype.constructor = SubstrAtomContext;

VtlParser.SubstrAtomContext = SubstrAtomContext;

SubstrAtomContext.prototype.SUBSTR = function () {
	return this.getToken(VtlParser.SUBSTR, 0);
};

SubstrAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

SubstrAtomContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

SubstrAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

SubstrAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

SubstrAtomContext.prototype.optionalExpr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(OptionalExprContext);
	} else {
		return this.getTypedRuleContext(OptionalExprContext, i);
	}
};
SubstrAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSubstrAtom(this);
	}
};

SubstrAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSubstrAtom(this);
	}
};

SubstrAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSubstrAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ReplaceAtomContext(parser, ctx) {
	StringOperatorsContext.call(this, parser);
	this.param = null; // ExprContext;
	StringOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ReplaceAtomContext.prototype = Object.create(StringOperatorsContext.prototype);
ReplaceAtomContext.prototype.constructor = ReplaceAtomContext;

VtlParser.ReplaceAtomContext = ReplaceAtomContext;

ReplaceAtomContext.prototype.REPLACE = function () {
	return this.getToken(VtlParser.REPLACE, 0);
};

ReplaceAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ReplaceAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

ReplaceAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

ReplaceAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

ReplaceAtomContext.prototype.optionalExpr = function () {
	return this.getTypedRuleContext(OptionalExprContext, 0);
};
ReplaceAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterReplaceAtom(this);
	}
};

ReplaceAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitReplaceAtom(this);
	}
};

ReplaceAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitReplaceAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.StringOperatorsContext = StringOperatorsContext;

VtlParser.prototype.stringOperators = function () {
	var localctx = new StringOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 42, VtlParser.RULE_stringOperators);
	var _la = 0; // Token type
	try {
		this.state = 678;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.LEN:
			case VtlParser.TRIM:
			case VtlParser.UCASE:
			case VtlParser.LCASE:
			case VtlParser.LTRIM:
			case VtlParser.RTRIM:
				localctx = new UnaryStringFunctionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 630;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						(((_la - 81) & ~0x1f) == 0 &&
							((1 << (_la - 81)) &
								((1 << (VtlParser.LEN - 81)) |
									(1 << (VtlParser.TRIM - 81)) |
									(1 << (VtlParser.UCASE - 81)) |
									(1 << (VtlParser.LCASE - 81)))) !==
								0) ||
						_la === VtlParser.LTRIM ||
						_la === VtlParser.RTRIM
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 631;
				this.match(VtlParser.LPAREN);
				this.state = 632;
				this.expr(0);
				this.state = 633;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.SUBSTR:
				localctx = new SubstrAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 635;
				this.match(VtlParser.SUBSTR);
				this.state = 636;
				this.match(VtlParser.LPAREN);
				this.state = 637;
				this.expr(0);
				this.state = 648;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
				switch (la_) {
					case 1:
						this.state = 644;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === VtlParser.COMMA) {
							this.state = 638;
							this.match(VtlParser.COMMA);
							this.state = 639;
							localctx.startParameter = this.optionalExpr();

							this.state = 641;
							this.match(VtlParser.COMMA);
							this.state = 642;
							localctx.endParameter = this.optionalExpr();
						}

						break;

					case 2:
						this.state = 646;
						this.match(VtlParser.COMMA);
						this.state = 647;
						localctx.startParameter = this.optionalExpr();
						break;
				}
				this.state = 650;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.REPLACE:
				localctx = new ReplaceAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 652;
				this.match(VtlParser.REPLACE);
				this.state = 653;
				this.match(VtlParser.LPAREN);
				this.state = 654;
				this.expr(0);
				this.state = 655;
				this.match(VtlParser.COMMA);
				this.state = 656;
				localctx.param = this.expr(0);
				this.state = 659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 657;
					this.match(VtlParser.COMMA);
					this.state = 658;
					this.optionalExpr();
				}

				this.state = 661;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.INSTR:
				localctx = new InstrAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 663;
				this.match(VtlParser.INSTR);
				this.state = 664;
				this.match(VtlParser.LPAREN);
				this.state = 665;
				this.expr(0);
				this.state = 666;
				this.match(VtlParser.COMMA);
				this.state = 667;
				localctx.pattern = this.expr(0);
				this.state = 670;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 50, this._ctx);
				if (la_ === 1) {
					this.state = 668;
					this.match(VtlParser.COMMA);
					this.state = 669;
					localctx.startParameter = this.optionalExpr();
				}
				this.state = 674;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 672;
					this.match(VtlParser.COMMA);
					this.state = 673;
					localctx.occurrenceParameter = this.optionalExpr();
				}

				this.state = 676;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function StringOperatorsComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_stringOperatorsComponent;
	return this;
}

StringOperatorsComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
StringOperatorsComponentContext.prototype.constructor = StringOperatorsComponentContext;

StringOperatorsComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ReplaceAtomComponentContext(parser, ctx) {
	StringOperatorsComponentContext.call(this, parser);
	this.param = null; // ExprComponentContext;
	StringOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ReplaceAtomComponentContext.prototype = Object.create(
	StringOperatorsComponentContext.prototype
);
ReplaceAtomComponentContext.prototype.constructor = ReplaceAtomComponentContext;

VtlParser.ReplaceAtomComponentContext = ReplaceAtomComponentContext;

ReplaceAtomComponentContext.prototype.REPLACE = function () {
	return this.getToken(VtlParser.REPLACE, 0);
};

ReplaceAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ReplaceAtomComponentContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};

ReplaceAtomComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

ReplaceAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

ReplaceAtomComponentContext.prototype.optionalExprComponent = function () {
	return this.getTypedRuleContext(OptionalExprComponentContext, 0);
};
ReplaceAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterReplaceAtomComponent(this);
	}
};

ReplaceAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitReplaceAtomComponent(this);
	}
};

ReplaceAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitReplaceAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function UnaryStringFunctionComponentContext(parser, ctx) {
	StringOperatorsComponentContext.call(this, parser);
	this.op = null; // Token;
	StringOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryStringFunctionComponentContext.prototype = Object.create(
	StringOperatorsComponentContext.prototype
);
UnaryStringFunctionComponentContext.prototype.constructor = UnaryStringFunctionComponentContext;

VtlParser.UnaryStringFunctionComponentContext = UnaryStringFunctionComponentContext;

UnaryStringFunctionComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

UnaryStringFunctionComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

UnaryStringFunctionComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

UnaryStringFunctionComponentContext.prototype.TRIM = function () {
	return this.getToken(VtlParser.TRIM, 0);
};

UnaryStringFunctionComponentContext.prototype.LTRIM = function () {
	return this.getToken(VtlParser.LTRIM, 0);
};

UnaryStringFunctionComponentContext.prototype.RTRIM = function () {
	return this.getToken(VtlParser.RTRIM, 0);
};

UnaryStringFunctionComponentContext.prototype.UCASE = function () {
	return this.getToken(VtlParser.UCASE, 0);
};

UnaryStringFunctionComponentContext.prototype.LCASE = function () {
	return this.getToken(VtlParser.LCASE, 0);
};

UnaryStringFunctionComponentContext.prototype.LEN = function () {
	return this.getToken(VtlParser.LEN, 0);
};
UnaryStringFunctionComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryStringFunctionComponent(this);
	}
};

UnaryStringFunctionComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryStringFunctionComponent(this);
	}
};

UnaryStringFunctionComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryStringFunctionComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function SubstrAtomComponentContext(parser, ctx) {
	StringOperatorsComponentContext.call(this, parser);
	this.startParameter = null; // OptionalExprComponentContext;
	this.endParameter = null; // OptionalExprComponentContext;
	StringOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

SubstrAtomComponentContext.prototype = Object.create(
	StringOperatorsComponentContext.prototype
);
SubstrAtomComponentContext.prototype.constructor = SubstrAtomComponentContext;

VtlParser.SubstrAtomComponentContext = SubstrAtomComponentContext;

SubstrAtomComponentContext.prototype.SUBSTR = function () {
	return this.getToken(VtlParser.SUBSTR, 0);
};

SubstrAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

SubstrAtomComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

SubstrAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

SubstrAtomComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

SubstrAtomComponentContext.prototype.optionalExprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(OptionalExprComponentContext);
	} else {
		return this.getTypedRuleContext(OptionalExprComponentContext, i);
	}
};
SubstrAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSubstrAtomComponent(this);
	}
};

SubstrAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSubstrAtomComponent(this);
	}
};

SubstrAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSubstrAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function InstrAtomComponentContext(parser, ctx) {
	StringOperatorsComponentContext.call(this, parser);
	this.pattern = null; // ExprComponentContext;
	this.startParameter = null; // OptionalExprComponentContext;
	this.occurrenceParameter = null; // OptionalExprComponentContext;
	StringOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

InstrAtomComponentContext.prototype = Object.create(
	StringOperatorsComponentContext.prototype
);
InstrAtomComponentContext.prototype.constructor = InstrAtomComponentContext;

VtlParser.InstrAtomComponentContext = InstrAtomComponentContext;

InstrAtomComponentContext.prototype.INSTR = function () {
	return this.getToken(VtlParser.INSTR, 0);
};

InstrAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

InstrAtomComponentContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};

InstrAtomComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

InstrAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

InstrAtomComponentContext.prototype.optionalExprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(OptionalExprComponentContext);
	} else {
		return this.getTypedRuleContext(OptionalExprComponentContext, i);
	}
};
InstrAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterInstrAtomComponent(this);
	}
};

InstrAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitInstrAtomComponent(this);
	}
};

InstrAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitInstrAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.StringOperatorsComponentContext = StringOperatorsComponentContext;

VtlParser.prototype.stringOperatorsComponent = function () {
	var localctx = new StringOperatorsComponentContext(
		this,
		this._ctx,
		this.state
	);
	this.enterRule(localctx, 44, VtlParser.RULE_stringOperatorsComponent);
	var _la = 0; // Token type
	try {
		this.state = 728;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.LEN:
			case VtlParser.TRIM:
			case VtlParser.UCASE:
			case VtlParser.LCASE:
			case VtlParser.LTRIM:
			case VtlParser.RTRIM:
				localctx = new UnaryStringFunctionComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 680;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						(((_la - 81) & ~0x1f) == 0 &&
							((1 << (_la - 81)) &
								((1 << (VtlParser.LEN - 81)) |
									(1 << (VtlParser.TRIM - 81)) |
									(1 << (VtlParser.UCASE - 81)) |
									(1 << (VtlParser.LCASE - 81)))) !==
								0) ||
						_la === VtlParser.LTRIM ||
						_la === VtlParser.RTRIM
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 681;
				this.match(VtlParser.LPAREN);
				this.state = 682;
				this.exprComponent(0);
				this.state = 683;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.SUBSTR:
				localctx = new SubstrAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 685;
				this.match(VtlParser.SUBSTR);
				this.state = 686;
				this.match(VtlParser.LPAREN);
				this.state = 687;
				this.exprComponent(0);
				this.state = 698;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
				switch (la_) {
					case 1:
						this.state = 694;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === VtlParser.COMMA) {
							this.state = 688;
							this.match(VtlParser.COMMA);
							this.state = 689;
							localctx.startParameter = this.optionalExprComponent();

							this.state = 691;
							this.match(VtlParser.COMMA);
							this.state = 692;
							localctx.endParameter = this.optionalExprComponent();
						}

						break;

					case 2:
						this.state = 696;
						this.match(VtlParser.COMMA);
						this.state = 697;
						localctx.startParameter = this.optionalExprComponent();
						break;
				}
				this.state = 700;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.REPLACE:
				localctx = new ReplaceAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 702;
				this.match(VtlParser.REPLACE);
				this.state = 703;
				this.match(VtlParser.LPAREN);
				this.state = 704;
				this.exprComponent(0);
				this.state = 705;
				this.match(VtlParser.COMMA);
				this.state = 706;
				localctx.param = this.exprComponent(0);
				this.state = 709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 707;
					this.match(VtlParser.COMMA);
					this.state = 708;
					this.optionalExprComponent();
				}

				this.state = 711;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.INSTR:
				localctx = new InstrAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 713;
				this.match(VtlParser.INSTR);
				this.state = 714;
				this.match(VtlParser.LPAREN);
				this.state = 715;
				this.exprComponent(0);
				this.state = 716;
				this.match(VtlParser.COMMA);
				this.state = 717;
				localctx.pattern = this.exprComponent(0);
				this.state = 720;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
				if (la_ === 1) {
					this.state = 718;
					this.match(VtlParser.COMMA);
					this.state = 719;
					localctx.startParameter = this.optionalExprComponent();
				}
				this.state = 724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 722;
					this.match(VtlParser.COMMA);
					this.state = 723;
					localctx.occurrenceParameter = this.optionalExprComponent();
				}

				this.state = 726;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function NumericOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_numericOperators;
	return this;
}

NumericOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
NumericOperatorsContext.prototype.constructor = NumericOperatorsContext;

NumericOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnaryNumericContext(parser, ctx) {
	NumericOperatorsContext.call(this, parser);
	this.op = null; // Token;
	NumericOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryNumericContext.prototype = Object.create(
	NumericOperatorsContext.prototype
);
UnaryNumericContext.prototype.constructor = UnaryNumericContext;

VtlParser.UnaryNumericContext = UnaryNumericContext;

UnaryNumericContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

UnaryNumericContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

UnaryNumericContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

UnaryNumericContext.prototype.CEIL = function () {
	return this.getToken(VtlParser.CEIL, 0);
};

UnaryNumericContext.prototype.FLOOR = function () {
	return this.getToken(VtlParser.FLOOR, 0);
};

UnaryNumericContext.prototype.ABS = function () {
	return this.getToken(VtlParser.ABS, 0);
};

UnaryNumericContext.prototype.EXP = function () {
	return this.getToken(VtlParser.EXP, 0);
};

UnaryNumericContext.prototype.LN = function () {
	return this.getToken(VtlParser.LN, 0);
};

UnaryNumericContext.prototype.SQRT = function () {
	return this.getToken(VtlParser.SQRT, 0);
};
UnaryNumericContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryNumeric(this);
	}
};

UnaryNumericContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryNumeric(this);
	}
};

UnaryNumericContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryNumeric(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function UnaryWithOptionalNumericContext(parser, ctx) {
	NumericOperatorsContext.call(this, parser);
	this.op = null; // Token;
	NumericOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryWithOptionalNumericContext.prototype = Object.create(
	NumericOperatorsContext.prototype
);
UnaryWithOptionalNumericContext.prototype.constructor = UnaryWithOptionalNumericContext;

VtlParser.UnaryWithOptionalNumericContext = UnaryWithOptionalNumericContext;

UnaryWithOptionalNumericContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

UnaryWithOptionalNumericContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

UnaryWithOptionalNumericContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

UnaryWithOptionalNumericContext.prototype.ROUND = function () {
	return this.getToken(VtlParser.ROUND, 0);
};

UnaryWithOptionalNumericContext.prototype.TRUNC = function () {
	return this.getToken(VtlParser.TRUNC, 0);
};

UnaryWithOptionalNumericContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

UnaryWithOptionalNumericContext.prototype.optionalExpr = function () {
	return this.getTypedRuleContext(OptionalExprContext, 0);
};
UnaryWithOptionalNumericContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryWithOptionalNumeric(this);
	}
};

UnaryWithOptionalNumericContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryWithOptionalNumeric(this);
	}
};

UnaryWithOptionalNumericContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryWithOptionalNumeric(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function BinaryNumericContext(parser, ctx) {
	NumericOperatorsContext.call(this, parser);
	this.op = null; // Token;
	this.left = null; // ExprContext;
	this.right = null; // ExprContext;
	NumericOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

BinaryNumericContext.prototype = Object.create(
	NumericOperatorsContext.prototype
);
BinaryNumericContext.prototype.constructor = BinaryNumericContext;

VtlParser.BinaryNumericContext = BinaryNumericContext;

BinaryNumericContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

BinaryNumericContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

BinaryNumericContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

BinaryNumericContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

BinaryNumericContext.prototype.MOD = function () {
	return this.getToken(VtlParser.MOD, 0);
};

BinaryNumericContext.prototype.POWER = function () {
	return this.getToken(VtlParser.POWER, 0);
};

BinaryNumericContext.prototype.LOG = function () {
	return this.getToken(VtlParser.LOG, 0);
};
BinaryNumericContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterBinaryNumeric(this);
	}
};

BinaryNumericContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitBinaryNumeric(this);
	}
};

BinaryNumericContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitBinaryNumeric(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.NumericOperatorsContext = NumericOperatorsContext;

VtlParser.prototype.numericOperators = function () {
	var localctx = new NumericOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 46, VtlParser.RULE_numericOperators);
	var _la = 0; // Token type
	try {
		this.state = 751;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.ABS:
			case VtlParser.LN:
			case VtlParser.EXP:
			case VtlParser.CEIL:
			case VtlParser.FLOOR:
			case VtlParser.SQRT:
				localctx = new UnaryNumericContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 730;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						(((_la - 73) & ~0x1f) == 0 &&
							((1 << (_la - 73)) &
								((1 << (VtlParser.ABS - 73)) |
									(1 << (VtlParser.LN - 73)) |
									(1 << (VtlParser.EXP - 73)))) !==
								0) ||
						(((_la - 123) & ~0x1f) == 0 &&
							((1 << (_la - 123)) &
								((1 << (VtlParser.CEIL - 123)) |
									(1 << (VtlParser.FLOOR - 123)) |
									(1 << (VtlParser.SQRT - 123)))) !==
								0)
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 731;
				this.match(VtlParser.LPAREN);
				this.state = 732;
				this.expr(0);
				this.state = 733;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.TRUNC:
			case VtlParser.ROUND:
				localctx = new UnaryWithOptionalNumericContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 735;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.TRUNC || _la === VtlParser.ROUND)) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 736;
				this.match(VtlParser.LPAREN);
				this.state = 737;
				this.expr(0);
				this.state = 740;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 738;
					this.match(VtlParser.COMMA);
					this.state = 739;
					this.optionalExpr();
				}

				this.state = 742;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.LOG:
			case VtlParser.POWER:
			case VtlParser.MOD:
				localctx = new BinaryNumericContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 744;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						((_la - 76) & ~0x1f) == 0 &&
						((1 << (_la - 76)) &
							((1 << (VtlParser.LOG - 76)) |
								(1 << (VtlParser.POWER - 76)) |
								(1 << (VtlParser.MOD - 76)))) !==
							0
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 745;
				this.match(VtlParser.LPAREN);
				this.state = 746;
				localctx.left = this.expr(0);
				this.state = 747;
				this.match(VtlParser.COMMA);
				this.state = 748;
				localctx.right = this.expr(0);
				this.state = 749;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function NumericOperatorsComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_numericOperatorsComponent;
	return this;
}

NumericOperatorsComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
NumericOperatorsComponentContext.prototype.constructor = NumericOperatorsComponentContext;

NumericOperatorsComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnaryNumericComponentContext(parser, ctx) {
	NumericOperatorsComponentContext.call(this, parser);
	this.op = null; // Token;
	NumericOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryNumericComponentContext.prototype = Object.create(
	NumericOperatorsComponentContext.prototype
);
UnaryNumericComponentContext.prototype.constructor = UnaryNumericComponentContext;

VtlParser.UnaryNumericComponentContext = UnaryNumericComponentContext;

UnaryNumericComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

UnaryNumericComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

UnaryNumericComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

UnaryNumericComponentContext.prototype.CEIL = function () {
	return this.getToken(VtlParser.CEIL, 0);
};

UnaryNumericComponentContext.prototype.FLOOR = function () {
	return this.getToken(VtlParser.FLOOR, 0);
};

UnaryNumericComponentContext.prototype.ABS = function () {
	return this.getToken(VtlParser.ABS, 0);
};

UnaryNumericComponentContext.prototype.EXP = function () {
	return this.getToken(VtlParser.EXP, 0);
};

UnaryNumericComponentContext.prototype.LN = function () {
	return this.getToken(VtlParser.LN, 0);
};

UnaryNumericComponentContext.prototype.SQRT = function () {
	return this.getToken(VtlParser.SQRT, 0);
};
UnaryNumericComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryNumericComponent(this);
	}
};

UnaryNumericComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryNumericComponent(this);
	}
};

UnaryNumericComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryNumericComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function BinaryNumericComponentContext(parser, ctx) {
	NumericOperatorsComponentContext.call(this, parser);
	this.op = null; // Token;
	this.left = null; // ExprComponentContext;
	this.right = null; // ExprComponentContext;
	NumericOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

BinaryNumericComponentContext.prototype = Object.create(
	NumericOperatorsComponentContext.prototype
);
BinaryNumericComponentContext.prototype.constructor = BinaryNumericComponentContext;

VtlParser.BinaryNumericComponentContext = BinaryNumericComponentContext;

BinaryNumericComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

BinaryNumericComponentContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

BinaryNumericComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

BinaryNumericComponentContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};

BinaryNumericComponentContext.prototype.MOD = function () {
	return this.getToken(VtlParser.MOD, 0);
};

BinaryNumericComponentContext.prototype.POWER = function () {
	return this.getToken(VtlParser.POWER, 0);
};

BinaryNumericComponentContext.prototype.LOG = function () {
	return this.getToken(VtlParser.LOG, 0);
};
BinaryNumericComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterBinaryNumericComponent(this);
	}
};

BinaryNumericComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitBinaryNumericComponent(this);
	}
};

BinaryNumericComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitBinaryNumericComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function UnaryWithOptionalNumericComponentContext(parser, ctx) {
	NumericOperatorsComponentContext.call(this, parser);
	this.op = null; // Token;
	NumericOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnaryWithOptionalNumericComponentContext.prototype = Object.create(
	NumericOperatorsComponentContext.prototype
);
UnaryWithOptionalNumericComponentContext.prototype.constructor = UnaryWithOptionalNumericComponentContext;

VtlParser.UnaryWithOptionalNumericComponentContext = UnaryWithOptionalNumericComponentContext;

UnaryWithOptionalNumericComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

UnaryWithOptionalNumericComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

UnaryWithOptionalNumericComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

UnaryWithOptionalNumericComponentContext.prototype.ROUND = function () {
	return this.getToken(VtlParser.ROUND, 0);
};

UnaryWithOptionalNumericComponentContext.prototype.TRUNC = function () {
	return this.getToken(VtlParser.TRUNC, 0);
};

UnaryWithOptionalNumericComponentContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

UnaryWithOptionalNumericComponentContext.prototype.optionalExprComponent = function () {
	return this.getTypedRuleContext(OptionalExprComponentContext, 0);
};
UnaryWithOptionalNumericComponentContext.prototype.enterRule = function (
	listener
) {
	if (listener instanceof VtlListener) {
		listener.enterUnaryWithOptionalNumericComponent(this);
	}
};

UnaryWithOptionalNumericComponentContext.prototype.exitRule = function (
	listener
) {
	if (listener instanceof VtlListener) {
		listener.exitUnaryWithOptionalNumericComponent(this);
	}
};

UnaryWithOptionalNumericComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnaryWithOptionalNumericComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.NumericOperatorsComponentContext = NumericOperatorsComponentContext;

VtlParser.prototype.numericOperatorsComponent = function () {
	var localctx = new NumericOperatorsComponentContext(
		this,
		this._ctx,
		this.state
	);
	this.enterRule(localctx, 48, VtlParser.RULE_numericOperatorsComponent);
	var _la = 0; // Token type
	try {
		this.state = 774;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.ABS:
			case VtlParser.LN:
			case VtlParser.EXP:
			case VtlParser.CEIL:
			case VtlParser.FLOOR:
			case VtlParser.SQRT:
				localctx = new UnaryNumericComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 753;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						(((_la - 73) & ~0x1f) == 0 &&
							((1 << (_la - 73)) &
								((1 << (VtlParser.ABS - 73)) |
									(1 << (VtlParser.LN - 73)) |
									(1 << (VtlParser.EXP - 73)))) !==
								0) ||
						(((_la - 123) & ~0x1f) == 0 &&
							((1 << (_la - 123)) &
								((1 << (VtlParser.CEIL - 123)) |
									(1 << (VtlParser.FLOOR - 123)) |
									(1 << (VtlParser.SQRT - 123)))) !==
								0)
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 754;
				this.match(VtlParser.LPAREN);
				this.state = 755;
				this.exprComponent(0);
				this.state = 756;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.TRUNC:
			case VtlParser.ROUND:
				localctx = new UnaryWithOptionalNumericComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 758;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.TRUNC || _la === VtlParser.ROUND)) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 759;
				this.match(VtlParser.LPAREN);
				this.state = 760;
				this.exprComponent(0);
				this.state = 763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 761;
					this.match(VtlParser.COMMA);
					this.state = 762;
					this.optionalExprComponent();
				}

				this.state = 765;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.LOG:
			case VtlParser.POWER:
			case VtlParser.MOD:
				localctx = new BinaryNumericComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 767;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						((_la - 76) & ~0x1f) == 0 &&
						((1 << (_la - 76)) &
							((1 << (VtlParser.LOG - 76)) |
								(1 << (VtlParser.POWER - 76)) |
								(1 << (VtlParser.MOD - 76)))) !==
							0
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 768;
				this.match(VtlParser.LPAREN);
				this.state = 769;
				localctx.left = this.exprComponent(0);
				this.state = 770;
				this.match(VtlParser.COMMA);
				this.state = 771;
				localctx.right = this.exprComponent(0);
				this.state = 772;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ComparisonOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_comparisonOperators;
	return this;
}

ComparisonOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ComparisonOperatorsContext.prototype.constructor = ComparisonOperatorsContext;

ComparisonOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BetweenAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
	this.op = null; // ExprContext;
	this.from_ = null; // ExprContext;
	this.to_ = null; // ExprContext;
	ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

BetweenAtomContext.prototype = Object.create(
	ComparisonOperatorsContext.prototype
);
BetweenAtomContext.prototype.constructor = BetweenAtomContext;

VtlParser.BetweenAtomContext = BetweenAtomContext;

BetweenAtomContext.prototype.BETWEEN = function () {
	return this.getToken(VtlParser.BETWEEN, 0);
};

BetweenAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

BetweenAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

BetweenAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

BetweenAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};
BetweenAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterBetweenAtom(this);
	}
};

BetweenAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitBetweenAtom(this);
	}
};

BetweenAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitBetweenAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CharsetMatchAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
	this.op = null; // ExprContext;
	this.pattern = null; // ExprContext;
	ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CharsetMatchAtomContext.prototype = Object.create(
	ComparisonOperatorsContext.prototype
);
CharsetMatchAtomContext.prototype.constructor = CharsetMatchAtomContext;

VtlParser.CharsetMatchAtomContext = CharsetMatchAtomContext;

CharsetMatchAtomContext.prototype.CHARSET_MATCH = function () {
	return this.getToken(VtlParser.CHARSET_MATCH, 0);
};

CharsetMatchAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CharsetMatchAtomContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

CharsetMatchAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

CharsetMatchAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};
CharsetMatchAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCharsetMatchAtom(this);
	}
};

CharsetMatchAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCharsetMatchAtom(this);
	}
};

CharsetMatchAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCharsetMatchAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function IsNullAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
	ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

IsNullAtomContext.prototype = Object.create(
	ComparisonOperatorsContext.prototype
);
IsNullAtomContext.prototype.constructor = IsNullAtomContext;

VtlParser.IsNullAtomContext = IsNullAtomContext;

IsNullAtomContext.prototype.ISNULL = function () {
	return this.getToken(VtlParser.ISNULL, 0);
};

IsNullAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

IsNullAtomContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

IsNullAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
IsNullAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterIsNullAtom(this);
	}
};

IsNullAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitIsNullAtom(this);
	}
};

IsNullAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitIsNullAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ExistInAtomContext(parser, ctx) {
	ComparisonOperatorsContext.call(this, parser);
	this.left = null; // ExprContext;
	this.right = null; // ExprContext;
	ComparisonOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ExistInAtomContext.prototype = Object.create(
	ComparisonOperatorsContext.prototype
);
ExistInAtomContext.prototype.constructor = ExistInAtomContext;

VtlParser.ExistInAtomContext = ExistInAtomContext;

ExistInAtomContext.prototype.EXISTS_IN = function () {
	return this.getToken(VtlParser.EXISTS_IN, 0);
};

ExistInAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ExistInAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

ExistInAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

ExistInAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

ExistInAtomContext.prototype.retainType = function () {
	return this.getTypedRuleContext(RetainTypeContext, 0);
};
ExistInAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterExistInAtom(this);
	}
};

ExistInAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitExistInAtom(this);
	}
};

ExistInAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitExistInAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ComparisonOperatorsContext = ComparisonOperatorsContext;

VtlParser.prototype.comparisonOperators = function () {
	var localctx = new ComparisonOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 50, VtlParser.RULE_comparisonOperators);
	var _la = 0; // Token type
	try {
		this.state = 808;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.BETWEEN:
				localctx = new BetweenAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 776;
				this.match(VtlParser.BETWEEN);
				this.state = 777;
				this.match(VtlParser.LPAREN);
				this.state = 778;
				localctx.op = this.expr(0);
				this.state = 779;
				this.match(VtlParser.COMMA);
				this.state = 780;
				localctx.from_ = this.expr(0);
				this.state = 781;
				this.match(VtlParser.COMMA);
				this.state = 782;
				localctx.to_ = this.expr(0);
				this.state = 783;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CHARSET_MATCH:
				localctx = new CharsetMatchAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 785;
				this.match(VtlParser.CHARSET_MATCH);
				this.state = 786;
				this.match(VtlParser.LPAREN);
				this.state = 787;
				localctx.op = this.expr(0);
				this.state = 788;
				this.match(VtlParser.COMMA);
				this.state = 789;
				localctx.pattern = this.expr(0);
				this.state = 790;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.ISNULL:
				localctx = new IsNullAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 792;
				this.match(VtlParser.ISNULL);
				this.state = 793;
				this.match(VtlParser.LPAREN);
				this.state = 794;
				this.expr(0);
				this.state = 795;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.EXISTS_IN:
				localctx = new ExistInAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 797;
				this.match(VtlParser.EXISTS_IN);
				this.state = 798;
				this.match(VtlParser.LPAREN);
				this.state = 799;
				localctx.left = this.expr(0);
				this.state = 800;
				this.match(VtlParser.COMMA);
				this.state = 801;
				localctx.right = this.expr(0);
				this.state = 804;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 802;
					this.match(VtlParser.COMMA);
					this.state = 803;
					this.retainType();
				}

				this.state = 806;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ComparisonOperatorsComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_comparisonOperatorsComponent;
	return this;
}

ComparisonOperatorsComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ComparisonOperatorsComponentContext.prototype.constructor = ComparisonOperatorsComponentContext;

ComparisonOperatorsComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IsNullAtomComponentContext(parser, ctx) {
	ComparisonOperatorsComponentContext.call(this, parser);
	ComparisonOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

IsNullAtomComponentContext.prototype = Object.create(
	ComparisonOperatorsComponentContext.prototype
);
IsNullAtomComponentContext.prototype.constructor = IsNullAtomComponentContext;

VtlParser.IsNullAtomComponentContext = IsNullAtomComponentContext;

IsNullAtomComponentContext.prototype.ISNULL = function () {
	return this.getToken(VtlParser.ISNULL, 0);
};

IsNullAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

IsNullAtomComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

IsNullAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
IsNullAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterIsNullAtomComponent(this);
	}
};

IsNullAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitIsNullAtomComponent(this);
	}
};

IsNullAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitIsNullAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CharsetMatchAtomComponentContext(parser, ctx) {
	ComparisonOperatorsComponentContext.call(this, parser);
	this.op = null; // ExprComponentContext;
	this.pattern = null; // ExprComponentContext;
	ComparisonOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CharsetMatchAtomComponentContext.prototype = Object.create(
	ComparisonOperatorsComponentContext.prototype
);
CharsetMatchAtomComponentContext.prototype.constructor = CharsetMatchAtomComponentContext;

VtlParser.CharsetMatchAtomComponentContext = CharsetMatchAtomComponentContext;

CharsetMatchAtomComponentContext.prototype.CHARSET_MATCH = function () {
	return this.getToken(VtlParser.CHARSET_MATCH, 0);
};

CharsetMatchAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CharsetMatchAtomComponentContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

CharsetMatchAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

CharsetMatchAtomComponentContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};
CharsetMatchAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCharsetMatchAtomComponent(this);
	}
};

CharsetMatchAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCharsetMatchAtomComponent(this);
	}
};

CharsetMatchAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCharsetMatchAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function BetweenAtomComponentContext(parser, ctx) {
	ComparisonOperatorsComponentContext.call(this, parser);
	this.op = null; // ExprComponentContext;
	this.from_ = null; // ExprComponentContext;
	this.to_ = null; // ExprComponentContext;
	ComparisonOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

BetweenAtomComponentContext.prototype = Object.create(
	ComparisonOperatorsComponentContext.prototype
);
BetweenAtomComponentContext.prototype.constructor = BetweenAtomComponentContext;

VtlParser.BetweenAtomComponentContext = BetweenAtomComponentContext;

BetweenAtomComponentContext.prototype.BETWEEN = function () {
	return this.getToken(VtlParser.BETWEEN, 0);
};

BetweenAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

BetweenAtomComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

BetweenAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

BetweenAtomComponentContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};
BetweenAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterBetweenAtomComponent(this);
	}
};

BetweenAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitBetweenAtomComponent(this);
	}
};

BetweenAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitBetweenAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ComparisonOperatorsComponentContext = ComparisonOperatorsComponentContext;

VtlParser.prototype.comparisonOperatorsComponent = function () {
	var localctx = new ComparisonOperatorsComponentContext(
		this,
		this._ctx,
		this.state
	);
	this.enterRule(localctx, 52, VtlParser.RULE_comparisonOperatorsComponent);
	try {
		this.state = 831;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.BETWEEN:
				localctx = new BetweenAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 810;
				this.match(VtlParser.BETWEEN);
				this.state = 811;
				this.match(VtlParser.LPAREN);
				this.state = 812;
				localctx.op = this.exprComponent(0);
				this.state = 813;
				this.match(VtlParser.COMMA);
				this.state = 814;
				localctx.from_ = this.exprComponent(0);
				this.state = 815;
				this.match(VtlParser.COMMA);
				this.state = 816;
				localctx.to_ = this.exprComponent(0);
				this.state = 817;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CHARSET_MATCH:
				localctx = new CharsetMatchAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 819;
				this.match(VtlParser.CHARSET_MATCH);
				this.state = 820;
				this.match(VtlParser.LPAREN);
				this.state = 821;
				localctx.op = this.exprComponent(0);
				this.state = 822;
				this.match(VtlParser.COMMA);
				this.state = 823;
				localctx.pattern = this.exprComponent(0);
				this.state = 824;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.ISNULL:
				localctx = new IsNullAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 826;
				this.match(VtlParser.ISNULL);
				this.state = 827;
				this.match(VtlParser.LPAREN);
				this.state = 828;
				this.exprComponent(0);
				this.state = 829;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TimeOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_timeOperators;
	return this;
}

TimeOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
TimeOperatorsContext.prototype.constructor = TimeOperatorsContext;

TimeOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function FlowAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
	this.op = null; // Token;
	TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

FlowAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
FlowAtomContext.prototype.constructor = FlowAtomContext;

VtlParser.FlowAtomContext = FlowAtomContext;

FlowAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

FlowAtomContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

FlowAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

FlowAtomContext.prototype.FLOW_TO_STOCK = function () {
	return this.getToken(VtlParser.FLOW_TO_STOCK, 0);
};

FlowAtomContext.prototype.STOCK_TO_FLOW = function () {
	return this.getToken(VtlParser.STOCK_TO_FLOW, 0);
};
FlowAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterFlowAtom(this);
	}
};

FlowAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitFlowAtom(this);
	}
};

FlowAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitFlowAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function TimeShiftAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
	TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

TimeShiftAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
TimeShiftAtomContext.prototype.constructor = TimeShiftAtomContext;

VtlParser.TimeShiftAtomContext = TimeShiftAtomContext;

TimeShiftAtomContext.prototype.TIMESHIFT = function () {
	return this.getToken(VtlParser.TIMESHIFT, 0);
};

TimeShiftAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

TimeShiftAtomContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

TimeShiftAtomContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

TimeShiftAtomContext.prototype.signedInteger = function () {
	return this.getTypedRuleContext(SignedIntegerContext, 0);
};

TimeShiftAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
TimeShiftAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterTimeShiftAtom(this);
	}
};

TimeShiftAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitTimeShiftAtom(this);
	}
};

TimeShiftAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitTimeShiftAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function TimeAggAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
	this.periodIndTo = null; // Token;
	this.periodIndFrom = null; // Token;
	this.op = null; // OptionalExprContext;
	TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

TimeAggAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
TimeAggAtomContext.prototype.constructor = TimeAggAtomContext;

VtlParser.TimeAggAtomContext = TimeAggAtomContext;

TimeAggAtomContext.prototype.TIME_AGG = function () {
	return this.getToken(VtlParser.TIME_AGG, 0);
};

TimeAggAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

TimeAggAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

TimeAggAtomContext.prototype.STRING_CONSTANT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.STRING_CONSTANT);
	} else {
		return this.getToken(VtlParser.STRING_CONSTANT, i);
	}
};

TimeAggAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

TimeAggAtomContext.prototype.optionalExpr = function () {
	return this.getTypedRuleContext(OptionalExprContext, 0);
};

TimeAggAtomContext.prototype.FIRST = function () {
	return this.getToken(VtlParser.FIRST, 0);
};

TimeAggAtomContext.prototype.LAST = function () {
	return this.getToken(VtlParser.LAST, 0);
};

TimeAggAtomContext.prototype.OPTIONAL = function () {
	return this.getToken(VtlParser.OPTIONAL, 0);
};
TimeAggAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterTimeAggAtom(this);
	}
};

TimeAggAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitTimeAggAtom(this);
	}
};

TimeAggAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitTimeAggAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CurrentDateAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
	TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CurrentDateAtomContext.prototype = Object.create(
	TimeOperatorsContext.prototype
);
CurrentDateAtomContext.prototype.constructor = CurrentDateAtomContext;

VtlParser.CurrentDateAtomContext = CurrentDateAtomContext;

CurrentDateAtomContext.prototype.CURRENT_DATE = function () {
	return this.getToken(VtlParser.CURRENT_DATE, 0);
};

CurrentDateAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CurrentDateAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
CurrentDateAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCurrentDateAtom(this);
	}
};

CurrentDateAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCurrentDateAtom(this);
	}
};

CurrentDateAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCurrentDateAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function PeriodAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
	TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

PeriodAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
PeriodAtomContext.prototype.constructor = PeriodAtomContext;

VtlParser.PeriodAtomContext = PeriodAtomContext;

PeriodAtomContext.prototype.PERIOD_INDICATOR = function () {
	return this.getToken(VtlParser.PERIOD_INDICATOR, 0);
};

PeriodAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

PeriodAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

PeriodAtomContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};
PeriodAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterPeriodAtom(this);
	}
};

PeriodAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitPeriodAtom(this);
	}
};

PeriodAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitPeriodAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function FillTimeAtomContext(parser, ctx) {
	TimeOperatorsContext.call(this, parser);
	TimeOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

FillTimeAtomContext.prototype = Object.create(TimeOperatorsContext.prototype);
FillTimeAtomContext.prototype.constructor = FillTimeAtomContext;

VtlParser.FillTimeAtomContext = FillTimeAtomContext;

FillTimeAtomContext.prototype.FILL_TIME_SERIES = function () {
	return this.getToken(VtlParser.FILL_TIME_SERIES, 0);
};

FillTimeAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

FillTimeAtomContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

FillTimeAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

FillTimeAtomContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

FillTimeAtomContext.prototype.SINGLE = function () {
	return this.getToken(VtlParser.SINGLE, 0);
};

FillTimeAtomContext.prototype.ALL = function () {
	return this.getToken(VtlParser.ALL, 0);
};
FillTimeAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterFillTimeAtom(this);
	}
};

FillTimeAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitFillTimeAtom(this);
	}
};

FillTimeAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitFillTimeAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.TimeOperatorsContext = TimeOperatorsContext;

VtlParser.prototype.timeOperators = function () {
	var localctx = new TimeOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 54, VtlParser.RULE_timeOperators);
	var _la = 0; // Token type
	try {
		this.state = 879;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.PERIOD_INDICATOR:
				localctx = new PeriodAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 833;
				this.match(VtlParser.PERIOD_INDICATOR);
				this.state = 834;
				this.match(VtlParser.LPAREN);
				this.state = 836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					((_la & ~0x1f) == 0 &&
						((1 << _la) &
							((1 << VtlParser.LPAREN) |
								(1 << VtlParser.PLUS) |
								(1 << VtlParser.MINUS) |
								(1 << VtlParser.EVAL) |
								(1 << VtlParser.IF) |
								(1 << VtlParser.CURRENT_DATE))) !==
							0) ||
					(((_la - 39) & ~0x1f) == 0 &&
						((1 << (_la - 39)) &
							((1 << (VtlParser.NOT - 39)) |
								(1 << (VtlParser.BETWEEN - 39)) |
								(1 << (VtlParser.NULL_CONSTANT - 39)) |
								(1 << (VtlParser.ISNULL - 39)) |
								(1 << (VtlParser.UNION - 39)) |
								(1 << (VtlParser.SYMDIFF - 39)) |
								(1 << (VtlParser.INTERSECT - 39)) |
								(1 << (VtlParser.CHECK - 39)) |
								(1 << (VtlParser.EXISTS_IN - 39)) |
								(1 << (VtlParser.MIN - 39)) |
								(1 << (VtlParser.MAX - 39)))) !==
							0) ||
					(((_la - 73) & ~0x1f) == 0 &&
						((1 << (_la - 73)) &
							((1 << (VtlParser.ABS - 73)) |
								(1 << (VtlParser.LN - 73)) |
								(1 << (VtlParser.LOG - 73)) |
								(1 << (VtlParser.TRUNC - 73)) |
								(1 << (VtlParser.ROUND - 73)) |
								(1 << (VtlParser.POWER - 73)) |
								(1 << (VtlParser.MOD - 73)) |
								(1 << (VtlParser.LEN - 73)) |
								(1 << (VtlParser.TRIM - 73)) |
								(1 << (VtlParser.UCASE - 73)) |
								(1 << (VtlParser.LCASE - 73)) |
								(1 << (VtlParser.SUBSTR - 73)) |
								(1 << (VtlParser.SUM - 73)) |
								(1 << (VtlParser.AVG - 73)) |
								(1 << (VtlParser.MEDIAN - 73)) |
								(1 << (VtlParser.COUNT - 73)) |
								(1 << (VtlParser.EXP - 73)) |
								(1 << (VtlParser.CHARSET_MATCH - 73)) |
								(1 << (VtlParser.NVL - 73)) |
								(1 << (VtlParser.HIERARCHY - 73)))) !==
							0) ||
					(((_la - 119) & ~0x1f) == 0 &&
						((1 << (_la - 119)) &
							((1 << (VtlParser.LTRIM - 119)) |
								(1 << (VtlParser.RTRIM - 119)) |
								(1 << (VtlParser.INSTR - 119)) |
								(1 << (VtlParser.REPLACE - 119)) |
								(1 << (VtlParser.CEIL - 119)) |
								(1 << (VtlParser.FLOOR - 119)) |
								(1 << (VtlParser.SQRT - 119)) |
								(1 << (VtlParser.SETDIFF - 119)) |
								(1 << (VtlParser.STDDEV_POP - 119)) |
								(1 << (VtlParser.STDDEV_SAMP - 119)) |
								(1 << (VtlParser.VAR_POP - 119)) |
								(1 << (VtlParser.VAR_SAMP - 119)) |
								(1 << (VtlParser.FIRST_VALUE - 119)) |
								(1 << (VtlParser.LAST_VALUE - 119)) |
								(1 << (VtlParser.LAG - 119)) |
								(1 << (VtlParser.LEAD - 119)) |
								(1 << (VtlParser.RATIO_TO_REPORT - 119)) |
								(1 << (VtlParser.FILL_TIME_SERIES - 119)) |
								(1 << (VtlParser.FLOW_TO_STOCK - 119)))) !==
							0) ||
					(((_la - 151) & ~0x1f) == 0 &&
						((1 << (_la - 151)) &
							((1 << (VtlParser.STOCK_TO_FLOW - 151)) |
								(1 << (VtlParser.TIMESHIFT - 151)) |
								(1 << (VtlParser.INNER_JOIN - 151)) |
								(1 << (VtlParser.LEFT_JOIN - 151)))) !==
							0) ||
					(((_la - 183) & ~0x1f) == 0 &&
						((1 << (_la - 183)) &
							((1 << (VtlParser.CROSS_JOIN - 183)) |
								(1 << (VtlParser.FULL_JOIN - 183)) |
								(1 << (VtlParser.PERIOD_INDICATOR - 183)) |
								(1 << (VtlParser.TIME_AGG - 183)) |
								(1 << (VtlParser.CAST - 183)) |
								(1 << (VtlParser.CHECK_DATAPOINT - 183)) |
								(1 << (VtlParser.CHECK_HIERARCHY - 183)))) !==
							0) ||
					(((_la - 229) & ~0x1f) == 0 &&
						((1 << (_la - 229)) &
							((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
								(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
								(1 << (VtlParser.BOOLEAN_CONSTANT - 229)) |
								(1 << (VtlParser.STRING_CONSTANT - 229)) |
								(1 << (VtlParser.IDENTIFIER - 229)))) !==
							0)
				) {
					this.state = 835;
					this.expr(0);
				}

				this.state = 838;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.FILL_TIME_SERIES:
				localctx = new FillTimeAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 839;
				this.match(VtlParser.FILL_TIME_SERIES);
				this.state = 840;
				this.match(VtlParser.LPAREN);
				this.state = 841;
				this.expr(0);
				this.state = 844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 842;
					this.match(VtlParser.COMMA);
					this.state = 843;
					_la = this._input.LA(1);
					if (!(_la === VtlParser.ALL || _la === VtlParser.SINGLE)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}

				this.state = 846;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.FLOW_TO_STOCK:
			case VtlParser.STOCK_TO_FLOW:
				localctx = new FlowAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 848;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(_la === VtlParser.FLOW_TO_STOCK || _la === VtlParser.STOCK_TO_FLOW)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 849;
				this.match(VtlParser.LPAREN);
				this.state = 850;
				this.expr(0);
				this.state = 851;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.TIMESHIFT:
				localctx = new TimeShiftAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 853;
				this.match(VtlParser.TIMESHIFT);
				this.state = 854;
				this.match(VtlParser.LPAREN);
				this.state = 855;
				this.expr(0);
				this.state = 856;
				this.match(VtlParser.COMMA);
				this.state = 857;
				this.signedInteger();
				this.state = 858;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.TIME_AGG:
				localctx = new TimeAggAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				this.state = 860;
				this.match(VtlParser.TIME_AGG);
				this.state = 861;
				this.match(VtlParser.LPAREN);
				this.state = 862;
				localctx.periodIndTo = this.match(VtlParser.STRING_CONSTANT);
				this.state = 865;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
				if (la_ === 1) {
					this.state = 863;
					this.match(VtlParser.COMMA);
					this.state = 864;
					localctx.periodIndFrom = this._input.LT(1);
					_la = this._input.LA(1);
					if (
						!(_la === VtlParser.OPTIONAL || _la === VtlParser.STRING_CONSTANT)
					) {
						localctx.periodIndFrom = this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}
				this.state = 869;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);
				if (la_ === 1) {
					this.state = 867;
					this.match(VtlParser.COMMA);
					this.state = 868;
					localctx.op = this.optionalExpr();
				}
				this.state = 873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 871;
					this.match(VtlParser.COMMA);
					this.state = 872;
					_la = this._input.LA(1);
					if (!(_la === VtlParser.FIRST || _la === VtlParser.LAST)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}

				this.state = 875;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CURRENT_DATE:
				localctx = new CurrentDateAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				this.state = 876;
				this.match(VtlParser.CURRENT_DATE);
				this.state = 877;
				this.match(VtlParser.LPAREN);
				this.state = 878;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function TimeOperatorsComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_timeOperatorsComponent;
	return this;
}

TimeOperatorsComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
TimeOperatorsComponentContext.prototype.constructor = TimeOperatorsComponentContext;

TimeOperatorsComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PeriodAtomComponentContext(parser, ctx) {
	TimeOperatorsComponentContext.call(this, parser);
	TimeOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

PeriodAtomComponentContext.prototype = Object.create(
	TimeOperatorsComponentContext.prototype
);
PeriodAtomComponentContext.prototype.constructor = PeriodAtomComponentContext;

VtlParser.PeriodAtomComponentContext = PeriodAtomComponentContext;

PeriodAtomComponentContext.prototype.PERIOD_INDICATOR = function () {
	return this.getToken(VtlParser.PERIOD_INDICATOR, 0);
};

PeriodAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

PeriodAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

PeriodAtomComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};
PeriodAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterPeriodAtomComponent(this);
	}
};

PeriodAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitPeriodAtomComponent(this);
	}
};

PeriodAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitPeriodAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function TimeShiftAtomComponentContext(parser, ctx) {
	TimeOperatorsComponentContext.call(this, parser);
	TimeOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

TimeShiftAtomComponentContext.prototype = Object.create(
	TimeOperatorsComponentContext.prototype
);
TimeShiftAtomComponentContext.prototype.constructor = TimeShiftAtomComponentContext;

VtlParser.TimeShiftAtomComponentContext = TimeShiftAtomComponentContext;

TimeShiftAtomComponentContext.prototype.TIMESHIFT = function () {
	return this.getToken(VtlParser.TIMESHIFT, 0);
};

TimeShiftAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

TimeShiftAtomComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

TimeShiftAtomComponentContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

TimeShiftAtomComponentContext.prototype.signedInteger = function () {
	return this.getTypedRuleContext(SignedIntegerContext, 0);
};

TimeShiftAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
TimeShiftAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterTimeShiftAtomComponent(this);
	}
};

TimeShiftAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitTimeShiftAtomComponent(this);
	}
};

TimeShiftAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitTimeShiftAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function TimeAggAtomComponentContext(parser, ctx) {
	TimeOperatorsComponentContext.call(this, parser);
	this.periodIndTo = null; // Token;
	this.periodIndFrom = null; // Token;
	this.op = null; // OptionalExprComponentContext;
	TimeOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

TimeAggAtomComponentContext.prototype = Object.create(
	TimeOperatorsComponentContext.prototype
);
TimeAggAtomComponentContext.prototype.constructor = TimeAggAtomComponentContext;

VtlParser.TimeAggAtomComponentContext = TimeAggAtomComponentContext;

TimeAggAtomComponentContext.prototype.TIME_AGG = function () {
	return this.getToken(VtlParser.TIME_AGG, 0);
};

TimeAggAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

TimeAggAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

TimeAggAtomComponentContext.prototype.STRING_CONSTANT = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.STRING_CONSTANT);
	} else {
		return this.getToken(VtlParser.STRING_CONSTANT, i);
	}
};

TimeAggAtomComponentContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

TimeAggAtomComponentContext.prototype.optionalExprComponent = function () {
	return this.getTypedRuleContext(OptionalExprComponentContext, 0);
};

TimeAggAtomComponentContext.prototype.FIRST = function () {
	return this.getToken(VtlParser.FIRST, 0);
};

TimeAggAtomComponentContext.prototype.LAST = function () {
	return this.getToken(VtlParser.LAST, 0);
};

TimeAggAtomComponentContext.prototype.OPTIONAL = function () {
	return this.getToken(VtlParser.OPTIONAL, 0);
};
TimeAggAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterTimeAggAtomComponent(this);
	}
};

TimeAggAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitTimeAggAtomComponent(this);
	}
};

TimeAggAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitTimeAggAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CurrentDateAtomComponentContext(parser, ctx) {
	TimeOperatorsComponentContext.call(this, parser);
	TimeOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CurrentDateAtomComponentContext.prototype = Object.create(
	TimeOperatorsComponentContext.prototype
);
CurrentDateAtomComponentContext.prototype.constructor = CurrentDateAtomComponentContext;

VtlParser.CurrentDateAtomComponentContext = CurrentDateAtomComponentContext;

CurrentDateAtomComponentContext.prototype.CURRENT_DATE = function () {
	return this.getToken(VtlParser.CURRENT_DATE, 0);
};

CurrentDateAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CurrentDateAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
CurrentDateAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCurrentDateAtomComponent(this);
	}
};

CurrentDateAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCurrentDateAtomComponent(this);
	}
};

CurrentDateAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCurrentDateAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function FlowAtomComponentContext(parser, ctx) {
	TimeOperatorsComponentContext.call(this, parser);
	this.op = null; // Token;
	TimeOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

FlowAtomComponentContext.prototype = Object.create(
	TimeOperatorsComponentContext.prototype
);
FlowAtomComponentContext.prototype.constructor = FlowAtomComponentContext;

VtlParser.FlowAtomComponentContext = FlowAtomComponentContext;

FlowAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

FlowAtomComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

FlowAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

FlowAtomComponentContext.prototype.FLOW_TO_STOCK = function () {
	return this.getToken(VtlParser.FLOW_TO_STOCK, 0);
};

FlowAtomComponentContext.prototype.STOCK_TO_FLOW = function () {
	return this.getToken(VtlParser.STOCK_TO_FLOW, 0);
};
FlowAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterFlowAtomComponent(this);
	}
};

FlowAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitFlowAtomComponent(this);
	}
};

FlowAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitFlowAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function FillTimeAtomComponentContext(parser, ctx) {
	TimeOperatorsComponentContext.call(this, parser);
	TimeOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

FillTimeAtomComponentContext.prototype = Object.create(
	TimeOperatorsComponentContext.prototype
);
FillTimeAtomComponentContext.prototype.constructor = FillTimeAtomComponentContext;

VtlParser.FillTimeAtomComponentContext = FillTimeAtomComponentContext;

FillTimeAtomComponentContext.prototype.FILL_TIME_SERIES = function () {
	return this.getToken(VtlParser.FILL_TIME_SERIES, 0);
};

FillTimeAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

FillTimeAtomComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

FillTimeAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

FillTimeAtomComponentContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

FillTimeAtomComponentContext.prototype.SINGLE = function () {
	return this.getToken(VtlParser.SINGLE, 0);
};

FillTimeAtomComponentContext.prototype.ALL = function () {
	return this.getToken(VtlParser.ALL, 0);
};
FillTimeAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterFillTimeAtomComponent(this);
	}
};

FillTimeAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitFillTimeAtomComponent(this);
	}
};

FillTimeAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitFillTimeAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.TimeOperatorsComponentContext = TimeOperatorsComponentContext;

VtlParser.prototype.timeOperatorsComponent = function () {
	var localctx = new TimeOperatorsComponentContext(this, this._ctx, this.state);
	this.enterRule(localctx, 56, VtlParser.RULE_timeOperatorsComponent);
	var _la = 0; // Token type
	try {
		this.state = 927;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.PERIOD_INDICATOR:
				localctx = new PeriodAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 881;
				this.match(VtlParser.PERIOD_INDICATOR);
				this.state = 882;
				this.match(VtlParser.LPAREN);
				this.state = 884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					((_la & ~0x1f) == 0 &&
						((1 << _la) &
							((1 << VtlParser.LPAREN) |
								(1 << VtlParser.PLUS) |
								(1 << VtlParser.MINUS) |
								(1 << VtlParser.EVAL) |
								(1 << VtlParser.IF) |
								(1 << VtlParser.CURRENT_DATE))) !==
							0) ||
					(((_la - 39) & ~0x1f) == 0 &&
						((1 << (_la - 39)) &
							((1 << (VtlParser.NOT - 39)) |
								(1 << (VtlParser.BETWEEN - 39)) |
								(1 << (VtlParser.NULL_CONSTANT - 39)) |
								(1 << (VtlParser.ISNULL - 39)) |
								(1 << (VtlParser.RANK - 39)) |
								(1 << (VtlParser.MIN - 39)) |
								(1 << (VtlParser.MAX - 39)))) !==
							0) ||
					(((_la - 73) & ~0x1f) == 0 &&
						((1 << (_la - 73)) &
							((1 << (VtlParser.ABS - 73)) |
								(1 << (VtlParser.LN - 73)) |
								(1 << (VtlParser.LOG - 73)) |
								(1 << (VtlParser.TRUNC - 73)) |
								(1 << (VtlParser.ROUND - 73)) |
								(1 << (VtlParser.POWER - 73)) |
								(1 << (VtlParser.MOD - 73)) |
								(1 << (VtlParser.LEN - 73)) |
								(1 << (VtlParser.TRIM - 73)) |
								(1 << (VtlParser.UCASE - 73)) |
								(1 << (VtlParser.LCASE - 73)) |
								(1 << (VtlParser.SUBSTR - 73)) |
								(1 << (VtlParser.SUM - 73)) |
								(1 << (VtlParser.AVG - 73)) |
								(1 << (VtlParser.MEDIAN - 73)) |
								(1 << (VtlParser.COUNT - 73)) |
								(1 << (VtlParser.EXP - 73)) |
								(1 << (VtlParser.CHARSET_MATCH - 73)) |
								(1 << (VtlParser.NVL - 73)))) !==
							0) ||
					(((_la - 119) & ~0x1f) == 0 &&
						((1 << (_la - 119)) &
							((1 << (VtlParser.LTRIM - 119)) |
								(1 << (VtlParser.RTRIM - 119)) |
								(1 << (VtlParser.INSTR - 119)) |
								(1 << (VtlParser.REPLACE - 119)) |
								(1 << (VtlParser.CEIL - 119)) |
								(1 << (VtlParser.FLOOR - 119)) |
								(1 << (VtlParser.SQRT - 119)) |
								(1 << (VtlParser.STDDEV_POP - 119)) |
								(1 << (VtlParser.STDDEV_SAMP - 119)) |
								(1 << (VtlParser.VAR_POP - 119)) |
								(1 << (VtlParser.VAR_SAMP - 119)) |
								(1 << (VtlParser.FIRST_VALUE - 119)) |
								(1 << (VtlParser.LAST_VALUE - 119)) |
								(1 << (VtlParser.LAG - 119)) |
								(1 << (VtlParser.LEAD - 119)) |
								(1 << (VtlParser.RATIO_TO_REPORT - 119)) |
								(1 << (VtlParser.FILL_TIME_SERIES - 119)) |
								(1 << (VtlParser.FLOW_TO_STOCK - 119)))) !==
							0) ||
					_la === VtlParser.STOCK_TO_FLOW ||
					_la === VtlParser.TIMESHIFT ||
					(((_la - 196) & ~0x1f) == 0 &&
						((1 << (_la - 196)) &
							((1 << (VtlParser.PERIOD_INDICATOR - 196)) |
								(1 << (VtlParser.TIME_AGG - 196)) |
								(1 << (VtlParser.CAST - 196)))) !==
							0) ||
					(((_la - 229) & ~0x1f) == 0 &&
						((1 << (_la - 229)) &
							((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
								(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
								(1 << (VtlParser.BOOLEAN_CONSTANT - 229)) |
								(1 << (VtlParser.STRING_CONSTANT - 229)) |
								(1 << (VtlParser.IDENTIFIER - 229)))) !==
							0)
				) {
					this.state = 883;
					this.exprComponent(0);
				}

				this.state = 886;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.FILL_TIME_SERIES:
				localctx = new FillTimeAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 887;
				this.match(VtlParser.FILL_TIME_SERIES);
				this.state = 888;
				this.match(VtlParser.LPAREN);
				this.state = 889;
				this.exprComponent(0);
				this.state = 892;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 890;
					this.match(VtlParser.COMMA);
					this.state = 891;
					_la = this._input.LA(1);
					if (!(_la === VtlParser.ALL || _la === VtlParser.SINGLE)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}

				this.state = 894;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.FLOW_TO_STOCK:
			case VtlParser.STOCK_TO_FLOW:
				localctx = new FlowAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 896;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(_la === VtlParser.FLOW_TO_STOCK || _la === VtlParser.STOCK_TO_FLOW)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 897;
				this.match(VtlParser.LPAREN);
				this.state = 898;
				this.exprComponent(0);
				this.state = 899;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.TIMESHIFT:
				localctx = new TimeShiftAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 901;
				this.match(VtlParser.TIMESHIFT);
				this.state = 902;
				this.match(VtlParser.LPAREN);
				this.state = 903;
				this.exprComponent(0);
				this.state = 904;
				this.match(VtlParser.COMMA);
				this.state = 905;
				this.signedInteger();
				this.state = 906;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.TIME_AGG:
				localctx = new TimeAggAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				this.state = 908;
				this.match(VtlParser.TIME_AGG);
				this.state = 909;
				this.match(VtlParser.LPAREN);
				this.state = 910;
				localctx.periodIndTo = this.match(VtlParser.STRING_CONSTANT);
				this.state = 913;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
				if (la_ === 1) {
					this.state = 911;
					this.match(VtlParser.COMMA);
					this.state = 912;
					localctx.periodIndFrom = this._input.LT(1);
					_la = this._input.LA(1);
					if (
						!(_la === VtlParser.OPTIONAL || _la === VtlParser.STRING_CONSTANT)
					) {
						localctx.periodIndFrom = this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}
				this.state = 917;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
				if (la_ === 1) {
					this.state = 915;
					this.match(VtlParser.COMMA);
					this.state = 916;
					localctx.op = this.optionalExprComponent();
				}
				this.state = 921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 919;
					this.match(VtlParser.COMMA);
					this.state = 920;
					_la = this._input.LA(1);
					if (!(_la === VtlParser.FIRST || _la === VtlParser.LAST)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}

				this.state = 923;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CURRENT_DATE:
				localctx = new CurrentDateAtomComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				this.state = 924;
				this.match(VtlParser.CURRENT_DATE);
				this.state = 925;
				this.match(VtlParser.LPAREN);
				this.state = 926;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SetOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_setOperators;
	return this;
}

SetOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
SetOperatorsContext.prototype.constructor = SetOperatorsContext;

SetOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SetOrSYmDiffAtomContext(parser, ctx) {
	SetOperatorsContext.call(this, parser);
	this.op = null; // Token;
	this.left = null; // ExprContext;
	this.right = null; // ExprContext;
	SetOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

SetOrSYmDiffAtomContext.prototype = Object.create(
	SetOperatorsContext.prototype
);
SetOrSYmDiffAtomContext.prototype.constructor = SetOrSYmDiffAtomContext;

VtlParser.SetOrSYmDiffAtomContext = SetOrSYmDiffAtomContext;

SetOrSYmDiffAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

SetOrSYmDiffAtomContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

SetOrSYmDiffAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

SetOrSYmDiffAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

SetOrSYmDiffAtomContext.prototype.SETDIFF = function () {
	return this.getToken(VtlParser.SETDIFF, 0);
};

SetOrSYmDiffAtomContext.prototype.SYMDIFF = function () {
	return this.getToken(VtlParser.SYMDIFF, 0);
};
SetOrSYmDiffAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSetOrSYmDiffAtom(this);
	}
};

SetOrSYmDiffAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSetOrSYmDiffAtom(this);
	}
};

SetOrSYmDiffAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSetOrSYmDiffAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function IntersectAtomContext(parser, ctx) {
	SetOperatorsContext.call(this, parser);
	this.left = null; // ExprContext;
	SetOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

IntersectAtomContext.prototype = Object.create(SetOperatorsContext.prototype);
IntersectAtomContext.prototype.constructor = IntersectAtomContext;

VtlParser.IntersectAtomContext = IntersectAtomContext;

IntersectAtomContext.prototype.INTERSECT = function () {
	return this.getToken(VtlParser.INTERSECT, 0);
};

IntersectAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

IntersectAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

IntersectAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

IntersectAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

IntersectAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterIntersectAtom(this);
	}
};

IntersectAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitIntersectAtom(this);
	}
};

IntersectAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitIntersectAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function UnionAtomContext(parser, ctx) {
	SetOperatorsContext.call(this, parser);
	this.left = null; // ExprContext;
	SetOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

UnionAtomContext.prototype = Object.create(SetOperatorsContext.prototype);
UnionAtomContext.prototype.constructor = UnionAtomContext;

VtlParser.UnionAtomContext = UnionAtomContext;

UnionAtomContext.prototype.UNION = function () {
	return this.getToken(VtlParser.UNION, 0);
};

UnionAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

UnionAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

UnionAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};

UnionAtomContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

UnionAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterUnionAtom(this);
	}
};

UnionAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitUnionAtom(this);
	}
};

UnionAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitUnionAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.SetOperatorsContext = SetOperatorsContext;

VtlParser.prototype.setOperators = function () {
	var localctx = new SetOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 58, VtlParser.RULE_setOperators);
	var _la = 0; // Token type
	try {
		this.state = 958;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.UNION:
				localctx = new UnionAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 929;
				this.match(VtlParser.UNION);
				this.state = 930;
				this.match(VtlParser.LPAREN);
				this.state = 931;
				localctx.left = this.expr(0);
				this.state = 934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					this.state = 932;
					this.match(VtlParser.COMMA);
					this.state = 933;
					this.expr(0);
					this.state = 936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === VtlParser.COMMA);
				this.state = 938;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.INTERSECT:
				localctx = new IntersectAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 940;
				this.match(VtlParser.INTERSECT);
				this.state = 941;
				this.match(VtlParser.LPAREN);
				this.state = 942;
				localctx.left = this.expr(0);
				this.state = 945;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					this.state = 943;
					this.match(VtlParser.COMMA);
					this.state = 944;
					this.expr(0);
					this.state = 947;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === VtlParser.COMMA);
				this.state = 949;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.SYMDIFF:
			case VtlParser.SETDIFF:
				localctx = new SetOrSYmDiffAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 951;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.SYMDIFF || _la === VtlParser.SETDIFF)) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 952;
				this.match(VtlParser.LPAREN);
				this.state = 953;
				localctx.left = this.expr(0);
				this.state = 954;
				this.match(VtlParser.COMMA);
				this.state = 955;
				localctx.right = this.expr(0);
				this.state = 956;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function HierarchyOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_hierarchyOperators;
	this.op = null; // ExprContext
	this.hrName = null; // Token
	this.ruleComponent = null; // ComponentIDContext
	return this;
}

HierarchyOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
HierarchyOperatorsContext.prototype.constructor = HierarchyOperatorsContext;

HierarchyOperatorsContext.prototype.HIERARCHY = function () {
	return this.getToken(VtlParser.HIERARCHY, 0);
};

HierarchyOperatorsContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

HierarchyOperatorsContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

HierarchyOperatorsContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

HierarchyOperatorsContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

HierarchyOperatorsContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

HierarchyOperatorsContext.prototype.conditionClause = function () {
	return this.getTypedRuleContext(ConditionClauseContext, 0);
};

HierarchyOperatorsContext.prototype.RULE = function () {
	return this.getToken(VtlParser.RULE, 0);
};

HierarchyOperatorsContext.prototype.validationMode = function () {
	return this.getTypedRuleContext(ValidationModeContext, 0);
};

HierarchyOperatorsContext.prototype.inputModeHierarchy = function () {
	return this.getTypedRuleContext(InputModeHierarchyContext, 0);
};

HierarchyOperatorsContext.prototype.outputModeHierarchy = function () {
	return this.getTypedRuleContext(OutputModeHierarchyContext, 0);
};

HierarchyOperatorsContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

HierarchyOperatorsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterHierarchyOperators(this);
	}
};

HierarchyOperatorsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitHierarchyOperators(this);
	}
};

HierarchyOperatorsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitHierarchyOperators(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.HierarchyOperatorsContext = HierarchyOperatorsContext;

VtlParser.prototype.hierarchyOperators = function () {
	var localctx = new HierarchyOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 60, VtlParser.RULE_hierarchyOperators);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 960;
		this.match(VtlParser.HIERARCHY);
		this.state = 961;
		this.match(VtlParser.LPAREN);
		this.state = 962;
		localctx.op = this.expr(0);
		this.state = 963;
		this.match(VtlParser.COMMA);
		this.state = 964;
		localctx.hrName = this.match(VtlParser.IDENTIFIER);
		this.state = 966;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.CONDITION) {
			this.state = 965;
			this.conditionClause();
		}

		this.state = 970;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
		if (la_ === 1) {
			this.state = 968;
			this.match(VtlParser.RULE);
			this.state = 969;
			localctx.ruleComponent = this.componentID();
		}
		this.state = 973;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			((_la - 213) & ~0x1f) == 0 &&
			((1 << (_la - 213)) &
				((1 << (VtlParser.NON_NULL - 213)) |
					(1 << (VtlParser.NON_ZERO - 213)) |
					(1 << (VtlParser.PARTIAL_NULL - 213)) |
					(1 << (VtlParser.PARTIAL_ZERO - 213)) |
					(1 << (VtlParser.ALWAYS_NULL - 213)) |
					(1 << (VtlParser.ALWAYS_ZERO - 213)))) !==
				0
		) {
			this.state = 972;
			this.validationMode();
		}

		this.state = 976;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			_la === VtlParser.DATASET ||
			_la === VtlParser.RULE ||
			_la === VtlParser.RULE_PRIORITY
		) {
			this.state = 975;
			this.inputModeHierarchy();
		}

		this.state = 979;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.ALL || _la === VtlParser.COMPUTED) {
			this.state = 978;
			this.outputModeHierarchy();
		}

		this.state = 981;
		this.match(VtlParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValidationOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_validationOperators;
	return this;
}

ValidationOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ValidationOperatorsContext.prototype.constructor = ValidationOperatorsContext;

ValidationOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValidateHRrulesetContext(parser, ctx) {
	ValidationOperatorsContext.call(this, parser);
	this.op = null; // ExprContext;
	this.hrName = null; // Token;
	ValidationOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ValidateHRrulesetContext.prototype = Object.create(
	ValidationOperatorsContext.prototype
);
ValidateHRrulesetContext.prototype.constructor = ValidateHRrulesetContext;

VtlParser.ValidateHRrulesetContext = ValidateHRrulesetContext;

ValidateHRrulesetContext.prototype.CHECK_HIERARCHY = function () {
	return this.getToken(VtlParser.CHECK_HIERARCHY, 0);
};

ValidateHRrulesetContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ValidateHRrulesetContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

ValidateHRrulesetContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

ValidateHRrulesetContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

ValidateHRrulesetContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValidateHRrulesetContext.prototype.conditionClause = function () {
	return this.getTypedRuleContext(ConditionClauseContext, 0);
};

ValidateHRrulesetContext.prototype.RULE = function () {
	return this.getToken(VtlParser.RULE, 0);
};

ValidateHRrulesetContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

ValidateHRrulesetContext.prototype.validationMode = function () {
	return this.getTypedRuleContext(ValidationModeContext, 0);
};

ValidateHRrulesetContext.prototype.inputMode = function () {
	return this.getTypedRuleContext(InputModeContext, 0);
};

ValidateHRrulesetContext.prototype.validationOutput = function () {
	return this.getTypedRuleContext(ValidationOutputContext, 0);
};
ValidateHRrulesetContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValidateHRruleset(this);
	}
};

ValidateHRrulesetContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValidateHRruleset(this);
	}
};

ValidateHRrulesetContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValidateHRruleset(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ValidateDPrulesetContext(parser, ctx) {
	ValidationOperatorsContext.call(this, parser);
	this.op = null; // ExprContext;
	this.dpName = null; // Token;
	ValidationOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ValidateDPrulesetContext.prototype = Object.create(
	ValidationOperatorsContext.prototype
);
ValidateDPrulesetContext.prototype.constructor = ValidateDPrulesetContext;

VtlParser.ValidateDPrulesetContext = ValidateDPrulesetContext;

ValidateDPrulesetContext.prototype.CHECK_DATAPOINT = function () {
	return this.getToken(VtlParser.CHECK_DATAPOINT, 0);
};

ValidateDPrulesetContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ValidateDPrulesetContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

ValidateDPrulesetContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

ValidateDPrulesetContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

ValidateDPrulesetContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValidateDPrulesetContext.prototype.COMPONENTS = function () {
	return this.getToken(VtlParser.COMPONENTS, 0);
};

ValidateDPrulesetContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

ValidateDPrulesetContext.prototype.validationOutput = function () {
	return this.getTypedRuleContext(ValidationOutputContext, 0);
};
ValidateDPrulesetContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValidateDPruleset(this);
	}
};

ValidateDPrulesetContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValidateDPruleset(this);
	}
};

ValidateDPrulesetContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValidateDPruleset(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ValidationSimpleContext(parser, ctx) {
	ValidationOperatorsContext.call(this, parser);
	this.op = null; // ExprContext;
	this.codeErr = null; // ErCodeContext;
	this.levelCode = null; // ErLevelContext;
	this.output = null; // Token;
	ValidationOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ValidationSimpleContext.prototype = Object.create(
	ValidationOperatorsContext.prototype
);
ValidationSimpleContext.prototype.constructor = ValidationSimpleContext;

VtlParser.ValidationSimpleContext = ValidationSimpleContext;

ValidationSimpleContext.prototype.CHECK = function () {
	return this.getToken(VtlParser.CHECK, 0);
};

ValidationSimpleContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

ValidationSimpleContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

ValidationSimpleContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

ValidationSimpleContext.prototype.imbalanceExpr = function () {
	return this.getTypedRuleContext(ImbalanceExprContext, 0);
};

ValidationSimpleContext.prototype.erCode = function () {
	return this.getTypedRuleContext(ErCodeContext, 0);
};

ValidationSimpleContext.prototype.erLevel = function () {
	return this.getTypedRuleContext(ErLevelContext, 0);
};

ValidationSimpleContext.prototype.INVALID = function () {
	return this.getToken(VtlParser.INVALID, 0);
};

ValidationSimpleContext.prototype.ALL = function () {
	return this.getToken(VtlParser.ALL, 0);
};
ValidationSimpleContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValidationSimple(this);
	}
};

ValidationSimpleContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValidationSimple(this);
	}
};

ValidationSimpleContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValidationSimple(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ValidationOperatorsContext = ValidationOperatorsContext;

VtlParser.prototype.validationOperators = function () {
	var localctx = new ValidationOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 62, VtlParser.RULE_validationOperators);
	var _la = 0; // Token type
	try {
		this.state = 1044;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.CHECK_DATAPOINT:
				localctx = new ValidateDPrulesetContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 983;
				this.match(VtlParser.CHECK_DATAPOINT);
				this.state = 984;
				this.match(VtlParser.LPAREN);
				this.state = 985;
				localctx.op = this.expr(0);
				this.state = 986;
				this.match(VtlParser.COMMA);
				this.state = 987;
				localctx.dpName = this.match(VtlParser.IDENTIFIER);
				this.state = 997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMPONENTS) {
					this.state = 988;
					this.match(VtlParser.COMPONENTS);
					this.state = 989;
					this.componentID();
					this.state = 994;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === VtlParser.COMMA) {
						this.state = 990;
						this.match(VtlParser.COMMA);
						this.state = 991;
						this.componentID();
						this.state = 996;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
				}

				this.state = 1000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					_la === VtlParser.ALL ||
					_la === VtlParser.INVALID ||
					_la === VtlParser.ALL_MEASURES
				) {
					this.state = 999;
					this.validationOutput();
				}

				this.state = 1002;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CHECK_HIERARCHY:
				localctx = new ValidateHRrulesetContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1004;
				this.match(VtlParser.CHECK_HIERARCHY);
				this.state = 1005;
				this.match(VtlParser.LPAREN);
				this.state = 1006;
				localctx.op = this.expr(0);
				this.state = 1007;
				this.match(VtlParser.COMMA);
				this.state = 1008;
				localctx.hrName = this.match(VtlParser.IDENTIFIER);
				this.state = 1010;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.CONDITION) {
					this.state = 1009;
					this.conditionClause();
				}

				this.state = 1014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.RULE) {
					this.state = 1012;
					this.match(VtlParser.RULE);
					this.state = 1013;
					this.componentID();
				}

				this.state = 1017;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					((_la - 213) & ~0x1f) == 0 &&
					((1 << (_la - 213)) &
						((1 << (VtlParser.NON_NULL - 213)) |
							(1 << (VtlParser.NON_ZERO - 213)) |
							(1 << (VtlParser.PARTIAL_NULL - 213)) |
							(1 << (VtlParser.PARTIAL_ZERO - 213)) |
							(1 << (VtlParser.ALWAYS_NULL - 213)) |
							(1 << (VtlParser.ALWAYS_ZERO - 213)))) !==
						0
				) {
					this.state = 1016;
					this.validationMode();
				}

				this.state = 1020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.DATASET || _la === VtlParser.DATASET_PRIORITY) {
					this.state = 1019;
					this.inputMode();
				}

				this.state = 1023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (
					_la === VtlParser.ALL ||
					_la === VtlParser.INVALID ||
					_la === VtlParser.ALL_MEASURES
				) {
					this.state = 1022;
					this.validationOutput();
				}

				this.state = 1025;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.CHECK:
				localctx = new ValidationSimpleContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 1027;
				this.match(VtlParser.CHECK);
				this.state = 1028;
				this.match(VtlParser.LPAREN);
				this.state = 1029;
				localctx.op = this.expr(0);
				this.state = 1031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.ERRORCODE) {
					this.state = 1030;
					localctx.codeErr = this.erCode();
				}

				this.state = 1034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.ERRORLEVEL) {
					this.state = 1033;
					localctx.levelCode = this.erLevel();
				}

				this.state = 1037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.IMBALANCE) {
					this.state = 1036;
					this.imbalanceExpr();
				}

				this.state = 1040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.ALL || _la === VtlParser.INVALID) {
					this.state = 1039;
					localctx.output = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === VtlParser.ALL || _la === VtlParser.INVALID)) {
						localctx.output = this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}

				this.state = 1042;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ConditionalOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_conditionalOperators;
	return this;
}

ConditionalOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ConditionalOperatorsContext.prototype.constructor = ConditionalOperatorsContext;

ConditionalOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NvlAtomContext(parser, ctx) {
	ConditionalOperatorsContext.call(this, parser);
	this.left = null; // ExprContext;
	this.right = null; // ExprContext;
	ConditionalOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

NvlAtomContext.prototype = Object.create(ConditionalOperatorsContext.prototype);
NvlAtomContext.prototype.constructor = NvlAtomContext;

VtlParser.NvlAtomContext = NvlAtomContext;

NvlAtomContext.prototype.NVL = function () {
	return this.getToken(VtlParser.NVL, 0);
};

NvlAtomContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

NvlAtomContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

NvlAtomContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

NvlAtomContext.prototype.expr = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprContext);
	} else {
		return this.getTypedRuleContext(ExprContext, i);
	}
};
NvlAtomContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterNvlAtom(this);
	}
};

NvlAtomContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitNvlAtom(this);
	}
};

NvlAtomContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitNvlAtom(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ConditionalOperatorsContext = ConditionalOperatorsContext;

VtlParser.prototype.conditionalOperators = function () {
	var localctx = new ConditionalOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 64, VtlParser.RULE_conditionalOperators);
	try {
		localctx = new NvlAtomContext(this, localctx);
		this.enterOuterAlt(localctx, 1);
		this.state = 1046;
		this.match(VtlParser.NVL);
		this.state = 1047;
		this.match(VtlParser.LPAREN);
		this.state = 1048;
		localctx.left = this.expr(0);
		this.state = 1049;
		this.match(VtlParser.COMMA);
		this.state = 1050;
		localctx.right = this.expr(0);
		this.state = 1051;
		this.match(VtlParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ConditionalOperatorsComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_conditionalOperatorsComponent;
	return this;
}

ConditionalOperatorsComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ConditionalOperatorsComponentContext.prototype.constructor = ConditionalOperatorsComponentContext;

ConditionalOperatorsComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NvlAtomComponentContext(parser, ctx) {
	ConditionalOperatorsComponentContext.call(this, parser);
	this.left = null; // ExprComponentContext;
	this.right = null; // ExprComponentContext;
	ConditionalOperatorsComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

NvlAtomComponentContext.prototype = Object.create(
	ConditionalOperatorsComponentContext.prototype
);
NvlAtomComponentContext.prototype.constructor = NvlAtomComponentContext;

VtlParser.NvlAtomComponentContext = NvlAtomComponentContext;

NvlAtomComponentContext.prototype.NVL = function () {
	return this.getToken(VtlParser.NVL, 0);
};

NvlAtomComponentContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

NvlAtomComponentContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

NvlAtomComponentContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

NvlAtomComponentContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};
NvlAtomComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterNvlAtomComponent(this);
	}
};

NvlAtomComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitNvlAtomComponent(this);
	}
};

NvlAtomComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitNvlAtomComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ConditionalOperatorsComponentContext = ConditionalOperatorsComponentContext;

VtlParser.prototype.conditionalOperatorsComponent = function () {
	var localctx = new ConditionalOperatorsComponentContext(
		this,
		this._ctx,
		this.state
	);
	this.enterRule(localctx, 66, VtlParser.RULE_conditionalOperatorsComponent);
	try {
		localctx = new NvlAtomComponentContext(this, localctx);
		this.enterOuterAlt(localctx, 1);
		this.state = 1053;
		this.match(VtlParser.NVL);
		this.state = 1054;
		this.match(VtlParser.LPAREN);
		this.state = 1055;
		localctx.left = this.exprComponent(0);
		this.state = 1056;
		this.match(VtlParser.COMMA);
		this.state = 1057;
		localctx.right = this.exprComponent(0);
		this.state = 1058;
		this.match(VtlParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AggrOperatorsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_aggrOperators;
	return this;
}

AggrOperatorsContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
AggrOperatorsContext.prototype.constructor = AggrOperatorsContext;

AggrOperatorsContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AggrCompContext(parser, ctx) {
	AggrOperatorsContext.call(this, parser);
	this.op = null; // Token;
	AggrOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AggrCompContext.prototype = Object.create(AggrOperatorsContext.prototype);
AggrCompContext.prototype.constructor = AggrCompContext;

VtlParser.AggrCompContext = AggrCompContext;

AggrCompContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

AggrCompContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

AggrCompContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

AggrCompContext.prototype.SUM = function () {
	return this.getToken(VtlParser.SUM, 0);
};

AggrCompContext.prototype.AVG = function () {
	return this.getToken(VtlParser.AVG, 0);
};

AggrCompContext.prototype.COUNT = function () {
	return this.getToken(VtlParser.COUNT, 0);
};

AggrCompContext.prototype.MEDIAN = function () {
	return this.getToken(VtlParser.MEDIAN, 0);
};

AggrCompContext.prototype.MIN = function () {
	return this.getToken(VtlParser.MIN, 0);
};

AggrCompContext.prototype.MAX = function () {
	return this.getToken(VtlParser.MAX, 0);
};

AggrCompContext.prototype.STDDEV_POP = function () {
	return this.getToken(VtlParser.STDDEV_POP, 0);
};

AggrCompContext.prototype.STDDEV_SAMP = function () {
	return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AggrCompContext.prototype.VAR_POP = function () {
	return this.getToken(VtlParser.VAR_POP, 0);
};

AggrCompContext.prototype.VAR_SAMP = function () {
	return this.getToken(VtlParser.VAR_SAMP, 0);
};
AggrCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAggrComp(this);
	}
};

AggrCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAggrComp(this);
	}
};

AggrCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAggrComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function CountAggrCompContext(parser, ctx) {
	AggrOperatorsContext.call(this, parser);
	AggrOperatorsContext.prototype.copyFrom.call(this, ctx);
	return this;
}

CountAggrCompContext.prototype = Object.create(AggrOperatorsContext.prototype);
CountAggrCompContext.prototype.constructor = CountAggrCompContext;

VtlParser.CountAggrCompContext = CountAggrCompContext;

CountAggrCompContext.prototype.COUNT = function () {
	return this.getToken(VtlParser.COUNT, 0);
};

CountAggrCompContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

CountAggrCompContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};
CountAggrCompContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCountAggrComp(this);
	}
};

CountAggrCompContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCountAggrComp(this);
	}
};

CountAggrCompContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCountAggrComp(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AggrOperatorsContext = AggrOperatorsContext;

VtlParser.prototype.aggrOperators = function () {
	var localctx = new AggrOperatorsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 68, VtlParser.RULE_aggrOperators);
	var _la = 0; // Token type
	try {
		this.state = 1068;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
		switch (la_) {
			case 1:
				localctx = new AggrCompContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 1060;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						(((_la - 68) & ~0x1f) == 0 &&
							((1 << (_la - 68)) &
								((1 << (VtlParser.MIN - 68)) |
									(1 << (VtlParser.MAX - 68)) |
									(1 << (VtlParser.SUM - 68)) |
									(1 << (VtlParser.AVG - 68)) |
									(1 << (VtlParser.MEDIAN - 68)) |
									(1 << (VtlParser.COUNT - 68)))) !==
								0) ||
						(((_la - 128) & ~0x1f) == 0 &&
							((1 << (_la - 128)) &
								((1 << (VtlParser.STDDEV_POP - 128)) |
									(1 << (VtlParser.STDDEV_SAMP - 128)) |
									(1 << (VtlParser.VAR_POP - 128)) |
									(1 << (VtlParser.VAR_SAMP - 128)))) !==
								0)
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1061;
				this.match(VtlParser.LPAREN);
				this.state = 1062;
				this.exprComponent(0);
				this.state = 1063;
				this.match(VtlParser.RPAREN);
				break;

			case 2:
				localctx = new CountAggrCompContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1065;
				this.match(VtlParser.COUNT);
				this.state = 1066;
				this.match(VtlParser.LPAREN);
				this.state = 1067;
				this.match(VtlParser.RPAREN);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AggrOperatorsGroupingContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_aggrOperatorsGrouping;
	return this;
}

AggrOperatorsGroupingContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
AggrOperatorsGroupingContext.prototype.constructor = AggrOperatorsGroupingContext;

AggrOperatorsGroupingContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AggrDatasetContext(parser, ctx) {
	AggrOperatorsGroupingContext.call(this, parser);
	this.op = null; // Token;
	AggrOperatorsGroupingContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AggrDatasetContext.prototype = Object.create(
	AggrOperatorsGroupingContext.prototype
);
AggrDatasetContext.prototype.constructor = AggrDatasetContext;

VtlParser.AggrDatasetContext = AggrDatasetContext;

AggrDatasetContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

AggrDatasetContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

AggrDatasetContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

AggrDatasetContext.prototype.SUM = function () {
	return this.getToken(VtlParser.SUM, 0);
};

AggrDatasetContext.prototype.AVG = function () {
	return this.getToken(VtlParser.AVG, 0);
};

AggrDatasetContext.prototype.COUNT = function () {
	return this.getToken(VtlParser.COUNT, 0);
};

AggrDatasetContext.prototype.MEDIAN = function () {
	return this.getToken(VtlParser.MEDIAN, 0);
};

AggrDatasetContext.prototype.MIN = function () {
	return this.getToken(VtlParser.MIN, 0);
};

AggrDatasetContext.prototype.MAX = function () {
	return this.getToken(VtlParser.MAX, 0);
};

AggrDatasetContext.prototype.STDDEV_POP = function () {
	return this.getToken(VtlParser.STDDEV_POP, 0);
};

AggrDatasetContext.prototype.STDDEV_SAMP = function () {
	return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AggrDatasetContext.prototype.VAR_POP = function () {
	return this.getToken(VtlParser.VAR_POP, 0);
};

AggrDatasetContext.prototype.VAR_SAMP = function () {
	return this.getToken(VtlParser.VAR_SAMP, 0);
};

AggrDatasetContext.prototype.groupingClause = function () {
	return this.getTypedRuleContext(GroupingClauseContext, 0);
};

AggrDatasetContext.prototype.havingClause = function () {
	return this.getTypedRuleContext(HavingClauseContext, 0);
};
AggrDatasetContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAggrDataset(this);
	}
};

AggrDatasetContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAggrDataset(this);
	}
};

AggrDatasetContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAggrDataset(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AggrOperatorsGroupingContext = AggrOperatorsGroupingContext;

VtlParser.prototype.aggrOperatorsGrouping = function () {
	var localctx = new AggrOperatorsGroupingContext(this, this._ctx, this.state);
	this.enterRule(localctx, 70, VtlParser.RULE_aggrOperatorsGrouping);
	var _la = 0; // Token type
	try {
		localctx = new AggrDatasetContext(this, localctx);
		this.enterOuterAlt(localctx, 1);
		this.state = 1070;
		localctx.op = this._input.LT(1);
		_la = this._input.LA(1);
		if (
			!(
				(((_la - 68) & ~0x1f) == 0 &&
					((1 << (_la - 68)) &
						((1 << (VtlParser.MIN - 68)) |
							(1 << (VtlParser.MAX - 68)) |
							(1 << (VtlParser.SUM - 68)) |
							(1 << (VtlParser.AVG - 68)) |
							(1 << (VtlParser.MEDIAN - 68)) |
							(1 << (VtlParser.COUNT - 68)))) !==
						0) ||
				(((_la - 128) & ~0x1f) == 0 &&
					((1 << (_la - 128)) &
						((1 << (VtlParser.STDDEV_POP - 128)) |
							(1 << (VtlParser.STDDEV_SAMP - 128)) |
							(1 << (VtlParser.VAR_POP - 128)) |
							(1 << (VtlParser.VAR_SAMP - 128)))) !==
						0)
			)
		) {
			localctx.op = this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1071;
		this.match(VtlParser.LPAREN);
		this.state = 1072;
		this.expr(0);
		this.state = 1077;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.GROUP) {
			this.state = 1073;
			this.groupingClause();
			this.state = 1075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === VtlParser.HAVING) {
				this.state = 1074;
				this.havingClause();
			}
		}

		this.state = 1079;
		this.match(VtlParser.RPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AnFunctionContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_anFunction;
	return this;
}

AnFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnFunctionContext.prototype.constructor = AnFunctionContext;

AnFunctionContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LagOrLeadAnContext(parser, ctx) {
	AnFunctionContext.call(this, parser);
	this.op = null; // Token;
	this.offet = null; // SignedIntegerContext;
	this.defaultValue = null; // ConstantContext;
	this.partition = null; // PartitionByClauseContext;
	this.orderBy = null; // OrderByClauseContext;
	AnFunctionContext.prototype.copyFrom.call(this, ctx);
	return this;
}

LagOrLeadAnContext.prototype = Object.create(AnFunctionContext.prototype);
LagOrLeadAnContext.prototype.constructor = LagOrLeadAnContext;

VtlParser.LagOrLeadAnContext = LagOrLeadAnContext;

LagOrLeadAnContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

LagOrLeadAnContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

LagOrLeadAnContext.prototype.OVER = function () {
	return this.getToken(VtlParser.OVER, 0);
};

LagOrLeadAnContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

LagOrLeadAnContext.prototype.LAG = function () {
	return this.getToken(VtlParser.LAG, 0);
};

LagOrLeadAnContext.prototype.LEAD = function () {
	return this.getToken(VtlParser.LEAD, 0);
};

LagOrLeadAnContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

LagOrLeadAnContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

LagOrLeadAnContext.prototype.signedInteger = function () {
	return this.getTypedRuleContext(SignedIntegerContext, 0);
};

LagOrLeadAnContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};

LagOrLeadAnContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};
LagOrLeadAnContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterLagOrLeadAn(this);
	}
};

LagOrLeadAnContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitLagOrLeadAn(this);
	}
};

LagOrLeadAnContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitLagOrLeadAn(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function RatioToReportAnContext(parser, ctx) {
	AnFunctionContext.call(this, parser);
	this.op = null; // Token;
	this.partition = null; // PartitionByClauseContext;
	AnFunctionContext.prototype.copyFrom.call(this, ctx);
	return this;
}

RatioToReportAnContext.prototype = Object.create(AnFunctionContext.prototype);
RatioToReportAnContext.prototype.constructor = RatioToReportAnContext;

VtlParser.RatioToReportAnContext = RatioToReportAnContext;

RatioToReportAnContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

RatioToReportAnContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

RatioToReportAnContext.prototype.OVER = function () {
	return this.getToken(VtlParser.OVER, 0);
};

RatioToReportAnContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

RatioToReportAnContext.prototype.RATIO_TO_REPORT = function () {
	return this.getToken(VtlParser.RATIO_TO_REPORT, 0);
};

RatioToReportAnContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};
RatioToReportAnContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRatioToReportAn(this);
	}
};

RatioToReportAnContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRatioToReportAn(this);
	}
};

RatioToReportAnContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRatioToReportAn(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function AnSimpleFunctionContext(parser, ctx) {
	AnFunctionContext.call(this, parser);
	this.op = null; // Token;
	this.partition = null; // PartitionByClauseContext;
	this.orderBy = null; // OrderByClauseContext;
	this.windowing = null; // WindowingClauseContext;
	AnFunctionContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AnSimpleFunctionContext.prototype = Object.create(AnFunctionContext.prototype);
AnSimpleFunctionContext.prototype.constructor = AnSimpleFunctionContext;

VtlParser.AnSimpleFunctionContext = AnSimpleFunctionContext;

AnSimpleFunctionContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

AnSimpleFunctionContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

AnSimpleFunctionContext.prototype.OVER = function () {
	return this.getToken(VtlParser.OVER, 0);
};

AnSimpleFunctionContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

AnSimpleFunctionContext.prototype.SUM = function () {
	return this.getToken(VtlParser.SUM, 0);
};

AnSimpleFunctionContext.prototype.AVG = function () {
	return this.getToken(VtlParser.AVG, 0);
};

AnSimpleFunctionContext.prototype.COUNT = function () {
	return this.getToken(VtlParser.COUNT, 0);
};

AnSimpleFunctionContext.prototype.MEDIAN = function () {
	return this.getToken(VtlParser.MEDIAN, 0);
};

AnSimpleFunctionContext.prototype.MIN = function () {
	return this.getToken(VtlParser.MIN, 0);
};

AnSimpleFunctionContext.prototype.MAX = function () {
	return this.getToken(VtlParser.MAX, 0);
};

AnSimpleFunctionContext.prototype.STDDEV_POP = function () {
	return this.getToken(VtlParser.STDDEV_POP, 0);
};

AnSimpleFunctionContext.prototype.STDDEV_SAMP = function () {
	return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AnSimpleFunctionContext.prototype.VAR_POP = function () {
	return this.getToken(VtlParser.VAR_POP, 0);
};

AnSimpleFunctionContext.prototype.VAR_SAMP = function () {
	return this.getToken(VtlParser.VAR_SAMP, 0);
};

AnSimpleFunctionContext.prototype.FIRST_VALUE = function () {
	return this.getToken(VtlParser.FIRST_VALUE, 0);
};

AnSimpleFunctionContext.prototype.LAST_VALUE = function () {
	return this.getToken(VtlParser.LAST_VALUE, 0);
};

AnSimpleFunctionContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};

AnSimpleFunctionContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

AnSimpleFunctionContext.prototype.windowingClause = function () {
	return this.getTypedRuleContext(WindowingClauseContext, 0);
};
AnSimpleFunctionContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAnSimpleFunction(this);
	}
};

AnSimpleFunctionContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAnSimpleFunction(this);
	}
};

AnSimpleFunctionContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAnSimpleFunction(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AnFunctionContext = AnFunctionContext;

VtlParser.prototype.anFunction = function () {
	var localctx = new AnFunctionContext(this, this._ctx, this.state);
	this.enterRule(localctx, 72, VtlParser.RULE_anFunction);
	var _la = 0; // Token type
	try {
		this.state = 1127;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.MIN:
			case VtlParser.MAX:
			case VtlParser.SUM:
			case VtlParser.AVG:
			case VtlParser.MEDIAN:
			case VtlParser.COUNT:
			case VtlParser.STDDEV_POP:
			case VtlParser.STDDEV_SAMP:
			case VtlParser.VAR_POP:
			case VtlParser.VAR_SAMP:
			case VtlParser.FIRST_VALUE:
			case VtlParser.LAST_VALUE:
				localctx = new AnSimpleFunctionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 1081;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						(((_la - 68) & ~0x1f) == 0 &&
							((1 << (_la - 68)) &
								((1 << (VtlParser.MIN - 68)) |
									(1 << (VtlParser.MAX - 68)) |
									(1 << (VtlParser.SUM - 68)) |
									(1 << (VtlParser.AVG - 68)) |
									(1 << (VtlParser.MEDIAN - 68)) |
									(1 << (VtlParser.COUNT - 68)))) !==
								0) ||
						(((_la - 128) & ~0x1f) == 0 &&
							((1 << (_la - 128)) &
								((1 << (VtlParser.STDDEV_POP - 128)) |
									(1 << (VtlParser.STDDEV_SAMP - 128)) |
									(1 << (VtlParser.VAR_POP - 128)) |
									(1 << (VtlParser.VAR_SAMP - 128)) |
									(1 << (VtlParser.FIRST_VALUE - 128)) |
									(1 << (VtlParser.LAST_VALUE - 128)))) !==
								0)
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1082;
				this.match(VtlParser.LPAREN);
				this.state = 1083;
				this.expr(0);
				this.state = 1084;
				this.match(VtlParser.OVER);
				this.state = 1085;
				this.match(VtlParser.LPAREN);

				this.state = 1087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.PARTITION) {
					this.state = 1086;
					localctx.partition = this.partitionByClause();
				}

				this.state = 1090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.ORDER) {
					this.state = 1089;
					localctx.orderBy = this.orderByClause();
				}

				this.state = 1093;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.DATA || _la === VtlParser.RANGE) {
					this.state = 1092;
					localctx.windowing = this.windowingClause();
				}

				this.state = 1095;
				this.match(VtlParser.RPAREN);
				this.state = 1096;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.LAG:
			case VtlParser.LEAD:
				localctx = new LagOrLeadAnContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1098;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.LAG || _la === VtlParser.LEAD)) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1099;
				this.match(VtlParser.LPAREN);
				this.state = 1100;
				this.expr(0);
				this.state = 1106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 1101;
					this.match(VtlParser.COMMA);
					this.state = 1102;
					localctx.offet = this.signedInteger();
					this.state = 1104;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						_la === VtlParser.NULL_CONSTANT ||
						(((_la - 229) & ~0x1f) == 0 &&
							((1 << (_la - 229)) &
								((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
									(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
									(1 << (VtlParser.BOOLEAN_CONSTANT - 229)) |
									(1 << (VtlParser.STRING_CONSTANT - 229)))) !==
								0)
					) {
						this.state = 1103;
						localctx.defaultValue = this.constant();
					}
				}

				this.state = 1108;
				this.match(VtlParser.OVER);
				this.state = 1109;
				this.match(VtlParser.LPAREN);

				this.state = 1111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.PARTITION) {
					this.state = 1110;
					localctx.partition = this.partitionByClause();
				}

				this.state = 1113;
				localctx.orderBy = this.orderByClause();
				this.state = 1115;
				this.match(VtlParser.RPAREN);
				this.state = 1116;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.RATIO_TO_REPORT:
				localctx = new RatioToReportAnContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 1118;
				localctx.op = this.match(VtlParser.RATIO_TO_REPORT);
				this.state = 1119;
				this.match(VtlParser.LPAREN);
				this.state = 1120;
				this.expr(0);
				this.state = 1121;
				this.match(VtlParser.OVER);
				this.state = 1122;
				this.match(VtlParser.LPAREN);

				this.state = 1123;
				localctx.partition = this.partitionByClause();
				this.state = 1124;
				this.match(VtlParser.RPAREN);
				this.state = 1125;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AnFunctionComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_anFunctionComponent;
	return this;
}

AnFunctionComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
AnFunctionComponentContext.prototype.constructor = AnFunctionComponentContext;

AnFunctionComponentContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AnSimpleFunctionComponentContext(parser, ctx) {
	AnFunctionComponentContext.call(this, parser);
	this.op = null; // Token;
	this.partition = null; // PartitionByClauseContext;
	this.orderBy = null; // OrderByClauseContext;
	this.windowing = null; // WindowingClauseContext;
	AnFunctionComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

AnSimpleFunctionComponentContext.prototype = Object.create(
	AnFunctionComponentContext.prototype
);
AnSimpleFunctionComponentContext.prototype.constructor = AnSimpleFunctionComponentContext;

VtlParser.AnSimpleFunctionComponentContext = AnSimpleFunctionComponentContext;

AnSimpleFunctionComponentContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

AnSimpleFunctionComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

AnSimpleFunctionComponentContext.prototype.OVER = function () {
	return this.getToken(VtlParser.OVER, 0);
};

AnSimpleFunctionComponentContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

AnSimpleFunctionComponentContext.prototype.SUM = function () {
	return this.getToken(VtlParser.SUM, 0);
};

AnSimpleFunctionComponentContext.prototype.AVG = function () {
	return this.getToken(VtlParser.AVG, 0);
};

AnSimpleFunctionComponentContext.prototype.COUNT = function () {
	return this.getToken(VtlParser.COUNT, 0);
};

AnSimpleFunctionComponentContext.prototype.MEDIAN = function () {
	return this.getToken(VtlParser.MEDIAN, 0);
};

AnSimpleFunctionComponentContext.prototype.MIN = function () {
	return this.getToken(VtlParser.MIN, 0);
};

AnSimpleFunctionComponentContext.prototype.MAX = function () {
	return this.getToken(VtlParser.MAX, 0);
};

AnSimpleFunctionComponentContext.prototype.STDDEV_POP = function () {
	return this.getToken(VtlParser.STDDEV_POP, 0);
};

AnSimpleFunctionComponentContext.prototype.STDDEV_SAMP = function () {
	return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AnSimpleFunctionComponentContext.prototype.VAR_POP = function () {
	return this.getToken(VtlParser.VAR_POP, 0);
};

AnSimpleFunctionComponentContext.prototype.VAR_SAMP = function () {
	return this.getToken(VtlParser.VAR_SAMP, 0);
};

AnSimpleFunctionComponentContext.prototype.FIRST_VALUE = function () {
	return this.getToken(VtlParser.FIRST_VALUE, 0);
};

AnSimpleFunctionComponentContext.prototype.LAST_VALUE = function () {
	return this.getToken(VtlParser.LAST_VALUE, 0);
};

AnSimpleFunctionComponentContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};

AnSimpleFunctionComponentContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

AnSimpleFunctionComponentContext.prototype.windowingClause = function () {
	return this.getTypedRuleContext(WindowingClauseContext, 0);
};
AnSimpleFunctionComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAnSimpleFunctionComponent(this);
	}
};

AnSimpleFunctionComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAnSimpleFunctionComponent(this);
	}
};

AnSimpleFunctionComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAnSimpleFunctionComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function LagOrLeadAnComponentContext(parser, ctx) {
	AnFunctionComponentContext.call(this, parser);
	this.op = null; // Token;
	this.offet = null; // SignedIntegerContext;
	this.defaultValue = null; // ConstantContext;
	this.partition = null; // PartitionByClauseContext;
	this.orderBy = null; // OrderByClauseContext;
	AnFunctionComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

LagOrLeadAnComponentContext.prototype = Object.create(
	AnFunctionComponentContext.prototype
);
LagOrLeadAnComponentContext.prototype.constructor = LagOrLeadAnComponentContext;

VtlParser.LagOrLeadAnComponentContext = LagOrLeadAnComponentContext;

LagOrLeadAnComponentContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

LagOrLeadAnComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

LagOrLeadAnComponentContext.prototype.OVER = function () {
	return this.getToken(VtlParser.OVER, 0);
};

LagOrLeadAnComponentContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

LagOrLeadAnComponentContext.prototype.LAG = function () {
	return this.getToken(VtlParser.LAG, 0);
};

LagOrLeadAnComponentContext.prototype.LEAD = function () {
	return this.getToken(VtlParser.LEAD, 0);
};

LagOrLeadAnComponentContext.prototype.COMMA = function () {
	return this.getToken(VtlParser.COMMA, 0);
};

LagOrLeadAnComponentContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

LagOrLeadAnComponentContext.prototype.signedInteger = function () {
	return this.getTypedRuleContext(SignedIntegerContext, 0);
};

LagOrLeadAnComponentContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};

LagOrLeadAnComponentContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};
LagOrLeadAnComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterLagOrLeadAnComponent(this);
	}
};

LagOrLeadAnComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitLagOrLeadAnComponent(this);
	}
};

LagOrLeadAnComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitLagOrLeadAnComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function RankAnComponentContext(parser, ctx) {
	AnFunctionComponentContext.call(this, parser);
	this.op = null; // Token;
	this.partition = null; // PartitionByClauseContext;
	this.orderBy = null; // OrderByClauseContext;
	AnFunctionComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

RankAnComponentContext.prototype = Object.create(
	AnFunctionComponentContext.prototype
);
RankAnComponentContext.prototype.constructor = RankAnComponentContext;

VtlParser.RankAnComponentContext = RankAnComponentContext;

RankAnComponentContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

RankAnComponentContext.prototype.OVER = function () {
	return this.getToken(VtlParser.OVER, 0);
};

RankAnComponentContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

RankAnComponentContext.prototype.RANK = function () {
	return this.getToken(VtlParser.RANK, 0);
};

RankAnComponentContext.prototype.orderByClause = function () {
	return this.getTypedRuleContext(OrderByClauseContext, 0);
};

RankAnComponentContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};
RankAnComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRankAnComponent(this);
	}
};

RankAnComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRankAnComponent(this);
	}
};

RankAnComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRankAnComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function RatioToReportAnComponentContext(parser, ctx) {
	AnFunctionComponentContext.call(this, parser);
	this.op = null; // Token;
	this.partition = null; // PartitionByClauseContext;
	AnFunctionComponentContext.prototype.copyFrom.call(this, ctx);
	return this;
}

RatioToReportAnComponentContext.prototype = Object.create(
	AnFunctionComponentContext.prototype
);
RatioToReportAnComponentContext.prototype.constructor = RatioToReportAnComponentContext;

VtlParser.RatioToReportAnComponentContext = RatioToReportAnComponentContext;

RatioToReportAnComponentContext.prototype.LPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.LPAREN);
	} else {
		return this.getToken(VtlParser.LPAREN, i);
	}
};

RatioToReportAnComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

RatioToReportAnComponentContext.prototype.OVER = function () {
	return this.getToken(VtlParser.OVER, 0);
};

RatioToReportAnComponentContext.prototype.RPAREN = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.RPAREN);
	} else {
		return this.getToken(VtlParser.RPAREN, i);
	}
};

RatioToReportAnComponentContext.prototype.RATIO_TO_REPORT = function () {
	return this.getToken(VtlParser.RATIO_TO_REPORT, 0);
};

RatioToReportAnComponentContext.prototype.partitionByClause = function () {
	return this.getTypedRuleContext(PartitionByClauseContext, 0);
};
RatioToReportAnComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRatioToReportAnComponent(this);
	}
};

RatioToReportAnComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRatioToReportAnComponent(this);
	}
};

RatioToReportAnComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRatioToReportAnComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AnFunctionComponentContext = AnFunctionComponentContext;

VtlParser.prototype.anFunctionComponent = function () {
	var localctx = new AnFunctionComponentContext(this, this._ctx, this.state);
	this.enterRule(localctx, 74, VtlParser.RULE_anFunctionComponent);
	var _la = 0; // Token type
	try {
		this.state = 1187;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.MIN:
			case VtlParser.MAX:
			case VtlParser.SUM:
			case VtlParser.AVG:
			case VtlParser.MEDIAN:
			case VtlParser.COUNT:
			case VtlParser.STDDEV_POP:
			case VtlParser.STDDEV_SAMP:
			case VtlParser.VAR_POP:
			case VtlParser.VAR_SAMP:
			case VtlParser.FIRST_VALUE:
			case VtlParser.LAST_VALUE:
				localctx = new AnSimpleFunctionComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 1129;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (
					!(
						(((_la - 68) & ~0x1f) == 0 &&
							((1 << (_la - 68)) &
								((1 << (VtlParser.MIN - 68)) |
									(1 << (VtlParser.MAX - 68)) |
									(1 << (VtlParser.SUM - 68)) |
									(1 << (VtlParser.AVG - 68)) |
									(1 << (VtlParser.MEDIAN - 68)) |
									(1 << (VtlParser.COUNT - 68)))) !==
								0) ||
						(((_la - 128) & ~0x1f) == 0 &&
							((1 << (_la - 128)) &
								((1 << (VtlParser.STDDEV_POP - 128)) |
									(1 << (VtlParser.STDDEV_SAMP - 128)) |
									(1 << (VtlParser.VAR_POP - 128)) |
									(1 << (VtlParser.VAR_SAMP - 128)) |
									(1 << (VtlParser.FIRST_VALUE - 128)) |
									(1 << (VtlParser.LAST_VALUE - 128)))) !==
								0)
					)
				) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1130;
				this.match(VtlParser.LPAREN);
				this.state = 1131;
				this.exprComponent(0);
				this.state = 1132;
				this.match(VtlParser.OVER);
				this.state = 1133;
				this.match(VtlParser.LPAREN);

				this.state = 1135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.PARTITION) {
					this.state = 1134;
					localctx.partition = this.partitionByClause();
				}

				this.state = 1138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.ORDER) {
					this.state = 1137;
					localctx.orderBy = this.orderByClause();
				}

				this.state = 1141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.DATA || _la === VtlParser.RANGE) {
					this.state = 1140;
					localctx.windowing = this.windowingClause();
				}

				this.state = 1143;
				this.match(VtlParser.RPAREN);
				this.state = 1144;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.LAG:
			case VtlParser.LEAD:
				localctx = new LagOrLeadAnComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1146;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.LAG || _la === VtlParser.LEAD)) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1147;
				this.match(VtlParser.LPAREN);
				this.state = 1148;
				this.exprComponent(0);
				this.state = 1154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.COMMA) {
					this.state = 1149;
					this.match(VtlParser.COMMA);
					this.state = 1150;
					localctx.offet = this.signedInteger();
					this.state = 1152;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						_la === VtlParser.NULL_CONSTANT ||
						(((_la - 229) & ~0x1f) == 0 &&
							((1 << (_la - 229)) &
								((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
									(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
									(1 << (VtlParser.BOOLEAN_CONSTANT - 229)) |
									(1 << (VtlParser.STRING_CONSTANT - 229)))) !==
								0)
					) {
						this.state = 1151;
						localctx.defaultValue = this.constant();
					}
				}

				this.state = 1156;
				this.match(VtlParser.OVER);
				this.state = 1157;
				this.match(VtlParser.LPAREN);

				this.state = 1159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.PARTITION) {
					this.state = 1158;
					localctx.partition = this.partitionByClause();
				}

				this.state = 1161;
				localctx.orderBy = this.orderByClause();
				this.state = 1163;
				this.match(VtlParser.RPAREN);
				this.state = 1164;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.RANK:
				localctx = new RankAnComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 1166;
				localctx.op = this.match(VtlParser.RANK);
				this.state = 1167;
				this.match(VtlParser.LPAREN);
				this.state = 1168;
				this.match(VtlParser.OVER);
				this.state = 1169;
				this.match(VtlParser.LPAREN);

				this.state = 1171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.PARTITION) {
					this.state = 1170;
					localctx.partition = this.partitionByClause();
				}

				this.state = 1173;
				localctx.orderBy = this.orderByClause();
				this.state = 1175;
				this.match(VtlParser.RPAREN);
				this.state = 1176;
				this.match(VtlParser.RPAREN);
				break;
			case VtlParser.RATIO_TO_REPORT:
				localctx = new RatioToReportAnComponentContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				this.state = 1178;
				localctx.op = this.match(VtlParser.RATIO_TO_REPORT);
				this.state = 1179;
				this.match(VtlParser.LPAREN);
				this.state = 1180;
				this.exprComponent(0);
				this.state = 1181;
				this.match(VtlParser.OVER);
				this.state = 1182;
				this.match(VtlParser.LPAREN);

				this.state = 1183;
				localctx.partition = this.partitionByClause();
				this.state = 1184;
				this.match(VtlParser.RPAREN);
				this.state = 1185;
				this.match(VtlParser.RPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RenameClauseItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_renameClauseItem;
	this.fromName = null; // ComponentIDContext
	this.toName = null; // ComponentIDContext
	return this;
}

RenameClauseItemContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RenameClauseItemContext.prototype.constructor = RenameClauseItemContext;

RenameClauseItemContext.prototype.TO = function () {
	return this.getToken(VtlParser.TO, 0);
};

RenameClauseItemContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

RenameClauseItemContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRenameClauseItem(this);
	}
};

RenameClauseItemContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRenameClauseItem(this);
	}
};

RenameClauseItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRenameClauseItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RenameClauseItemContext = RenameClauseItemContext;

VtlParser.prototype.renameClauseItem = function () {
	var localctx = new RenameClauseItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 76, VtlParser.RULE_renameClauseItem);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1189;
		localctx.fromName = this.componentID();
		this.state = 1190;
		this.match(VtlParser.TO);
		this.state = 1191;
		localctx.toName = this.componentID();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AggregateClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_aggregateClause;
	return this;
}

AggregateClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
AggregateClauseContext.prototype.constructor = AggregateClauseContext;

AggregateClauseContext.prototype.aggrFunctionClause = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(AggrFunctionClauseContext);
	} else {
		return this.getTypedRuleContext(AggrFunctionClauseContext, i);
	}
};

AggregateClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

AggregateClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAggregateClause(this);
	}
};

AggregateClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAggregateClause(this);
	}
};

AggregateClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAggregateClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AggregateClauseContext = AggregateClauseContext;

VtlParser.prototype.aggregateClause = function () {
	var localctx = new AggregateClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 78, VtlParser.RULE_aggregateClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1193;
		this.aggrFunctionClause();
		this.state = 1198;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1194;
			this.match(VtlParser.COMMA);
			this.state = 1195;
			this.aggrFunctionClause();
			this.state = 1200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AggrFunctionClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_aggrFunctionClause;
	return this;
}

AggrFunctionClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
AggrFunctionClauseContext.prototype.constructor = AggrFunctionClauseContext;

AggrFunctionClauseContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

AggrFunctionClauseContext.prototype.ASSIGN = function () {
	return this.getToken(VtlParser.ASSIGN, 0);
};

AggrFunctionClauseContext.prototype.aggrOperators = function () {
	return this.getTypedRuleContext(AggrOperatorsContext, 0);
};

AggrFunctionClauseContext.prototype.componentRole = function () {
	return this.getTypedRuleContext(ComponentRoleContext, 0);
};

AggrFunctionClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAggrFunctionClause(this);
	}
};

AggrFunctionClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAggrFunctionClause(this);
	}
};

AggrFunctionClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAggrFunctionClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AggrFunctionClauseContext = AggrFunctionClauseContext;

VtlParser.prototype.aggrFunctionClause = function () {
	var localctx = new AggrFunctionClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 80, VtlParser.RULE_aggrFunctionClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1202;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			(((_la - 91) & ~0x1f) == 0 &&
				((1 << (_la - 91)) &
					((1 << (VtlParser.DIMENSION - 91)) |
						(1 << (VtlParser.MEASURE - 91)) |
						(1 << (VtlParser.ATTRIBUTE - 91)) |
						(1 << (VtlParser.VIRAL - 91)))) !==
					0) ||
			_la === VtlParser.COMPONENT
		) {
			this.state = 1201;
			this.componentRole();
		}

		this.state = 1204;
		this.componentID();
		this.state = 1205;
		this.match(VtlParser.ASSIGN);
		this.state = 1206;
		this.aggrOperators();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CalcClauseItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_calcClauseItem;
	return this;
}

CalcClauseItemContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
CalcClauseItemContext.prototype.constructor = CalcClauseItemContext;

CalcClauseItemContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

CalcClauseItemContext.prototype.ASSIGN = function () {
	return this.getToken(VtlParser.ASSIGN, 0);
};

CalcClauseItemContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

CalcClauseItemContext.prototype.componentRole = function () {
	return this.getTypedRuleContext(ComponentRoleContext, 0);
};

CalcClauseItemContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCalcClauseItem(this);
	}
};

CalcClauseItemContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCalcClauseItem(this);
	}
};

CalcClauseItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCalcClauseItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.CalcClauseItemContext = CalcClauseItemContext;

VtlParser.prototype.calcClauseItem = function () {
	var localctx = new CalcClauseItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 82, VtlParser.RULE_calcClauseItem);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1209;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			(((_la - 91) & ~0x1f) == 0 &&
				((1 << (_la - 91)) &
					((1 << (VtlParser.DIMENSION - 91)) |
						(1 << (VtlParser.MEASURE - 91)) |
						(1 << (VtlParser.ATTRIBUTE - 91)) |
						(1 << (VtlParser.VIRAL - 91)))) !==
					0) ||
			_la === VtlParser.COMPONENT
		) {
			this.state = 1208;
			this.componentRole();
		}

		this.state = 1211;
		this.componentID();
		this.state = 1212;
		this.match(VtlParser.ASSIGN);
		this.state = 1213;
		this.exprComponent(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SubspaceClauseItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_subspaceClauseItem;
	return this;
}

SubspaceClauseItemContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
SubspaceClauseItemContext.prototype.constructor = SubspaceClauseItemContext;

SubspaceClauseItemContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

SubspaceClauseItemContext.prototype.EQ = function () {
	return this.getToken(VtlParser.EQ, 0);
};

SubspaceClauseItemContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

SubspaceClauseItemContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSubspaceClauseItem(this);
	}
};

SubspaceClauseItemContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSubspaceClauseItem(this);
	}
};

SubspaceClauseItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSubspaceClauseItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.SubspaceClauseItemContext = SubspaceClauseItemContext;

VtlParser.prototype.subspaceClauseItem = function () {
	var localctx = new SubspaceClauseItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 84, VtlParser.RULE_subspaceClauseItem);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1215;
		this.componentID();
		this.state = 1216;
		this.match(VtlParser.EQ);
		this.state = 1217;
		this.constant();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinClauseWithoutUsingContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_joinClauseWithoutUsing;
	return this;
}

JoinClauseWithoutUsingContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
JoinClauseWithoutUsingContext.prototype.constructor = JoinClauseWithoutUsingContext;

JoinClauseWithoutUsingContext.prototype.joinClauseItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(JoinClauseItemContext);
	} else {
		return this.getTypedRuleContext(JoinClauseItemContext, i);
	}
};

JoinClauseWithoutUsingContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

JoinClauseWithoutUsingContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterJoinClauseWithoutUsing(this);
	}
};

JoinClauseWithoutUsingContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitJoinClauseWithoutUsing(this);
	}
};

JoinClauseWithoutUsingContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitJoinClauseWithoutUsing(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.JoinClauseWithoutUsingContext = JoinClauseWithoutUsingContext;

VtlParser.prototype.joinClauseWithoutUsing = function () {
	var localctx = new JoinClauseWithoutUsingContext(this, this._ctx, this.state);
	this.enterRule(localctx, 86, VtlParser.RULE_joinClauseWithoutUsing);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1219;
		this.joinClauseItem();
		this.state = 1224;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1220;
			this.match(VtlParser.COMMA);
			this.state = 1221;
			this.joinClauseItem();
			this.state = 1226;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_joinClause;
	return this;
}

JoinClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinClauseContext.prototype.constructor = JoinClauseContext;

JoinClauseContext.prototype.joinClauseItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(JoinClauseItemContext);
	} else {
		return this.getTypedRuleContext(JoinClauseItemContext, i);
	}
};

JoinClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

JoinClauseContext.prototype.USING = function () {
	return this.getToken(VtlParser.USING, 0);
};

JoinClauseContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

JoinClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterJoinClause(this);
	}
};

JoinClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitJoinClause(this);
	}
};

JoinClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitJoinClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.JoinClauseContext = JoinClauseContext;

VtlParser.prototype.joinClause = function () {
	var localctx = new JoinClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 88, VtlParser.RULE_joinClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1227;
		this.joinClauseItem();
		this.state = 1232;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1228;
			this.match(VtlParser.COMMA);
			this.state = 1229;
			this.joinClauseItem();
			this.state = 1234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 1244;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.USING) {
			this.state = 1235;
			this.match(VtlParser.USING);
			this.state = 1236;
			this.componentID();
			this.state = 1241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === VtlParser.COMMA) {
				this.state = 1237;
				this.match(VtlParser.COMMA);
				this.state = 1238;
				this.componentID();
				this.state = 1243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinClauseItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_joinClauseItem;
	return this;
}

JoinClauseItemContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
JoinClauseItemContext.prototype.constructor = JoinClauseItemContext;

JoinClauseItemContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

JoinClauseItemContext.prototype.AS = function () {
	return this.getToken(VtlParser.AS, 0);
};

JoinClauseItemContext.prototype.alias = function () {
	return this.getTypedRuleContext(AliasContext, 0);
};

JoinClauseItemContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterJoinClauseItem(this);
	}
};

JoinClauseItemContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitJoinClauseItem(this);
	}
};

JoinClauseItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitJoinClauseItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.JoinClauseItemContext = JoinClauseItemContext;

VtlParser.prototype.joinClauseItem = function () {
	var localctx = new JoinClauseItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 90, VtlParser.RULE_joinClauseItem);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1246;
		this.expr(0);
		this.state = 1249;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.AS) {
			this.state = 1247;
			this.match(VtlParser.AS);
			this.state = 1248;
			this.alias();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinBodyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_joinBody;
	return this;
}

JoinBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinBodyContext.prototype.constructor = JoinBodyContext;

JoinBodyContext.prototype.filterClause = function () {
	return this.getTypedRuleContext(FilterClauseContext, 0);
};

JoinBodyContext.prototype.calcClause = function () {
	return this.getTypedRuleContext(CalcClauseContext, 0);
};

JoinBodyContext.prototype.joinApplyClause = function () {
	return this.getTypedRuleContext(JoinApplyClauseContext, 0);
};

JoinBodyContext.prototype.aggrClause = function () {
	return this.getTypedRuleContext(AggrClauseContext, 0);
};

JoinBodyContext.prototype.keepOrDropClause = function () {
	return this.getTypedRuleContext(KeepOrDropClauseContext, 0);
};

JoinBodyContext.prototype.renameClause = function () {
	return this.getTypedRuleContext(RenameClauseContext, 0);
};

JoinBodyContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterJoinBody(this);
	}
};

JoinBodyContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitJoinBody(this);
	}
};

JoinBodyContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitJoinBody(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.JoinBodyContext = JoinBodyContext;

VtlParser.prototype.joinBody = function () {
	var localctx = new JoinBodyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 92, VtlParser.RULE_joinBody);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1252;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.FILTER) {
			this.state = 1251;
			this.filterClause();
		}

		this.state = 1257;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.CALC:
				this.state = 1254;
				this.calcClause();
				break;
			case VtlParser.APPLY:
				this.state = 1255;
				this.joinApplyClause();
				break;
			case VtlParser.AGGREGATE:
				this.state = 1256;
				this.aggrClause();
				break;
			case VtlParser.RPAREN:
			case VtlParser.DROP:
			case VtlParser.KEEP:
			case VtlParser.RENAME:
				break;
			default:
				break;
		}
		this.state = 1260;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.DROP || _la === VtlParser.KEEP) {
			this.state = 1259;
			this.keepOrDropClause();
		}

		this.state = 1263;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.RENAME) {
			this.state = 1262;
			this.renameClause();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function JoinApplyClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_joinApplyClause;
	return this;
}

JoinApplyClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
JoinApplyClauseContext.prototype.constructor = JoinApplyClauseContext;

JoinApplyClauseContext.prototype.APPLY = function () {
	return this.getToken(VtlParser.APPLY, 0);
};

JoinApplyClauseContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

JoinApplyClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterJoinApplyClause(this);
	}
};

JoinApplyClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitJoinApplyClause(this);
	}
};

JoinApplyClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitJoinApplyClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.JoinApplyClauseContext = JoinApplyClauseContext;

VtlParser.prototype.joinApplyClause = function () {
	var localctx = new JoinApplyClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 94, VtlParser.RULE_joinApplyClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1265;
		this.match(VtlParser.APPLY);
		this.state = 1266;
		this.expr(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function PartitionByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_partitionByClause;
	return this;
}

PartitionByClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
PartitionByClauseContext.prototype.constructor = PartitionByClauseContext;

PartitionByClauseContext.prototype.PARTITION = function () {
	return this.getToken(VtlParser.PARTITION, 0);
};

PartitionByClauseContext.prototype.BY = function () {
	return this.getToken(VtlParser.BY, 0);
};

PartitionByClauseContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

PartitionByClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

PartitionByClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterPartitionByClause(this);
	}
};

PartitionByClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitPartitionByClause(this);
	}
};

PartitionByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitPartitionByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.PartitionByClauseContext = PartitionByClauseContext;

VtlParser.prototype.partitionByClause = function () {
	var localctx = new PartitionByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 96, VtlParser.RULE_partitionByClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1268;
		this.match(VtlParser.PARTITION);
		this.state = 1269;
		this.match(VtlParser.BY);
		this.state = 1270;
		this.componentID();
		this.state = 1275;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1271;
			this.match(VtlParser.COMMA);
			this.state = 1272;
			this.componentID();
			this.state = 1277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OrderByClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_orderByClause;
	return this;
}

OrderByClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.ORDER = function () {
	return this.getToken(VtlParser.ORDER, 0);
};

OrderByClauseContext.prototype.BY = function () {
	return this.getToken(VtlParser.BY, 0);
};

OrderByClauseContext.prototype.orderByItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(OrderByItemContext);
	} else {
		return this.getTypedRuleContext(OrderByItemContext, i);
	}
};

OrderByClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

OrderByClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOrderByClause(this);
	}
};

OrderByClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOrderByClause(this);
	}
};

OrderByClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOrderByClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OrderByClauseContext = OrderByClauseContext;

VtlParser.prototype.orderByClause = function () {
	var localctx = new OrderByClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 98, VtlParser.RULE_orderByClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1278;
		this.match(VtlParser.ORDER);
		this.state = 1279;
		this.match(VtlParser.BY);
		this.state = 1280;
		this.orderByItem();
		this.state = 1285;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1281;
			this.match(VtlParser.COMMA);
			this.state = 1282;
			this.orderByItem();
			this.state = 1287;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OrderByItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_orderByItem;
	return this;
}

OrderByItemContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
OrderByItemContext.prototype.constructor = OrderByItemContext;

OrderByItemContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

OrderByItemContext.prototype.ASC = function () {
	return this.getToken(VtlParser.ASC, 0);
};

OrderByItemContext.prototype.DESC = function () {
	return this.getToken(VtlParser.DESC, 0);
};

OrderByItemContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOrderByItem(this);
	}
};

OrderByItemContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOrderByItem(this);
	}
};

OrderByItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOrderByItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OrderByItemContext = OrderByItemContext;

VtlParser.prototype.orderByItem = function () {
	var localctx = new OrderByItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 100, VtlParser.RULE_orderByItem);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1288;
		this.componentID();
		this.state = 1290;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.ASC || _la === VtlParser.DESC) {
			this.state = 1289;
			_la = this._input.LA(1);
			if (!(_la === VtlParser.ASC || _la === VtlParser.DESC)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function WindowingClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_windowingClause;
	this.from_ = null; // LimitClauseItemContext
	this.to_ = null; // LimitClauseItemContext
	return this;
}

WindowingClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
WindowingClauseContext.prototype.constructor = WindowingClauseContext;

WindowingClauseContext.prototype.BETWEEN = function () {
	return this.getToken(VtlParser.BETWEEN, 0);
};

WindowingClauseContext.prototype.AND = function () {
	return this.getToken(VtlParser.AND, 0);
};

WindowingClauseContext.prototype.limitClauseItem = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(LimitClauseItemContext);
	} else {
		return this.getTypedRuleContext(LimitClauseItemContext, i);
	}
};

WindowingClauseContext.prototype.RANGE = function () {
	return this.getToken(VtlParser.RANGE, 0);
};

WindowingClauseContext.prototype.DATA = function () {
	return this.getToken(VtlParser.DATA, 0);
};

WindowingClauseContext.prototype.POINTS = function () {
	return this.getToken(VtlParser.POINTS, 0);
};

WindowingClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterWindowingClause(this);
	}
};

WindowingClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitWindowingClause(this);
	}
};

WindowingClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitWindowingClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.WindowingClauseContext = WindowingClauseContext;

VtlParser.prototype.windowingClause = function () {
	var localctx = new WindowingClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 102, VtlParser.RULE_windowingClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1295;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.DATA:
				this.state = 1292;
				this.match(VtlParser.DATA);
				this.state = 1293;
				this.match(VtlParser.POINTS);
				break;
			case VtlParser.RANGE:
				this.state = 1294;
				this.match(VtlParser.RANGE);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
		this.state = 1297;
		this.match(VtlParser.BETWEEN);
		this.state = 1298;
		localctx.from_ = this.limitClauseItem();
		this.state = 1299;
		this.match(VtlParser.AND);
		this.state = 1300;
		localctx.to_ = this.limitClauseItem();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SignedIntegerContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_signedInteger;
	return this;
}

SignedIntegerContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
SignedIntegerContext.prototype.constructor = SignedIntegerContext;

SignedIntegerContext.prototype.INTEGER_CONSTANT = function () {
	return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

SignedIntegerContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSignedInteger(this);
	}
};

SignedIntegerContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSignedInteger(this);
	}
};

SignedIntegerContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSignedInteger(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.SignedIntegerContext = SignedIntegerContext;

VtlParser.prototype.signedInteger = function () {
	var localctx = new SignedIntegerContext(this, this._ctx, this.state);
	this.enterRule(localctx, 104, VtlParser.RULE_signedInteger);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1302;
		this.match(VtlParser.INTEGER_CONSTANT);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function LimitClauseItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_limitClauseItem;
	return this;
}

LimitClauseItemContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
LimitClauseItemContext.prototype.constructor = LimitClauseItemContext;

LimitClauseItemContext.prototype.INTEGER_CONSTANT = function () {
	return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

LimitClauseItemContext.prototype.PRECEDING = function () {
	return this.getToken(VtlParser.PRECEDING, 0);
};

LimitClauseItemContext.prototype.FOLLOWING = function () {
	return this.getToken(VtlParser.FOLLOWING, 0);
};

LimitClauseItemContext.prototype.CURRENT = function () {
	return this.getToken(VtlParser.CURRENT, 0);
};

LimitClauseItemContext.prototype.DATA = function () {
	return this.getToken(VtlParser.DATA, 0);
};

LimitClauseItemContext.prototype.POINT = function () {
	return this.getToken(VtlParser.POINT, 0);
};

LimitClauseItemContext.prototype.UNBOUNDED = function () {
	return this.getToken(VtlParser.UNBOUNDED, 0);
};

LimitClauseItemContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterLimitClauseItem(this);
	}
};

LimitClauseItemContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitLimitClauseItem(this);
	}
};

LimitClauseItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitLimitClauseItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.LimitClauseItemContext = LimitClauseItemContext;

VtlParser.prototype.limitClauseItem = function () {
	var localctx = new LimitClauseItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 106, VtlParser.RULE_limitClauseItem);
	try {
		this.state = 1315;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 133, this._ctx);
		switch (la_) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				this.state = 1304;
				this.match(VtlParser.INTEGER_CONSTANT);
				this.state = 1305;
				this.match(VtlParser.PRECEDING);
				break;

			case 2:
				this.enterOuterAlt(localctx, 2);
				this.state = 1306;
				this.match(VtlParser.INTEGER_CONSTANT);
				this.state = 1307;
				this.match(VtlParser.FOLLOWING);
				break;

			case 3:
				this.enterOuterAlt(localctx, 3);
				this.state = 1308;
				this.match(VtlParser.CURRENT);
				this.state = 1309;
				this.match(VtlParser.DATA);
				this.state = 1310;
				this.match(VtlParser.POINT);
				break;

			case 4:
				this.enterOuterAlt(localctx, 4);
				this.state = 1311;
				this.match(VtlParser.UNBOUNDED);
				this.state = 1312;
				this.match(VtlParser.PRECEDING);
				break;

			case 5:
				this.enterOuterAlt(localctx, 5);
				this.state = 1313;
				this.match(VtlParser.UNBOUNDED);
				this.state = 1314;
				this.match(VtlParser.FOLLOWING);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function GroupingClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_groupingClause;
	return this;
}

GroupingClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
GroupingClauseContext.prototype.constructor = GroupingClauseContext;

GroupingClauseContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function GroupAllContext(parser, ctx) {
	GroupingClauseContext.call(this, parser);
	GroupingClauseContext.prototype.copyFrom.call(this, ctx);
	return this;
}

GroupAllContext.prototype = Object.create(GroupingClauseContext.prototype);
GroupAllContext.prototype.constructor = GroupAllContext;

VtlParser.GroupAllContext = GroupAllContext;

GroupAllContext.prototype.GROUP = function () {
	return this.getToken(VtlParser.GROUP, 0);
};

GroupAllContext.prototype.ALL = function () {
	return this.getToken(VtlParser.ALL, 0);
};

GroupAllContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};
GroupAllContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterGroupAll(this);
	}
};

GroupAllContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitGroupAll(this);
	}
};

GroupAllContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitGroupAll(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function GroupByOrExceptContext(parser, ctx) {
	GroupingClauseContext.call(this, parser);
	this.op = null; // Token;
	GroupingClauseContext.prototype.copyFrom.call(this, ctx);
	return this;
}

GroupByOrExceptContext.prototype = Object.create(
	GroupingClauseContext.prototype
);
GroupByOrExceptContext.prototype.constructor = GroupByOrExceptContext;

VtlParser.GroupByOrExceptContext = GroupByOrExceptContext;

GroupByOrExceptContext.prototype.GROUP = function () {
	return this.getToken(VtlParser.GROUP, 0);
};

GroupByOrExceptContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

GroupByOrExceptContext.prototype.BY = function () {
	return this.getToken(VtlParser.BY, 0);
};

GroupByOrExceptContext.prototype.EXCEPT = function () {
	return this.getToken(VtlParser.EXCEPT, 0);
};

GroupByOrExceptContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

GroupByOrExceptContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterGroupByOrExcept(this);
	}
};

GroupByOrExceptContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitGroupByOrExcept(this);
	}
};

GroupByOrExceptContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitGroupByOrExcept(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.GroupingClauseContext = GroupingClauseContext;

VtlParser.prototype.groupingClause = function () {
	var localctx = new GroupingClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 108, VtlParser.RULE_groupingClause);
	var _la = 0; // Token type
	try {
		this.state = 1330;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);
		switch (la_) {
			case 1:
				localctx = new GroupByOrExceptContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 1317;
				this.match(VtlParser.GROUP);
				this.state = 1318;
				localctx.op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === VtlParser.BY || _la === VtlParser.EXCEPT)) {
					localctx.op = this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1319;
				this.componentID();
				this.state = 1324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === VtlParser.COMMA) {
					this.state = 1320;
					this.match(VtlParser.COMMA);
					this.state = 1321;
					this.componentID();
					this.state = 1326;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				break;

			case 2:
				localctx = new GroupAllContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1327;
				this.match(VtlParser.GROUP);
				this.state = 1328;
				this.match(VtlParser.ALL);
				this.state = 1329;
				this.exprComponent(0);
				break;
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function HavingClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_havingClause;
	return this;
}

HavingClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING = function () {
	return this.getToken(VtlParser.HAVING, 0);
};

HavingClauseContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

HavingClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitHavingClause(this);
	}
};

HavingClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitHavingClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.HavingClauseContext = HavingClauseContext;

VtlParser.prototype.havingClause = function () {
	var localctx = new HavingClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 110, VtlParser.RULE_havingClause);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1332;
		this.match(VtlParser.HAVING);
		this.state = 1333;
		this.exprComponent(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ParameterItemContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_parameterItem;
	return this;
}

ParameterItemContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ParameterItemContext.prototype.constructor = ParameterItemContext;

ParameterItemContext.prototype.varID = function () {
	return this.getTypedRuleContext(VarIDContext, 0);
};

ParameterItemContext.prototype.inputParameterType = function () {
	return this.getTypedRuleContext(InputParameterTypeContext, 0);
};

ParameterItemContext.prototype.DEFAULT = function () {
	return this.getToken(VtlParser.DEFAULT, 0);
};

ParameterItemContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

ParameterItemContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterParameterItem(this);
	}
};

ParameterItemContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitParameterItem(this);
	}
};

ParameterItemContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitParameterItem(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ParameterItemContext = ParameterItemContext;

VtlParser.prototype.parameterItem = function () {
	var localctx = new ParameterItemContext(this, this._ctx, this.state);
	this.enterRule(localctx, 112, VtlParser.RULE_parameterItem);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1335;
		this.varID();
		this.state = 1336;
		this.inputParameterType();
		this.state = 1339;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.DEFAULT) {
			this.state = 1337;
			this.match(VtlParser.DEFAULT);
			this.state = 1338;
			this.constant();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OutputParameterTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_outputParameterType;
	return this;
}

OutputParameterTypeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
OutputParameterTypeContext.prototype.constructor = OutputParameterTypeContext;

OutputParameterTypeContext.prototype.scalarType = function () {
	return this.getTypedRuleContext(ScalarTypeContext, 0);
};

OutputParameterTypeContext.prototype.datasetType = function () {
	return this.getTypedRuleContext(DatasetTypeContext, 0);
};

OutputParameterTypeContext.prototype.componentType = function () {
	return this.getTypedRuleContext(ComponentTypeContext, 0);
};

OutputParameterTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOutputParameterType(this);
	}
};

OutputParameterTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOutputParameterType(this);
	}
};

OutputParameterTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOutputParameterType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OutputParameterTypeContext = OutputParameterTypeContext;

VtlParser.prototype.outputParameterType = function () {
	var localctx = new OutputParameterTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 114, VtlParser.RULE_outputParameterType);
	try {
		this.state = 1344;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.BOOLEAN:
			case VtlParser.DATE:
			case VtlParser.TIME_PERIOD:
			case VtlParser.NUMBER:
			case VtlParser.STRING:
			case VtlParser.TIME:
			case VtlParser.INTEGER:
			case VtlParser.DURATION:
			case VtlParser.SCALAR:
			case VtlParser.IDENTIFIER:
				this.enterOuterAlt(localctx, 1);
				this.state = 1341;
				this.scalarType();
				break;
			case VtlParser.DATASET:
				this.enterOuterAlt(localctx, 2);
				this.state = 1342;
				this.datasetType();
				break;
			case VtlParser.DIMENSION:
			case VtlParser.MEASURE:
			case VtlParser.ATTRIBUTE:
			case VtlParser.VIRAL:
			case VtlParser.COMPONENT:
				this.enterOuterAlt(localctx, 3);
				this.state = 1343;
				this.componentType();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OutputParameterTypeComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_outputParameterTypeComponent;
	return this;
}

OutputParameterTypeComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
OutputParameterTypeComponentContext.prototype.constructor = OutputParameterTypeComponentContext;

OutputParameterTypeComponentContext.prototype.componentType = function () {
	return this.getTypedRuleContext(ComponentTypeContext, 0);
};

OutputParameterTypeComponentContext.prototype.scalarType = function () {
	return this.getTypedRuleContext(ScalarTypeContext, 0);
};

OutputParameterTypeComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOutputParameterTypeComponent(this);
	}
};

OutputParameterTypeComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOutputParameterTypeComponent(this);
	}
};

OutputParameterTypeComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOutputParameterTypeComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OutputParameterTypeComponentContext = OutputParameterTypeComponentContext;

VtlParser.prototype.outputParameterTypeComponent = function () {
	var localctx = new OutputParameterTypeComponentContext(
		this,
		this._ctx,
		this.state
	);
	this.enterRule(localctx, 116, VtlParser.RULE_outputParameterTypeComponent);
	try {
		this.state = 1348;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.DIMENSION:
			case VtlParser.MEASURE:
			case VtlParser.ATTRIBUTE:
			case VtlParser.VIRAL:
			case VtlParser.COMPONENT:
				this.enterOuterAlt(localctx, 1);
				this.state = 1346;
				this.componentType();
				break;
			case VtlParser.BOOLEAN:
			case VtlParser.DATE:
			case VtlParser.TIME_PERIOD:
			case VtlParser.NUMBER:
			case VtlParser.STRING:
			case VtlParser.TIME:
			case VtlParser.INTEGER:
			case VtlParser.DURATION:
			case VtlParser.SCALAR:
			case VtlParser.IDENTIFIER:
				this.enterOuterAlt(localctx, 2);
				this.state = 1347;
				this.scalarType();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function InputParameterTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_inputParameterType;
	return this;
}

InputParameterTypeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
InputParameterTypeContext.prototype.constructor = InputParameterTypeContext;

InputParameterTypeContext.prototype.scalarType = function () {
	return this.getTypedRuleContext(ScalarTypeContext, 0);
};

InputParameterTypeContext.prototype.datasetType = function () {
	return this.getTypedRuleContext(DatasetTypeContext, 0);
};

InputParameterTypeContext.prototype.scalarSetType = function () {
	return this.getTypedRuleContext(ScalarSetTypeContext, 0);
};

InputParameterTypeContext.prototype.rulesetType = function () {
	return this.getTypedRuleContext(RulesetTypeContext, 0);
};

InputParameterTypeContext.prototype.componentType = function () {
	return this.getTypedRuleContext(ComponentTypeContext, 0);
};

InputParameterTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterInputParameterType(this);
	}
};

InputParameterTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitInputParameterType(this);
	}
};

InputParameterTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitInputParameterType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.InputParameterTypeContext = InputParameterTypeContext;

VtlParser.prototype.inputParameterType = function () {
	var localctx = new InputParameterTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 118, VtlParser.RULE_inputParameterType);
	try {
		this.state = 1355;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.BOOLEAN:
			case VtlParser.DATE:
			case VtlParser.TIME_PERIOD:
			case VtlParser.NUMBER:
			case VtlParser.STRING:
			case VtlParser.TIME:
			case VtlParser.INTEGER:
			case VtlParser.DURATION:
			case VtlParser.SCALAR:
			case VtlParser.IDENTIFIER:
				this.enterOuterAlt(localctx, 1);
				this.state = 1350;
				this.scalarType();
				break;
			case VtlParser.DATASET:
				this.enterOuterAlt(localctx, 2);
				this.state = 1351;
				this.datasetType();
				break;
			case VtlParser.SET:
				this.enterOuterAlt(localctx, 3);
				this.state = 1352;
				this.scalarSetType();
				break;
			case VtlParser.DATAPOINT:
			case VtlParser.HIERARCHICAL:
			case VtlParser.RULESET:
			case VtlParser.DATAPOINT_ON_VD:
			case VtlParser.DATAPOINT_ON_VAR:
			case VtlParser.HIERARCHICAL_ON_VD:
			case VtlParser.HIERARCHICAL_ON_VAR:
				this.enterOuterAlt(localctx, 4);
				this.state = 1353;
				this.rulesetType();
				break;
			case VtlParser.DIMENSION:
			case VtlParser.MEASURE:
			case VtlParser.ATTRIBUTE:
			case VtlParser.VIRAL:
			case VtlParser.COMPONENT:
				this.enterOuterAlt(localctx, 5);
				this.state = 1354;
				this.componentType();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RulesetTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_rulesetType;
	return this;
}

RulesetTypeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RulesetTypeContext.prototype.constructor = RulesetTypeContext;

RulesetTypeContext.prototype.RULESET = function () {
	return this.getToken(VtlParser.RULESET, 0);
};

RulesetTypeContext.prototype.dpRuleset = function () {
	return this.getTypedRuleContext(DpRulesetContext, 0);
};

RulesetTypeContext.prototype.hrRuleset = function () {
	return this.getTypedRuleContext(HrRulesetContext, 0);
};

RulesetTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRulesetType(this);
	}
};

RulesetTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRulesetType(this);
	}
};

RulesetTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRulesetType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RulesetTypeContext = RulesetTypeContext;

VtlParser.prototype.rulesetType = function () {
	var localctx = new RulesetTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 120, VtlParser.RULE_rulesetType);
	try {
		this.state = 1360;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.RULESET:
				this.enterOuterAlt(localctx, 1);
				this.state = 1357;
				this.match(VtlParser.RULESET);
				break;
			case VtlParser.DATAPOINT:
			case VtlParser.DATAPOINT_ON_VD:
			case VtlParser.DATAPOINT_ON_VAR:
				this.enterOuterAlt(localctx, 2);
				this.state = 1358;
				this.dpRuleset();
				break;
			case VtlParser.HIERARCHICAL:
			case VtlParser.HIERARCHICAL_ON_VD:
			case VtlParser.HIERARCHICAL_ON_VAR:
				this.enterOuterAlt(localctx, 3);
				this.state = 1359;
				this.hrRuleset();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ScalarTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_scalarType;
	return this;
}

ScalarTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarTypeContext.prototype.constructor = ScalarTypeContext;

ScalarTypeContext.prototype.basicScalarType = function () {
	return this.getTypedRuleContext(BasicScalarTypeContext, 0);
};

ScalarTypeContext.prototype.valueDomainName = function () {
	return this.getTypedRuleContext(ValueDomainNameContext, 0);
};

ScalarTypeContext.prototype.scalarTypeConstraint = function () {
	return this.getTypedRuleContext(ScalarTypeConstraintContext, 0);
};

ScalarTypeContext.prototype.NULL_CONSTANT = function () {
	return this.getToken(VtlParser.NULL_CONSTANT, 0);
};

ScalarTypeContext.prototype.NOT = function () {
	return this.getToken(VtlParser.NOT, 0);
};

ScalarTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterScalarType(this);
	}
};

ScalarTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitScalarType(this);
	}
};

ScalarTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitScalarType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ScalarTypeContext = ScalarTypeContext;

VtlParser.prototype.scalarType = function () {
	var localctx = new ScalarTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 122, VtlParser.RULE_scalarType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1364;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.BOOLEAN:
			case VtlParser.DATE:
			case VtlParser.TIME_PERIOD:
			case VtlParser.NUMBER:
			case VtlParser.STRING:
			case VtlParser.TIME:
			case VtlParser.INTEGER:
			case VtlParser.DURATION:
			case VtlParser.SCALAR:
				this.state = 1362;
				this.basicScalarType();
				break;
			case VtlParser.IDENTIFIER:
				this.state = 1363;
				this.valueDomainName();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
		this.state = 1367;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.QLPAREN || _la === VtlParser.GLPAREN) {
			this.state = 1366;
			this.scalarTypeConstraint();
		}

		this.state = 1373;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.NOT || _la === VtlParser.NULL_CONSTANT) {
			this.state = 1370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === VtlParser.NOT) {
				this.state = 1369;
				this.match(VtlParser.NOT);
			}

			this.state = 1372;
			this.match(VtlParser.NULL_CONSTANT);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ComponentTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_componentType;
	return this;
}

ComponentTypeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ComponentTypeContext.prototype.constructor = ComponentTypeContext;

ComponentTypeContext.prototype.componentRole = function () {
	return this.getTypedRuleContext(ComponentRoleContext, 0);
};

ComponentTypeContext.prototype.LT = function () {
	return this.getToken(VtlParser.LT, 0);
};

ComponentTypeContext.prototype.scalarType = function () {
	return this.getTypedRuleContext(ScalarTypeContext, 0);
};

ComponentTypeContext.prototype.MT = function () {
	return this.getToken(VtlParser.MT, 0);
};

ComponentTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComponentType(this);
	}
};

ComponentTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComponentType(this);
	}
};

ComponentTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComponentType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ComponentTypeContext = ComponentTypeContext;

VtlParser.prototype.componentType = function () {
	var localctx = new ComponentTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 124, VtlParser.RULE_componentType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1375;
		this.componentRole();
		this.state = 1380;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.LT) {
			this.state = 1376;
			this.match(VtlParser.LT);
			this.state = 1377;
			this.scalarType();
			this.state = 1378;
			this.match(VtlParser.MT);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DatasetTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_datasetType;
	return this;
}

DatasetTypeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
DatasetTypeContext.prototype.constructor = DatasetTypeContext;

DatasetTypeContext.prototype.DATASET = function () {
	return this.getToken(VtlParser.DATASET, 0);
};

DatasetTypeContext.prototype.GLPAREN = function () {
	return this.getToken(VtlParser.GLPAREN, 0);
};

DatasetTypeContext.prototype.compConstraint = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(CompConstraintContext);
	} else {
		return this.getTypedRuleContext(CompConstraintContext, i);
	}
};

DatasetTypeContext.prototype.GRPAREN = function () {
	return this.getToken(VtlParser.GRPAREN, 0);
};

DatasetTypeContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

DatasetTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDatasetType(this);
	}
};

DatasetTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDatasetType(this);
	}
};

DatasetTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDatasetType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.DatasetTypeContext = DatasetTypeContext;

VtlParser.prototype.datasetType = function () {
	var localctx = new DatasetTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 126, VtlParser.RULE_datasetType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1382;
		this.match(VtlParser.DATASET);
		this.state = 1394;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.GLPAREN) {
			this.state = 1383;
			this.match(VtlParser.GLPAREN);
			this.state = 1384;
			this.compConstraint();
			this.state = 1389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === VtlParser.COMMA) {
				this.state = 1385;
				this.match(VtlParser.COMMA);
				this.state = 1386;
				this.compConstraint();
				this.state = 1391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1392;
			this.match(VtlParser.GRPAREN);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ScalarSetTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_scalarSetType;
	return this;
}

ScalarSetTypeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ScalarSetTypeContext.prototype.constructor = ScalarSetTypeContext;

ScalarSetTypeContext.prototype.SET = function () {
	return this.getToken(VtlParser.SET, 0);
};

ScalarSetTypeContext.prototype.LT = function () {
	return this.getToken(VtlParser.LT, 0);
};

ScalarSetTypeContext.prototype.scalarType = function () {
	return this.getTypedRuleContext(ScalarTypeContext, 0);
};

ScalarSetTypeContext.prototype.MT = function () {
	return this.getToken(VtlParser.MT, 0);
};

ScalarSetTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterScalarSetType(this);
	}
};

ScalarSetTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitScalarSetType(this);
	}
};

ScalarSetTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitScalarSetType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ScalarSetTypeContext = ScalarSetTypeContext;

VtlParser.prototype.scalarSetType = function () {
	var localctx = new ScalarSetTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 128, VtlParser.RULE_scalarSetType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1396;
		this.match(VtlParser.SET);
		this.state = 1401;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.LT) {
			this.state = 1397;
			this.match(VtlParser.LT);
			this.state = 1398;
			this.scalarType();
			this.state = 1399;
			this.match(VtlParser.MT);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function DpRulesetContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_dpRuleset;
	return this;
}

DpRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DpRulesetContext.prototype.constructor = DpRulesetContext;

DpRulesetContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DataPointVdContext(parser, ctx) {
	DpRulesetContext.call(this, parser);
	DpRulesetContext.prototype.copyFrom.call(this, ctx);
	return this;
}

DataPointVdContext.prototype = Object.create(DpRulesetContext.prototype);
DataPointVdContext.prototype.constructor = DataPointVdContext;

VtlParser.DataPointVdContext = DataPointVdContext;

DataPointVdContext.prototype.DATAPOINT_ON_VD = function () {
	return this.getToken(VtlParser.DATAPOINT_ON_VD, 0);
};

DataPointVdContext.prototype.GLPAREN = function () {
	return this.getToken(VtlParser.GLPAREN, 0);
};

DataPointVdContext.prototype.valueDomainName = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ValueDomainNameContext);
	} else {
		return this.getTypedRuleContext(ValueDomainNameContext, i);
	}
};

DataPointVdContext.prototype.GRPAREN = function () {
	return this.getToken(VtlParser.GRPAREN, 0);
};

DataPointVdContext.prototype.MUL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.MUL);
	} else {
		return this.getToken(VtlParser.MUL, i);
	}
};

DataPointVdContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDataPointVd(this);
	}
};

DataPointVdContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDataPointVd(this);
	}
};

DataPointVdContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDataPointVd(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function DataPointVarContext(parser, ctx) {
	DpRulesetContext.call(this, parser);
	DpRulesetContext.prototype.copyFrom.call(this, ctx);
	return this;
}

DataPointVarContext.prototype = Object.create(DpRulesetContext.prototype);
DataPointVarContext.prototype.constructor = DataPointVarContext;

VtlParser.DataPointVarContext = DataPointVarContext;

DataPointVarContext.prototype.DATAPOINT_ON_VAR = function () {
	return this.getToken(VtlParser.DATAPOINT_ON_VAR, 0);
};

DataPointVarContext.prototype.GLPAREN = function () {
	return this.getToken(VtlParser.GLPAREN, 0);
};

DataPointVarContext.prototype.varID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(VarIDContext);
	} else {
		return this.getTypedRuleContext(VarIDContext, i);
	}
};

DataPointVarContext.prototype.GRPAREN = function () {
	return this.getToken(VtlParser.GRPAREN, 0);
};

DataPointVarContext.prototype.MUL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.MUL);
	} else {
		return this.getToken(VtlParser.MUL, i);
	}
};

DataPointVarContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDataPointVar(this);
	}
};

DataPointVarContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDataPointVar(this);
	}
};

DataPointVarContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDataPointVar(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function DataPointContext(parser, ctx) {
	DpRulesetContext.call(this, parser);
	DpRulesetContext.prototype.copyFrom.call(this, ctx);
	return this;
}

DataPointContext.prototype = Object.create(DpRulesetContext.prototype);
DataPointContext.prototype.constructor = DataPointContext;

VtlParser.DataPointContext = DataPointContext;

DataPointContext.prototype.DATAPOINT = function () {
	return this.getToken(VtlParser.DATAPOINT, 0);
};
DataPointContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterDataPoint(this);
	}
};

DataPointContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitDataPoint(this);
	}
};

DataPointContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitDataPoint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.DpRulesetContext = DpRulesetContext;

VtlParser.prototype.dpRuleset = function () {
	var localctx = new DpRulesetContext(this, this._ctx, this.state);
	this.enterRule(localctx, 130, VtlParser.RULE_dpRuleset);
	var _la = 0; // Token type
	try {
		this.state = 1432;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.DATAPOINT:
				localctx = new DataPointContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 1403;
				this.match(VtlParser.DATAPOINT);
				break;
			case VtlParser.DATAPOINT_ON_VD:
				localctx = new DataPointVdContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1404;
				this.match(VtlParser.DATAPOINT_ON_VD);
				this.state = 1416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.GLPAREN) {
					this.state = 1405;
					this.match(VtlParser.GLPAREN);
					this.state = 1406;
					this.valueDomainName();
					this.state = 1411;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === VtlParser.MUL) {
						this.state = 1407;
						this.match(VtlParser.MUL);
						this.state = 1408;
						this.valueDomainName();
						this.state = 1413;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1414;
					this.match(VtlParser.GRPAREN);
				}

				break;
			case VtlParser.DATAPOINT_ON_VAR:
				localctx = new DataPointVarContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 1418;
				this.match(VtlParser.DATAPOINT_ON_VAR);
				this.state = 1430;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.GLPAREN) {
					this.state = 1419;
					this.match(VtlParser.GLPAREN);
					this.state = 1420;
					this.varID();
					this.state = 1425;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === VtlParser.MUL) {
						this.state = 1421;
						this.match(VtlParser.MUL);
						this.state = 1422;
						this.varID();
						this.state = 1427;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1428;
					this.match(VtlParser.GRPAREN);
				}

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function HrRulesetContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_hrRuleset;
	return this;
}

HrRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HrRulesetContext.prototype.constructor = HrRulesetContext;

HrRulesetContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function HrRulesetVdTypeContext(parser, ctx) {
	HrRulesetContext.call(this, parser);
	this.vdName = null; // Token;
	HrRulesetContext.prototype.copyFrom.call(this, ctx);
	return this;
}

HrRulesetVdTypeContext.prototype = Object.create(HrRulesetContext.prototype);
HrRulesetVdTypeContext.prototype.constructor = HrRulesetVdTypeContext;

VtlParser.HrRulesetVdTypeContext = HrRulesetVdTypeContext;

HrRulesetVdTypeContext.prototype.HIERARCHICAL_ON_VD = function () {
	return this.getToken(VtlParser.HIERARCHICAL_ON_VD, 0);
};

HrRulesetVdTypeContext.prototype.GLPAREN = function () {
	return this.getToken(VtlParser.GLPAREN, 0);
};

HrRulesetVdTypeContext.prototype.GRPAREN = function () {
	return this.getToken(VtlParser.GRPAREN, 0);
};

HrRulesetVdTypeContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

HrRulesetVdTypeContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

HrRulesetVdTypeContext.prototype.valueDomainName = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ValueDomainNameContext);
	} else {
		return this.getTypedRuleContext(ValueDomainNameContext, i);
	}
};

HrRulesetVdTypeContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

HrRulesetVdTypeContext.prototype.MUL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.MUL);
	} else {
		return this.getToken(VtlParser.MUL, i);
	}
};

HrRulesetVdTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterHrRulesetVdType(this);
	}
};

HrRulesetVdTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitHrRulesetVdType(this);
	}
};

HrRulesetVdTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitHrRulesetVdType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function HrRulesetVarTypeContext(parser, ctx) {
	HrRulesetContext.call(this, parser);
	this.varName = null; // VarIDContext;
	HrRulesetContext.prototype.copyFrom.call(this, ctx);
	return this;
}

HrRulesetVarTypeContext.prototype = Object.create(HrRulesetContext.prototype);
HrRulesetVarTypeContext.prototype.constructor = HrRulesetVarTypeContext;

VtlParser.HrRulesetVarTypeContext = HrRulesetVarTypeContext;

HrRulesetVarTypeContext.prototype.HIERARCHICAL_ON_VAR = function () {
	return this.getToken(VtlParser.HIERARCHICAL_ON_VAR, 0);
};

HrRulesetVarTypeContext.prototype.GLPAREN = function () {
	return this.getToken(VtlParser.GLPAREN, 0);
};

HrRulesetVarTypeContext.prototype.GRPAREN = function () {
	return this.getToken(VtlParser.GRPAREN, 0);
};

HrRulesetVarTypeContext.prototype.varID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(VarIDContext);
	} else {
		return this.getTypedRuleContext(VarIDContext, i);
	}
};

HrRulesetVarTypeContext.prototype.LPAREN = function () {
	return this.getToken(VtlParser.LPAREN, 0);
};

HrRulesetVarTypeContext.prototype.RPAREN = function () {
	return this.getToken(VtlParser.RPAREN, 0);
};

HrRulesetVarTypeContext.prototype.MUL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.MUL);
	} else {
		return this.getToken(VtlParser.MUL, i);
	}
};

HrRulesetVarTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterHrRulesetVarType(this);
	}
};

HrRulesetVarTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitHrRulesetVarType(this);
	}
};

HrRulesetVarTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitHrRulesetVarType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function HrRulesetTypeContext(parser, ctx) {
	HrRulesetContext.call(this, parser);
	HrRulesetContext.prototype.copyFrom.call(this, ctx);
	return this;
}

HrRulesetTypeContext.prototype = Object.create(HrRulesetContext.prototype);
HrRulesetTypeContext.prototype.constructor = HrRulesetTypeContext;

VtlParser.HrRulesetTypeContext = HrRulesetTypeContext;

HrRulesetTypeContext.prototype.HIERARCHICAL = function () {
	return this.getToken(VtlParser.HIERARCHICAL, 0);
};
HrRulesetTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterHrRulesetType(this);
	}
};

HrRulesetTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitHrRulesetType(this);
	}
};

HrRulesetTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitHrRulesetType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.HrRulesetContext = HrRulesetContext;

VtlParser.prototype.hrRuleset = function () {
	var localctx = new HrRulesetContext(this, this._ctx, this.state);
	this.enterRule(localctx, 132, VtlParser.RULE_hrRuleset);
	var _la = 0; // Token type
	try {
		this.state = 1474;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.HIERARCHICAL:
				localctx = new HrRulesetTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 1434;
				this.match(VtlParser.HIERARCHICAL);
				break;
			case VtlParser.HIERARCHICAL_ON_VD:
				localctx = new HrRulesetVdTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1435;
				this.match(VtlParser.HIERARCHICAL_ON_VD);
				this.state = 1452;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.GLPAREN) {
					this.state = 1436;
					this.match(VtlParser.GLPAREN);
					this.state = 1437;
					localctx.vdName = this.match(VtlParser.IDENTIFIER);
					this.state = 1449;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === VtlParser.LPAREN) {
						this.state = 1438;
						this.match(VtlParser.LPAREN);
						this.state = 1439;
						this.valueDomainName();
						this.state = 1444;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === VtlParser.MUL) {
							this.state = 1440;
							this.match(VtlParser.MUL);
							this.state = 1441;
							this.valueDomainName();
							this.state = 1446;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1447;
						this.match(VtlParser.RPAREN);
					}

					this.state = 1451;
					this.match(VtlParser.GRPAREN);
				}

				break;
			case VtlParser.HIERARCHICAL_ON_VAR:
				localctx = new HrRulesetVarTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				this.state = 1454;
				this.match(VtlParser.HIERARCHICAL_ON_VAR);
				this.state = 1472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === VtlParser.GLPAREN) {
					this.state = 1455;
					this.match(VtlParser.GLPAREN);
					this.state = 1456;
					localctx.varName = this.varID();
					this.state = 1468;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === VtlParser.LPAREN) {
						this.state = 1457;
						this.match(VtlParser.LPAREN);
						this.state = 1458;
						this.varID();
						this.state = 1463;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === VtlParser.MUL) {
							this.state = 1459;
							this.match(VtlParser.MUL);
							this.state = 1460;
							this.varID();
							this.state = 1465;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1466;
						this.match(VtlParser.RPAREN);
					}

					this.state = 1470;
					this.match(VtlParser.GRPAREN);
				}

				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValueDomainNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_valueDomainName;
	return this;
}

ValueDomainNameContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ValueDomainNameContext.prototype.constructor = ValueDomainNameContext;

ValueDomainNameContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValueDomainNameContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValueDomainName(this);
	}
};

ValueDomainNameContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValueDomainName(this);
	}
};

ValueDomainNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValueDomainName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ValueDomainNameContext = ValueDomainNameContext;

VtlParser.prototype.valueDomainName = function () {
	var localctx = new ValueDomainNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 134, VtlParser.RULE_valueDomainName);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1476;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RulesetIDContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_rulesetID;
	return this;
}

RulesetIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetIDContext.prototype.constructor = RulesetIDContext;

RulesetIDContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

RulesetIDContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRulesetID(this);
	}
};

RulesetIDContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRulesetID(this);
	}
};

RulesetIDContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRulesetID(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RulesetIDContext = RulesetIDContext;

VtlParser.prototype.rulesetID = function () {
	var localctx = new RulesetIDContext(this, this._ctx, this.state);
	this.enterRule(localctx, 136, VtlParser.RULE_rulesetID);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1478;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RulesetSignatureContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_rulesetSignature;
	return this;
}

RulesetSignatureContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RulesetSignatureContext.prototype.constructor = RulesetSignatureContext;

RulesetSignatureContext.prototype.signature = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SignatureContext);
	} else {
		return this.getTypedRuleContext(SignatureContext, i);
	}
};

RulesetSignatureContext.prototype.VALUE_DOMAIN = function () {
	return this.getToken(VtlParser.VALUE_DOMAIN, 0);
};

RulesetSignatureContext.prototype.VARIABLE = function () {
	return this.getToken(VtlParser.VARIABLE, 0);
};

RulesetSignatureContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

RulesetSignatureContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRulesetSignature(this);
	}
};

RulesetSignatureContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRulesetSignature(this);
	}
};

RulesetSignatureContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRulesetSignature(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RulesetSignatureContext = RulesetSignatureContext;

VtlParser.prototype.rulesetSignature = function () {
	var localctx = new RulesetSignatureContext(this, this._ctx, this.state);
	this.enterRule(localctx, 138, VtlParser.RULE_rulesetSignature);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1480;
		_la = this._input.LA(1);
		if (!(_la === VtlParser.VALUE_DOMAIN || _la === VtlParser.VARIABLE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1481;
		this.signature();
		this.state = 1486;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1482;
			this.match(VtlParser.COMMA);
			this.state = 1483;
			this.signature();
			this.state = 1488;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SignatureContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_signature;
	return this;
}

SignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignatureContext.prototype.constructor = SignatureContext;

SignatureContext.prototype.varID = function () {
	return this.getTypedRuleContext(VarIDContext, 0);
};

SignatureContext.prototype.AS = function () {
	return this.getToken(VtlParser.AS, 0);
};

SignatureContext.prototype.alias = function () {
	return this.getTypedRuleContext(AliasContext, 0);
};

SignatureContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSignature(this);
	}
};

SignatureContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSignature(this);
	}
};

SignatureContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSignature(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.SignatureContext = SignatureContext;

VtlParser.prototype.signature = function () {
	var localctx = new SignatureContext(this, this._ctx, this.state);
	this.enterRule(localctx, 140, VtlParser.RULE_signature);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1489;
		this.varID();
		this.state = 1492;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.AS) {
			this.state = 1490;
			this.match(VtlParser.AS);
			this.state = 1491;
			this.alias();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RuleClauseDatapointContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_ruleClauseDatapoint;
	return this;
}

RuleClauseDatapointContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RuleClauseDatapointContext.prototype.constructor = RuleClauseDatapointContext;

RuleClauseDatapointContext.prototype.ruleItemDatapoint = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(RuleItemDatapointContext);
	} else {
		return this.getTypedRuleContext(RuleItemDatapointContext, i);
	}
};

RuleClauseDatapointContext.prototype.EOL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.EOL);
	} else {
		return this.getToken(VtlParser.EOL, i);
	}
};

RuleClauseDatapointContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRuleClauseDatapoint(this);
	}
};

RuleClauseDatapointContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRuleClauseDatapoint(this);
	}
};

RuleClauseDatapointContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRuleClauseDatapoint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RuleClauseDatapointContext = RuleClauseDatapointContext;

VtlParser.prototype.ruleClauseDatapoint = function () {
	var localctx = new RuleClauseDatapointContext(this, this._ctx, this.state);
	this.enterRule(localctx, 142, VtlParser.RULE_ruleClauseDatapoint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1494;
		this.ruleItemDatapoint();
		this.state = 1499;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.EOL) {
			this.state = 1495;
			this.match(VtlParser.EOL);
			this.state = 1496;
			this.ruleItemDatapoint();
			this.state = 1501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RuleItemDatapointContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_ruleItemDatapoint;
	this.ruleName = null; // Token
	this.antecedentContiditon = null; // ExprComponentContext
	this.consequentCondition = null; // ExprComponentContext
	return this;
}

RuleItemDatapointContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RuleItemDatapointContext.prototype.constructor = RuleItemDatapointContext;

RuleItemDatapointContext.prototype.exprComponent = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ExprComponentContext);
	} else {
		return this.getTypedRuleContext(ExprComponentContext, i);
	}
};

RuleItemDatapointContext.prototype.COLON = function () {
	return this.getToken(VtlParser.COLON, 0);
};

RuleItemDatapointContext.prototype.WHEN = function () {
	return this.getToken(VtlParser.WHEN, 0);
};

RuleItemDatapointContext.prototype.THEN = function () {
	return this.getToken(VtlParser.THEN, 0);
};

RuleItemDatapointContext.prototype.erCode = function () {
	return this.getTypedRuleContext(ErCodeContext, 0);
};

RuleItemDatapointContext.prototype.erLevel = function () {
	return this.getTypedRuleContext(ErLevelContext, 0);
};

RuleItemDatapointContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

RuleItemDatapointContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRuleItemDatapoint(this);
	}
};

RuleItemDatapointContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRuleItemDatapoint(this);
	}
};

RuleItemDatapointContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRuleItemDatapoint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RuleItemDatapointContext = RuleItemDatapointContext;

VtlParser.prototype.ruleItemDatapoint = function () {
	var localctx = new RuleItemDatapointContext(this, this._ctx, this.state);
	this.enterRule(localctx, 144, VtlParser.RULE_ruleItemDatapoint);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1504;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 164, this._ctx);
		if (la_ === 1) {
			this.state = 1502;
			localctx.ruleName = this.match(VtlParser.IDENTIFIER);
			this.state = 1503;
			this.match(VtlParser.COLON);
		}
		this.state = 1510;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.WHEN) {
			this.state = 1506;
			this.match(VtlParser.WHEN);
			this.state = 1507;
			localctx.antecedentContiditon = this.exprComponent(0);
			this.state = 1508;
			this.match(VtlParser.THEN);
		}

		this.state = 1512;
		localctx.consequentCondition = this.exprComponent(0);
		this.state = 1514;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.ERRORCODE) {
			this.state = 1513;
			this.erCode();
		}

		this.state = 1517;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.ERRORLEVEL) {
			this.state = 1516;
			this.erLevel();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RuleClauseHierarchicalContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_ruleClauseHierarchical;
	return this;
}

RuleClauseHierarchicalContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RuleClauseHierarchicalContext.prototype.constructor = RuleClauseHierarchicalContext;

RuleClauseHierarchicalContext.prototype.ruleItemHierarchical = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(RuleItemHierarchicalContext);
	} else {
		return this.getTypedRuleContext(RuleItemHierarchicalContext, i);
	}
};

RuleClauseHierarchicalContext.prototype.EOL = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.EOL);
	} else {
		return this.getToken(VtlParser.EOL, i);
	}
};

RuleClauseHierarchicalContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRuleClauseHierarchical(this);
	}
};

RuleClauseHierarchicalContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRuleClauseHierarchical(this);
	}
};

RuleClauseHierarchicalContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRuleClauseHierarchical(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RuleClauseHierarchicalContext = RuleClauseHierarchicalContext;

VtlParser.prototype.ruleClauseHierarchical = function () {
	var localctx = new RuleClauseHierarchicalContext(this, this._ctx, this.state);
	this.enterRule(localctx, 146, VtlParser.RULE_ruleClauseHierarchical);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1519;
		this.ruleItemHierarchical();
		this.state = 1524;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.EOL) {
			this.state = 1520;
			this.match(VtlParser.EOL);
			this.state = 1521;
			this.ruleItemHierarchical();
			this.state = 1526;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RuleItemHierarchicalContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_ruleItemHierarchical;
	this.ruleName = null; // Token
	return this;
}

RuleItemHierarchicalContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RuleItemHierarchicalContext.prototype.constructor = RuleItemHierarchicalContext;

RuleItemHierarchicalContext.prototype.codeItemRelation = function () {
	return this.getTypedRuleContext(CodeItemRelationContext, 0);
};

RuleItemHierarchicalContext.prototype.COLON = function () {
	return this.getToken(VtlParser.COLON, 0);
};

RuleItemHierarchicalContext.prototype.erCode = function () {
	return this.getTypedRuleContext(ErCodeContext, 0);
};

RuleItemHierarchicalContext.prototype.erLevel = function () {
	return this.getTypedRuleContext(ErLevelContext, 0);
};

RuleItemHierarchicalContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

RuleItemHierarchicalContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRuleItemHierarchical(this);
	}
};

RuleItemHierarchicalContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRuleItemHierarchical(this);
	}
};

RuleItemHierarchicalContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRuleItemHierarchical(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RuleItemHierarchicalContext = RuleItemHierarchicalContext;

VtlParser.prototype.ruleItemHierarchical = function () {
	var localctx = new RuleItemHierarchicalContext(this, this._ctx, this.state);
	this.enterRule(localctx, 148, VtlParser.RULE_ruleItemHierarchical);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1529;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
		if (la_ === 1) {
			this.state = 1527;
			localctx.ruleName = this.match(VtlParser.IDENTIFIER);
			this.state = 1528;
			this.match(VtlParser.COLON);
		}
		this.state = 1531;
		this.codeItemRelation();
		this.state = 1533;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.ERRORCODE) {
			this.state = 1532;
			this.erCode();
		}

		this.state = 1536;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.ERRORLEVEL) {
			this.state = 1535;
			this.erLevel();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function HierRuleSignatureContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_hierRuleSignature;
	return this;
}

HierRuleSignatureContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
HierRuleSignatureContext.prototype.constructor = HierRuleSignatureContext;

HierRuleSignatureContext.prototype.RULE = function () {
	return this.getToken(VtlParser.RULE, 0);
};

HierRuleSignatureContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

HierRuleSignatureContext.prototype.VALUE_DOMAIN = function () {
	return this.getToken(VtlParser.VALUE_DOMAIN, 0);
};

HierRuleSignatureContext.prototype.VARIABLE = function () {
	return this.getToken(VtlParser.VARIABLE, 0);
};

HierRuleSignatureContext.prototype.CONDITION = function () {
	return this.getToken(VtlParser.CONDITION, 0);
};

HierRuleSignatureContext.prototype.valueDomainSignature = function () {
	return this.getTypedRuleContext(ValueDomainSignatureContext, 0);
};

HierRuleSignatureContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterHierRuleSignature(this);
	}
};

HierRuleSignatureContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitHierRuleSignature(this);
	}
};

HierRuleSignatureContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitHierRuleSignature(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.HierRuleSignatureContext = HierRuleSignatureContext;

VtlParser.prototype.hierRuleSignature = function () {
	var localctx = new HierRuleSignatureContext(this, this._ctx, this.state);
	this.enterRule(localctx, 150, VtlParser.RULE_hierRuleSignature);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1538;
		_la = this._input.LA(1);
		if (!(_la === VtlParser.VALUE_DOMAIN || _la === VtlParser.VARIABLE)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
		this.state = 1541;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.CONDITION) {
			this.state = 1539;
			this.match(VtlParser.CONDITION);
			this.state = 1540;
			this.valueDomainSignature();
		}

		this.state = 1543;
		this.match(VtlParser.RULE);
		this.state = 1544;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValueDomainSignatureContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_valueDomainSignature;
	return this;
}

ValueDomainSignatureContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ValueDomainSignatureContext.prototype.constructor = ValueDomainSignatureContext;

ValueDomainSignatureContext.prototype.signature = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(SignatureContext);
	} else {
		return this.getTypedRuleContext(SignatureContext, i);
	}
};

ValueDomainSignatureContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

ValueDomainSignatureContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValueDomainSignature(this);
	}
};

ValueDomainSignatureContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValueDomainSignature(this);
	}
};

ValueDomainSignatureContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValueDomainSignature(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ValueDomainSignatureContext = ValueDomainSignatureContext;

VtlParser.prototype.valueDomainSignature = function () {
	var localctx = new ValueDomainSignatureContext(this, this._ctx, this.state);
	this.enterRule(localctx, 152, VtlParser.RULE_valueDomainSignature);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1546;
		this.signature();
		this.state = 1551;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1547;
			this.match(VtlParser.COMMA);
			this.state = 1548;
			this.signature();
			this.state = 1553;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CodeItemRelationContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_codeItemRelation;
	this.codetemRef = null; // ValueDomainValueContext
	return this;
}

CodeItemRelationContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
CodeItemRelationContext.prototype.constructor = CodeItemRelationContext;

CodeItemRelationContext.prototype.codeItemRelationClause = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(CodeItemRelationClauseContext);
	} else {
		return this.getTypedRuleContext(CodeItemRelationClauseContext, i);
	}
};

CodeItemRelationContext.prototype.valueDomainValue = function () {
	return this.getTypedRuleContext(ValueDomainValueContext, 0);
};

CodeItemRelationContext.prototype.WHEN = function () {
	return this.getToken(VtlParser.WHEN, 0);
};

CodeItemRelationContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

CodeItemRelationContext.prototype.THEN = function () {
	return this.getToken(VtlParser.THEN, 0);
};

CodeItemRelationContext.prototype.comparisonOperand = function () {
	return this.getTypedRuleContext(ComparisonOperandContext, 0);
};

CodeItemRelationContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCodeItemRelation(this);
	}
};

CodeItemRelationContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCodeItemRelation(this);
	}
};

CodeItemRelationContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCodeItemRelation(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.CodeItemRelationContext = CodeItemRelationContext;

VtlParser.prototype.codeItemRelation = function () {
	var localctx = new CodeItemRelationContext(this, this._ctx, this.state);
	this.enterRule(localctx, 154, VtlParser.RULE_codeItemRelation);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1558;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.WHEN) {
			this.state = 1554;
			this.match(VtlParser.WHEN);
			this.state = 1555;
			this.exprComponent(0);
			this.state = 1556;
			this.match(VtlParser.THEN);
		}

		this.state = 1560;
		localctx.codetemRef = this.valueDomainValue();
		this.state = 1562;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (
			(_la & ~0x1f) == 0 &&
			((1 << _la) &
				((1 << VtlParser.EQ) |
					(1 << VtlParser.LT) |
					(1 << VtlParser.MT) |
					(1 << VtlParser.ME) |
					(1 << VtlParser.NEQ) |
					(1 << VtlParser.LE))) !==
				0
		) {
			this.state = 1561;
			this.comparisonOperand();
		}

		this.state = 1564;
		this.codeItemRelationClause();
		this.state = 1568;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (
			_la === VtlParser.PLUS ||
			_la === VtlParser.MINUS ||
			(((_la - 229) & ~0x1f) == 0 &&
				((1 << (_la - 229)) &
					((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
						(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
						(1 << (VtlParser.IDENTIFIER - 229)))) !==
					0)
		) {
			this.state = 1565;
			this.codeItemRelationClause();
			this.state = 1570;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CodeItemRelationClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_codeItemRelationClause;
	this.opAdd = null; // Token
	this.rightCodeItem = null; // ValueDomainValueContext
	this.rightCondition = null; // ExprComponentContext
	return this;
}

CodeItemRelationClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
CodeItemRelationClauseContext.prototype.constructor = CodeItemRelationClauseContext;

CodeItemRelationClauseContext.prototype.valueDomainValue = function () {
	return this.getTypedRuleContext(ValueDomainValueContext, 0);
};

CodeItemRelationClauseContext.prototype.QLPAREN = function () {
	return this.getToken(VtlParser.QLPAREN, 0);
};

CodeItemRelationClauseContext.prototype.QRPAREN = function () {
	return this.getToken(VtlParser.QRPAREN, 0);
};

CodeItemRelationClauseContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

CodeItemRelationClauseContext.prototype.PLUS = function () {
	return this.getToken(VtlParser.PLUS, 0);
};

CodeItemRelationClauseContext.prototype.MINUS = function () {
	return this.getToken(VtlParser.MINUS, 0);
};

CodeItemRelationClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCodeItemRelationClause(this);
	}
};

CodeItemRelationClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCodeItemRelationClause(this);
	}
};

CodeItemRelationClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCodeItemRelationClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.CodeItemRelationClauseContext = CodeItemRelationClauseContext;

VtlParser.prototype.codeItemRelationClause = function () {
	var localctx = new CodeItemRelationClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 156, VtlParser.RULE_codeItemRelationClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1572;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.PLUS || _la === VtlParser.MINUS) {
			this.state = 1571;
			localctx.opAdd = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === VtlParser.PLUS || _la === VtlParser.MINUS)) {
				localctx.opAdd = this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		}

		this.state = 1574;
		localctx.rightCodeItem = this.valueDomainValue();
		this.state = 1579;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.QLPAREN) {
			this.state = 1575;
			this.match(VtlParser.QLPAREN);
			this.state = 1576;
			localctx.rightCondition = this.exprComponent(0);
			this.state = 1577;
			this.match(VtlParser.QRPAREN);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValueDomainValueContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_valueDomainValue;
	return this;
}

ValueDomainValueContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ValueDomainValueContext.prototype.constructor = ValueDomainValueContext;

ValueDomainValueContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValueDomainValueContext.prototype.INTEGER_CONSTANT = function () {
	return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

ValueDomainValueContext.prototype.NUMBER_CONSTANT = function () {
	return this.getToken(VtlParser.NUMBER_CONSTANT, 0);
};

ValueDomainValueContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValueDomainValue(this);
	}
};

ValueDomainValueContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValueDomainValue(this);
	}
};

ValueDomainValueContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValueDomainValue(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ValueDomainValueContext = ValueDomainValueContext;

VtlParser.prototype.valueDomainValue = function () {
	var localctx = new ValueDomainValueContext(this, this._ctx, this.state);
	this.enterRule(localctx, 158, VtlParser.RULE_valueDomainValue);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1581;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 229) & ~0x1f) == 0 &&
				((1 << (_la - 229)) &
					((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
						(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
						(1 << (VtlParser.IDENTIFIER - 229)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ScalarTypeConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_scalarTypeConstraint;
	return this;
}

ScalarTypeConstraintContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ScalarTypeConstraintContext.prototype.constructor = ScalarTypeConstraintContext;

ScalarTypeConstraintContext.prototype.copyFrom = function (ctx) {
	antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function RangeConstraintContext(parser, ctx) {
	ScalarTypeConstraintContext.call(this, parser);
	ScalarTypeConstraintContext.prototype.copyFrom.call(this, ctx);
	return this;
}

RangeConstraintContext.prototype = Object.create(
	ScalarTypeConstraintContext.prototype
);
RangeConstraintContext.prototype.constructor = RangeConstraintContext;

VtlParser.RangeConstraintContext = RangeConstraintContext;

RangeConstraintContext.prototype.GLPAREN = function () {
	return this.getToken(VtlParser.GLPAREN, 0);
};

RangeConstraintContext.prototype.constant = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ConstantContext);
	} else {
		return this.getTypedRuleContext(ConstantContext, i);
	}
};

RangeConstraintContext.prototype.GRPAREN = function () {
	return this.getToken(VtlParser.GRPAREN, 0);
};

RangeConstraintContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

RangeConstraintContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRangeConstraint(this);
	}
};

RangeConstraintContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRangeConstraint(this);
	}
};

RangeConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRangeConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

function ConditionConstraintContext(parser, ctx) {
	ScalarTypeConstraintContext.call(this, parser);
	ScalarTypeConstraintContext.prototype.copyFrom.call(this, ctx);
	return this;
}

ConditionConstraintContext.prototype = Object.create(
	ScalarTypeConstraintContext.prototype
);
ConditionConstraintContext.prototype.constructor = ConditionConstraintContext;

VtlParser.ConditionConstraintContext = ConditionConstraintContext;

ConditionConstraintContext.prototype.QLPAREN = function () {
	return this.getToken(VtlParser.QLPAREN, 0);
};

ConditionConstraintContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

ConditionConstraintContext.prototype.QRPAREN = function () {
	return this.getToken(VtlParser.QRPAREN, 0);
};
ConditionConstraintContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterConditionConstraint(this);
	}
};

ConditionConstraintContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitConditionConstraint(this);
	}
};

ConditionConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitConditionConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ScalarTypeConstraintContext = ScalarTypeConstraintContext;

VtlParser.prototype.scalarTypeConstraint = function () {
	var localctx = new ScalarTypeConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 160, VtlParser.RULE_scalarTypeConstraint);
	var _la = 0; // Token type
	try {
		this.state = 1598;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.QLPAREN:
				localctx = new ConditionConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				this.state = 1583;
				this.match(VtlParser.QLPAREN);
				this.state = 1584;
				this.exprComponent(0);
				this.state = 1585;
				this.match(VtlParser.QRPAREN);
				break;
			case VtlParser.GLPAREN:
				localctx = new RangeConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				this.state = 1587;
				this.match(VtlParser.GLPAREN);
				this.state = 1588;
				this.constant();
				this.state = 1593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === VtlParser.COMMA) {
					this.state = 1589;
					this.match(VtlParser.COMMA);
					this.state = 1590;
					this.constant();
					this.state = 1595;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1596;
				this.match(VtlParser.GRPAREN);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function CompConstraintContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_compConstraint;
	return this;
}

CompConstraintContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
CompConstraintContext.prototype.constructor = CompConstraintContext;

CompConstraintContext.prototype.componentType = function () {
	return this.getTypedRuleContext(ComponentTypeContext, 0);
};

CompConstraintContext.prototype.componentID = function () {
	return this.getTypedRuleContext(ComponentIDContext, 0);
};

CompConstraintContext.prototype.multModifier = function () {
	return this.getTypedRuleContext(MultModifierContext, 0);
};

CompConstraintContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterCompConstraint(this);
	}
};

CompConstraintContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitCompConstraint(this);
	}
};

CompConstraintContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitCompConstraint(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.CompConstraintContext = CompConstraintContext;

VtlParser.prototype.compConstraint = function () {
	var localctx = new CompConstraintContext(this, this._ctx, this.state);
	this.enterRule(localctx, 162, VtlParser.RULE_compConstraint);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1600;
		this.componentType();
		this.state = 1603;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.IDENTIFIER:
				this.state = 1601;
				this.componentID();
				break;
			case VtlParser.OPTIONAL:
				this.state = 1602;
				this.multModifier();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function MultModifierContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_multModifier;
	return this;
}

MultModifierContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
MultModifierContext.prototype.constructor = MultModifierContext;

MultModifierContext.prototype.OPTIONAL = function () {
	return this.getToken(VtlParser.OPTIONAL, 0);
};

MultModifierContext.prototype.PLUS = function () {
	return this.getToken(VtlParser.PLUS, 0);
};

MultModifierContext.prototype.MUL = function () {
	return this.getToken(VtlParser.MUL, 0);
};

MultModifierContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterMultModifier(this);
	}
};

MultModifierContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitMultModifier(this);
	}
};

MultModifierContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitMultModifier(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.MultModifierContext = MultModifierContext;

VtlParser.prototype.multModifier = function () {
	var localctx = new MultModifierContext(this, this._ctx, this.state);
	this.enterRule(localctx, 164, VtlParser.RULE_multModifier);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1605;
		this.match(VtlParser.OPTIONAL);
		this.state = 1607;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		if (_la === VtlParser.PLUS || _la === VtlParser.MUL) {
			this.state = 1606;
			_la = this._input.LA(1);
			if (!(_la === VtlParser.PLUS || _la === VtlParser.MUL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValidationOutputContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_validationOutput;
	return this;
}

ValidationOutputContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ValidationOutputContext.prototype.constructor = ValidationOutputContext;

ValidationOutputContext.prototype.INVALID = function () {
	return this.getToken(VtlParser.INVALID, 0);
};

ValidationOutputContext.prototype.ALL_MEASURES = function () {
	return this.getToken(VtlParser.ALL_MEASURES, 0);
};

ValidationOutputContext.prototype.ALL = function () {
	return this.getToken(VtlParser.ALL, 0);
};

ValidationOutputContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValidationOutput(this);
	}
};

ValidationOutputContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValidationOutput(this);
	}
};

ValidationOutputContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValidationOutput(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ValidationOutputContext = ValidationOutputContext;

VtlParser.prototype.validationOutput = function () {
	var localctx = new ValidationOutputContext(this, this._ctx, this.state);
	this.enterRule(localctx, 166, VtlParser.RULE_validationOutput);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1609;
		_la = this._input.LA(1);
		if (
			!(
				_la === VtlParser.ALL ||
				_la === VtlParser.INVALID ||
				_la === VtlParser.ALL_MEASURES
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValidationModeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_validationMode;
	return this;
}

ValidationModeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ValidationModeContext.prototype.constructor = ValidationModeContext;

ValidationModeContext.prototype.NON_NULL = function () {
	return this.getToken(VtlParser.NON_NULL, 0);
};

ValidationModeContext.prototype.NON_ZERO = function () {
	return this.getToken(VtlParser.NON_ZERO, 0);
};

ValidationModeContext.prototype.PARTIAL_NULL = function () {
	return this.getToken(VtlParser.PARTIAL_NULL, 0);
};

ValidationModeContext.prototype.PARTIAL_ZERO = function () {
	return this.getToken(VtlParser.PARTIAL_ZERO, 0);
};

ValidationModeContext.prototype.ALWAYS_NULL = function () {
	return this.getToken(VtlParser.ALWAYS_NULL, 0);
};

ValidationModeContext.prototype.ALWAYS_ZERO = function () {
	return this.getToken(VtlParser.ALWAYS_ZERO, 0);
};

ValidationModeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValidationMode(this);
	}
};

ValidationModeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValidationMode(this);
	}
};

ValidationModeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValidationMode(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ValidationModeContext = ValidationModeContext;

VtlParser.prototype.validationMode = function () {
	var localctx = new ValidationModeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 168, VtlParser.RULE_validationMode);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1611;
		_la = this._input.LA(1);
		if (
			!(
				((_la - 213) & ~0x1f) == 0 &&
				((1 << (_la - 213)) &
					((1 << (VtlParser.NON_NULL - 213)) |
						(1 << (VtlParser.NON_ZERO - 213)) |
						(1 << (VtlParser.PARTIAL_NULL - 213)) |
						(1 << (VtlParser.PARTIAL_ZERO - 213)) |
						(1 << (VtlParser.ALWAYS_NULL - 213)) |
						(1 << (VtlParser.ALWAYS_ZERO - 213)))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ConditionClauseContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_conditionClause;
	return this;
}

ConditionClauseContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ConditionClauseContext.prototype.constructor = ConditionClauseContext;

ConditionClauseContext.prototype.CONDITION = function () {
	return this.getToken(VtlParser.CONDITION, 0);
};

ConditionClauseContext.prototype.componentID = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ComponentIDContext);
	} else {
		return this.getTypedRuleContext(ComponentIDContext, i);
	}
};

ConditionClauseContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

ConditionClauseContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterConditionClause(this);
	}
};

ConditionClauseContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitConditionClause(this);
	}
};

ConditionClauseContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitConditionClause(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ConditionClauseContext = ConditionClauseContext;

VtlParser.prototype.conditionClause = function () {
	var localctx = new ConditionClauseContext(this, this._ctx, this.state);
	this.enterRule(localctx, 170, VtlParser.RULE_conditionClause);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1613;
		this.match(VtlParser.CONDITION);
		this.state = 1614;
		this.componentID();
		this.state = 1619;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1615;
			this.match(VtlParser.COMMA);
			this.state = 1616;
			this.componentID();
			this.state = 1621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function InputModeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_inputMode;
	return this;
}

InputModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputModeContext.prototype.constructor = InputModeContext;

InputModeContext.prototype.DATASET = function () {
	return this.getToken(VtlParser.DATASET, 0);
};

InputModeContext.prototype.DATASET_PRIORITY = function () {
	return this.getToken(VtlParser.DATASET_PRIORITY, 0);
};

InputModeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterInputMode(this);
	}
};

InputModeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitInputMode(this);
	}
};

InputModeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitInputMode(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.InputModeContext = InputModeContext;

VtlParser.prototype.inputMode = function () {
	var localctx = new InputModeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 172, VtlParser.RULE_inputMode);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1622;
		_la = this._input.LA(1);
		if (!(_la === VtlParser.DATASET || _la === VtlParser.DATASET_PRIORITY)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ImbalanceExprContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_imbalanceExpr;
	return this;
}

ImbalanceExprContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ImbalanceExprContext.prototype.constructor = ImbalanceExprContext;

ImbalanceExprContext.prototype.IMBALANCE = function () {
	return this.getToken(VtlParser.IMBALANCE, 0);
};

ImbalanceExprContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

ImbalanceExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterImbalanceExpr(this);
	}
};

ImbalanceExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitImbalanceExpr(this);
	}
};

ImbalanceExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitImbalanceExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ImbalanceExprContext = ImbalanceExprContext;

VtlParser.prototype.imbalanceExpr = function () {
	var localctx = new ImbalanceExprContext(this, this._ctx, this.state);
	this.enterRule(localctx, 174, VtlParser.RULE_imbalanceExpr);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1624;
		this.match(VtlParser.IMBALANCE);
		this.state = 1625;
		this.expr(0);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function InputModeHierarchyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_inputModeHierarchy;
	return this;
}

InputModeHierarchyContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
InputModeHierarchyContext.prototype.constructor = InputModeHierarchyContext;

InputModeHierarchyContext.prototype.RULE = function () {
	return this.getToken(VtlParser.RULE, 0);
};

InputModeHierarchyContext.prototype.DATASET = function () {
	return this.getToken(VtlParser.DATASET, 0);
};

InputModeHierarchyContext.prototype.RULE_PRIORITY = function () {
	return this.getToken(VtlParser.RULE_PRIORITY, 0);
};

InputModeHierarchyContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterInputModeHierarchy(this);
	}
};

InputModeHierarchyContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitInputModeHierarchy(this);
	}
};

InputModeHierarchyContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitInputModeHierarchy(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.InputModeHierarchyContext = InputModeHierarchyContext;

VtlParser.prototype.inputModeHierarchy = function () {
	var localctx = new InputModeHierarchyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 176, VtlParser.RULE_inputModeHierarchy);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1627;
		_la = this._input.LA(1);
		if (
			!(
				_la === VtlParser.DATASET ||
				_la === VtlParser.RULE ||
				_la === VtlParser.RULE_PRIORITY
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OutputModeHierarchyContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_outputModeHierarchy;
	return this;
}

OutputModeHierarchyContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
OutputModeHierarchyContext.prototype.constructor = OutputModeHierarchyContext;

OutputModeHierarchyContext.prototype.COMPUTED = function () {
	return this.getToken(VtlParser.COMPUTED, 0);
};

OutputModeHierarchyContext.prototype.ALL = function () {
	return this.getToken(VtlParser.ALL, 0);
};

OutputModeHierarchyContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOutputModeHierarchy(this);
	}
};

OutputModeHierarchyContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOutputModeHierarchy(this);
	}
};

OutputModeHierarchyContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOutputModeHierarchy(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OutputModeHierarchyContext = OutputModeHierarchyContext;

VtlParser.prototype.outputModeHierarchy = function () {
	var localctx = new OutputModeHierarchyContext(this, this._ctx, this.state);
	this.enterRule(localctx, 178, VtlParser.RULE_outputModeHierarchy);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1629;
		_la = this._input.LA(1);
		if (!(_la === VtlParser.ALL || _la === VtlParser.COMPUTED)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function AliasContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_alias;
	return this;
}

AliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasContext.prototype.constructor = AliasContext;

AliasContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

AliasContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterAlias(this);
	}
};

AliasContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitAlias(this);
	}
};

AliasContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitAlias(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.AliasContext = AliasContext;

VtlParser.prototype.alias = function () {
	var localctx = new AliasContext(this, this._ctx, this.state);
	this.enterRule(localctx, 180, VtlParser.RULE_alias);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1631;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function VarIDContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_varID;
	return this;
}

VarIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarIDContext.prototype.constructor = VarIDContext;

VarIDContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

VarIDContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterVarID(this);
	}
};

VarIDContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitVarID(this);
	}
};

VarIDContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitVarID(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.VarIDContext = VarIDContext;

VtlParser.prototype.varID = function () {
	var localctx = new VarIDContext(this, this._ctx, this.state);
	this.enterRule(localctx, 182, VtlParser.RULE_varID);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1633;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function SimpleComponentIdContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_simpleComponentId;
	return this;
}

SimpleComponentIdContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
SimpleComponentIdContext.prototype.constructor = SimpleComponentIdContext;

SimpleComponentIdContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

SimpleComponentIdContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterSimpleComponentId(this);
	}
};

SimpleComponentIdContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitSimpleComponentId(this);
	}
};

SimpleComponentIdContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitSimpleComponentId(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.SimpleComponentIdContext = SimpleComponentIdContext;

VtlParser.prototype.simpleComponentId = function () {
	var localctx = new SimpleComponentIdContext(this, this._ctx, this.state);
	this.enterRule(localctx, 184, VtlParser.RULE_simpleComponentId);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1635;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ComponentIDContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_componentID;
	return this;
}

ComponentIDContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ComponentIDContext.prototype.constructor = ComponentIDContext;

ComponentIDContext.prototype.IDENTIFIER = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.IDENTIFIER);
	} else {
		return this.getToken(VtlParser.IDENTIFIER, i);
	}
};

ComponentIDContext.prototype.MEMBERSHIP = function () {
	return this.getToken(VtlParser.MEMBERSHIP, 0);
};

ComponentIDContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComponentID(this);
	}
};

ComponentIDContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComponentID(this);
	}
};

ComponentIDContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComponentID(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ComponentIDContext = ComponentIDContext;

VtlParser.prototype.componentID = function () {
	var localctx = new ComponentIDContext(this, this._ctx, this.state);
	this.enterRule(localctx, 186, VtlParser.RULE_componentID);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1637;
		this.match(VtlParser.IDENTIFIER);
		this.state = 1640;
		this._errHandler.sync(this);
		var la_ = this._interp.adaptivePredict(this._input, 184, this._ctx);
		if (la_ === 1) {
			this.state = 1638;
			this.match(VtlParser.MEMBERSHIP);
			this.state = 1639;
			this.match(VtlParser.IDENTIFIER);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ListsContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_lists;
	return this;
}

ListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListsContext.prototype.constructor = ListsContext;

ListsContext.prototype.GLPAREN = function () {
	return this.getToken(VtlParser.GLPAREN, 0);
};

ListsContext.prototype.constant = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTypedRuleContexts(ConstantContext);
	} else {
		return this.getTypedRuleContext(ConstantContext, i);
	}
};

ListsContext.prototype.GRPAREN = function () {
	return this.getToken(VtlParser.GRPAREN, 0);
};

ListsContext.prototype.COMMA = function (i) {
	if (i === undefined) {
		i = null;
	}
	if (i === null) {
		return this.getTokens(VtlParser.COMMA);
	} else {
		return this.getToken(VtlParser.COMMA, i);
	}
};

ListsContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterLists(this);
	}
};

ListsContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitLists(this);
	}
};

ListsContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitLists(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ListsContext = ListsContext;

VtlParser.prototype.lists = function () {
	var localctx = new ListsContext(this, this._ctx, this.state);
	this.enterRule(localctx, 188, VtlParser.RULE_lists);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1642;
		this.match(VtlParser.GLPAREN);
		this.state = 1643;
		this.constant();
		this.state = 1648;
		this._errHandler.sync(this);
		_la = this._input.LA(1);
		while (_la === VtlParser.COMMA) {
			this.state = 1644;
			this.match(VtlParser.COMMA);
			this.state = 1645;
			this.constant();
			this.state = 1650;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
		}
		this.state = 1651;
		this.match(VtlParser.GRPAREN);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ErCodeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_erCode;
	return this;
}

ErCodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErCodeContext.prototype.constructor = ErCodeContext;

ErCodeContext.prototype.ERRORCODE = function () {
	return this.getToken(VtlParser.ERRORCODE, 0);
};

ErCodeContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

ErCodeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterErCode(this);
	}
};

ErCodeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitErCode(this);
	}
};

ErCodeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitErCode(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ErCodeContext = ErCodeContext;

VtlParser.prototype.erCode = function () {
	var localctx = new ErCodeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 190, VtlParser.RULE_erCode);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1653;
		this.match(VtlParser.ERRORCODE);
		this.state = 1654;
		this.constant();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ErLevelContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_erLevel;
	return this;
}

ErLevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErLevelContext.prototype.constructor = ErLevelContext;

ErLevelContext.prototype.ERRORLEVEL = function () {
	return this.getToken(VtlParser.ERRORLEVEL, 0);
};

ErLevelContext.prototype.constant = function () {
	return this.getTypedRuleContext(ConstantContext, 0);
};

ErLevelContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterErLevel(this);
	}
};

ErLevelContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitErLevel(this);
	}
};

ErLevelContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitErLevel(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ErLevelContext = ErLevelContext;

VtlParser.prototype.erLevel = function () {
	var localctx = new ErLevelContext(this, this._ctx, this.state);
	this.enterRule(localctx, 192, VtlParser.RULE_erLevel);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1656;
		this.match(VtlParser.ERRORLEVEL);
		this.state = 1657;
		this.constant();
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ComparisonOperandContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_comparisonOperand;
	return this;
}

ComparisonOperandContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ComparisonOperandContext.prototype.constructor = ComparisonOperandContext;

ComparisonOperandContext.prototype.MT = function () {
	return this.getToken(VtlParser.MT, 0);
};

ComparisonOperandContext.prototype.ME = function () {
	return this.getToken(VtlParser.ME, 0);
};

ComparisonOperandContext.prototype.LE = function () {
	return this.getToken(VtlParser.LE, 0);
};

ComparisonOperandContext.prototype.LT = function () {
	return this.getToken(VtlParser.LT, 0);
};

ComparisonOperandContext.prototype.EQ = function () {
	return this.getToken(VtlParser.EQ, 0);
};

ComparisonOperandContext.prototype.NEQ = function () {
	return this.getToken(VtlParser.NEQ, 0);
};

ComparisonOperandContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComparisonOperand(this);
	}
};

ComparisonOperandContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComparisonOperand(this);
	}
};

ComparisonOperandContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComparisonOperand(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ComparisonOperandContext = ComparisonOperandContext;

VtlParser.prototype.comparisonOperand = function () {
	var localctx = new ComparisonOperandContext(this, this._ctx, this.state);
	this.enterRule(localctx, 194, VtlParser.RULE_comparisonOperand);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1659;
		_la = this._input.LA(1);
		if (
			!(
				(_la & ~0x1f) == 0 &&
				((1 << _la) &
					((1 << VtlParser.EQ) |
						(1 << VtlParser.LT) |
						(1 << VtlParser.MT) |
						(1 << VtlParser.ME) |
						(1 << VtlParser.NEQ) |
						(1 << VtlParser.LE))) !==
					0
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OptionalExprContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_optionalExpr;
	return this;
}

OptionalExprContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
OptionalExprContext.prototype.constructor = OptionalExprContext;

OptionalExprContext.prototype.expr = function () {
	return this.getTypedRuleContext(ExprContext, 0);
};

OptionalExprContext.prototype.OPTIONAL = function () {
	return this.getToken(VtlParser.OPTIONAL, 0);
};

OptionalExprContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOptionalExpr(this);
	}
};

OptionalExprContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOptionalExpr(this);
	}
};

OptionalExprContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOptionalExpr(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OptionalExprContext = OptionalExprContext;

VtlParser.prototype.optionalExpr = function () {
	var localctx = new OptionalExprContext(this, this._ctx, this.state);
	this.enterRule(localctx, 196, VtlParser.RULE_optionalExpr);
	try {
		this.state = 1663;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.LPAREN:
			case VtlParser.PLUS:
			case VtlParser.MINUS:
			case VtlParser.EVAL:
			case VtlParser.IF:
			case VtlParser.CURRENT_DATE:
			case VtlParser.NOT:
			case VtlParser.BETWEEN:
			case VtlParser.NULL_CONSTANT:
			case VtlParser.ISNULL:
			case VtlParser.UNION:
			case VtlParser.SYMDIFF:
			case VtlParser.INTERSECT:
			case VtlParser.CHECK:
			case VtlParser.EXISTS_IN:
			case VtlParser.MIN:
			case VtlParser.MAX:
			case VtlParser.ABS:
			case VtlParser.LN:
			case VtlParser.LOG:
			case VtlParser.TRUNC:
			case VtlParser.ROUND:
			case VtlParser.POWER:
			case VtlParser.MOD:
			case VtlParser.LEN:
			case VtlParser.TRIM:
			case VtlParser.UCASE:
			case VtlParser.LCASE:
			case VtlParser.SUBSTR:
			case VtlParser.SUM:
			case VtlParser.AVG:
			case VtlParser.MEDIAN:
			case VtlParser.COUNT:
			case VtlParser.EXP:
			case VtlParser.CHARSET_MATCH:
			case VtlParser.NVL:
			case VtlParser.HIERARCHY:
			case VtlParser.LTRIM:
			case VtlParser.RTRIM:
			case VtlParser.INSTR:
			case VtlParser.REPLACE:
			case VtlParser.CEIL:
			case VtlParser.FLOOR:
			case VtlParser.SQRT:
			case VtlParser.SETDIFF:
			case VtlParser.STDDEV_POP:
			case VtlParser.STDDEV_SAMP:
			case VtlParser.VAR_POP:
			case VtlParser.VAR_SAMP:
			case VtlParser.FIRST_VALUE:
			case VtlParser.LAST_VALUE:
			case VtlParser.LAG:
			case VtlParser.LEAD:
			case VtlParser.RATIO_TO_REPORT:
			case VtlParser.FILL_TIME_SERIES:
			case VtlParser.FLOW_TO_STOCK:
			case VtlParser.STOCK_TO_FLOW:
			case VtlParser.TIMESHIFT:
			case VtlParser.INNER_JOIN:
			case VtlParser.LEFT_JOIN:
			case VtlParser.CROSS_JOIN:
			case VtlParser.FULL_JOIN:
			case VtlParser.PERIOD_INDICATOR:
			case VtlParser.TIME_AGG:
			case VtlParser.CAST:
			case VtlParser.CHECK_DATAPOINT:
			case VtlParser.CHECK_HIERARCHY:
			case VtlParser.INTEGER_CONSTANT:
			case VtlParser.NUMBER_CONSTANT:
			case VtlParser.BOOLEAN_CONSTANT:
			case VtlParser.STRING_CONSTANT:
			case VtlParser.IDENTIFIER:
				this.enterOuterAlt(localctx, 1);
				this.state = 1661;
				this.expr(0);
				break;
			case VtlParser.OPTIONAL:
				this.enterOuterAlt(localctx, 2);
				this.state = 1662;
				this.match(VtlParser.OPTIONAL);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OptionalExprComponentContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_optionalExprComponent;
	return this;
}

OptionalExprComponentContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
OptionalExprComponentContext.prototype.constructor = OptionalExprComponentContext;

OptionalExprComponentContext.prototype.exprComponent = function () {
	return this.getTypedRuleContext(ExprComponentContext, 0);
};

OptionalExprComponentContext.prototype.OPTIONAL = function () {
	return this.getToken(VtlParser.OPTIONAL, 0);
};

OptionalExprComponentContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOptionalExprComponent(this);
	}
};

OptionalExprComponentContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOptionalExprComponent(this);
	}
};

OptionalExprComponentContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOptionalExprComponent(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OptionalExprComponentContext = OptionalExprComponentContext;

VtlParser.prototype.optionalExprComponent = function () {
	var localctx = new OptionalExprComponentContext(this, this._ctx, this.state);
	this.enterRule(localctx, 198, VtlParser.RULE_optionalExprComponent);
	try {
		this.state = 1667;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.LPAREN:
			case VtlParser.PLUS:
			case VtlParser.MINUS:
			case VtlParser.EVAL:
			case VtlParser.IF:
			case VtlParser.CURRENT_DATE:
			case VtlParser.NOT:
			case VtlParser.BETWEEN:
			case VtlParser.NULL_CONSTANT:
			case VtlParser.ISNULL:
			case VtlParser.RANK:
			case VtlParser.MIN:
			case VtlParser.MAX:
			case VtlParser.ABS:
			case VtlParser.LN:
			case VtlParser.LOG:
			case VtlParser.TRUNC:
			case VtlParser.ROUND:
			case VtlParser.POWER:
			case VtlParser.MOD:
			case VtlParser.LEN:
			case VtlParser.TRIM:
			case VtlParser.UCASE:
			case VtlParser.LCASE:
			case VtlParser.SUBSTR:
			case VtlParser.SUM:
			case VtlParser.AVG:
			case VtlParser.MEDIAN:
			case VtlParser.COUNT:
			case VtlParser.EXP:
			case VtlParser.CHARSET_MATCH:
			case VtlParser.NVL:
			case VtlParser.LTRIM:
			case VtlParser.RTRIM:
			case VtlParser.INSTR:
			case VtlParser.REPLACE:
			case VtlParser.CEIL:
			case VtlParser.FLOOR:
			case VtlParser.SQRT:
			case VtlParser.STDDEV_POP:
			case VtlParser.STDDEV_SAMP:
			case VtlParser.VAR_POP:
			case VtlParser.VAR_SAMP:
			case VtlParser.FIRST_VALUE:
			case VtlParser.LAST_VALUE:
			case VtlParser.LAG:
			case VtlParser.LEAD:
			case VtlParser.RATIO_TO_REPORT:
			case VtlParser.FILL_TIME_SERIES:
			case VtlParser.FLOW_TO_STOCK:
			case VtlParser.STOCK_TO_FLOW:
			case VtlParser.TIMESHIFT:
			case VtlParser.PERIOD_INDICATOR:
			case VtlParser.TIME_AGG:
			case VtlParser.CAST:
			case VtlParser.INTEGER_CONSTANT:
			case VtlParser.NUMBER_CONSTANT:
			case VtlParser.BOOLEAN_CONSTANT:
			case VtlParser.STRING_CONSTANT:
			case VtlParser.IDENTIFIER:
				this.enterOuterAlt(localctx, 1);
				this.state = 1665;
				this.exprComponent(0);
				break;
			case VtlParser.OPTIONAL:
				this.enterOuterAlt(localctx, 2);
				this.state = 1666;
				this.match(VtlParser.OPTIONAL);
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ComponentRoleContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_componentRole;
	return this;
}

ComponentRoleContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ComponentRoleContext.prototype.constructor = ComponentRoleContext;

ComponentRoleContext.prototype.MEASURE = function () {
	return this.getToken(VtlParser.MEASURE, 0);
};

ComponentRoleContext.prototype.COMPONENT = function () {
	return this.getToken(VtlParser.COMPONENT, 0);
};

ComponentRoleContext.prototype.DIMENSION = function () {
	return this.getToken(VtlParser.DIMENSION, 0);
};

ComponentRoleContext.prototype.ATTRIBUTE = function () {
	return this.getToken(VtlParser.ATTRIBUTE, 0);
};

ComponentRoleContext.prototype.viralAttribute = function () {
	return this.getTypedRuleContext(ViralAttributeContext, 0);
};

ComponentRoleContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterComponentRole(this);
	}
};

ComponentRoleContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitComponentRole(this);
	}
};

ComponentRoleContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitComponentRole(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ComponentRoleContext = ComponentRoleContext;

VtlParser.prototype.componentRole = function () {
	var localctx = new ComponentRoleContext(this, this._ctx, this.state);
	this.enterRule(localctx, 200, VtlParser.RULE_componentRole);
	try {
		this.state = 1674;
		this._errHandler.sync(this);
		switch (this._input.LA(1)) {
			case VtlParser.MEASURE:
				this.enterOuterAlt(localctx, 1);
				this.state = 1669;
				this.match(VtlParser.MEASURE);
				break;
			case VtlParser.COMPONENT:
				this.enterOuterAlt(localctx, 2);
				this.state = 1670;
				this.match(VtlParser.COMPONENT);
				break;
			case VtlParser.DIMENSION:
				this.enterOuterAlt(localctx, 3);
				this.state = 1671;
				this.match(VtlParser.DIMENSION);
				break;
			case VtlParser.ATTRIBUTE:
				this.enterOuterAlt(localctx, 4);
				this.state = 1672;
				this.match(VtlParser.ATTRIBUTE);
				break;
			case VtlParser.VIRAL:
				this.enterOuterAlt(localctx, 5);
				this.state = 1673;
				this.viralAttribute();
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ViralAttributeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_viralAttribute;
	return this;
}

ViralAttributeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ViralAttributeContext.prototype.constructor = ViralAttributeContext;

ViralAttributeContext.prototype.VIRAL = function () {
	return this.getToken(VtlParser.VIRAL, 0);
};

ViralAttributeContext.prototype.ATTRIBUTE = function () {
	return this.getToken(VtlParser.ATTRIBUTE, 0);
};

ViralAttributeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterViralAttribute(this);
	}
};

ViralAttributeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitViralAttribute(this);
	}
};

ViralAttributeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitViralAttribute(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ViralAttributeContext = ViralAttributeContext;

VtlParser.prototype.viralAttribute = function () {
	var localctx = new ViralAttributeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 202, VtlParser.RULE_viralAttribute);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1676;
		this.match(VtlParser.VIRAL);
		this.state = 1677;
		this.match(VtlParser.ATTRIBUTE);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ValueDomainIDContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_valueDomainID;
	return this;
}

ValueDomainIDContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
ValueDomainIDContext.prototype.constructor = ValueDomainIDContext;

ValueDomainIDContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValueDomainIDContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterValueDomainID(this);
	}
};

ValueDomainIDContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitValueDomainID(this);
	}
};

ValueDomainIDContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitValueDomainID(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ValueDomainIDContext = ValueDomainIDContext;

VtlParser.prototype.valueDomainID = function () {
	var localctx = new ValueDomainIDContext(this, this._ctx, this.state);
	this.enterRule(localctx, 204, VtlParser.RULE_valueDomainID);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1679;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function OperatorIDContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_operatorID;
	return this;
}

OperatorIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorIDContext.prototype.constructor = OperatorIDContext;

OperatorIDContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

OperatorIDContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterOperatorID(this);
	}
};

OperatorIDContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitOperatorID(this);
	}
};

OperatorIDContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitOperatorID(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.OperatorIDContext = OperatorIDContext;

VtlParser.prototype.operatorID = function () {
	var localctx = new OperatorIDContext(this, this._ctx, this.state);
	this.enterRule(localctx, 206, VtlParser.RULE_operatorID);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1681;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RoutineNameContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_routineName;
	return this;
}

RoutineNameContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
RoutineNameContext.prototype.constructor = RoutineNameContext;

RoutineNameContext.prototype.IDENTIFIER = function () {
	return this.getToken(VtlParser.IDENTIFIER, 0);
};

RoutineNameContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRoutineName(this);
	}
};

RoutineNameContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRoutineName(this);
	}
};

RoutineNameContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRoutineName(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RoutineNameContext = RoutineNameContext;

VtlParser.prototype.routineName = function () {
	var localctx = new RoutineNameContext(this, this._ctx, this.state);
	this.enterRule(localctx, 208, VtlParser.RULE_routineName);
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1683;
		this.match(VtlParser.IDENTIFIER);
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_constant;
	return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.INTEGER_CONSTANT = function () {
	return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

ConstantContext.prototype.NUMBER_CONSTANT = function () {
	return this.getToken(VtlParser.NUMBER_CONSTANT, 0);
};

ConstantContext.prototype.BOOLEAN_CONSTANT = function () {
	return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
};

ConstantContext.prototype.STRING_CONSTANT = function () {
	return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

ConstantContext.prototype.NULL_CONSTANT = function () {
	return this.getToken(VtlParser.NULL_CONSTANT, 0);
};

ConstantContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitConstant(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.ConstantContext = ConstantContext;

VtlParser.prototype.constant = function () {
	var localctx = new ConstantContext(this, this._ctx, this.state);
	this.enterRule(localctx, 210, VtlParser.RULE_constant);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1685;
		_la = this._input.LA(1);
		if (
			!(
				_la === VtlParser.NULL_CONSTANT ||
				(((_la - 229) & ~0x1f) == 0 &&
					((1 << (_la - 229)) &
						((1 << (VtlParser.INTEGER_CONSTANT - 229)) |
							(1 << (VtlParser.NUMBER_CONSTANT - 229)) |
							(1 << (VtlParser.BOOLEAN_CONSTANT - 229)) |
							(1 << (VtlParser.STRING_CONSTANT - 229)))) !==
						0)
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function BasicScalarTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_basicScalarType;
	return this;
}

BasicScalarTypeContext.prototype = Object.create(
	antlr4.ParserRuleContext.prototype
);
BasicScalarTypeContext.prototype.constructor = BasicScalarTypeContext;

BasicScalarTypeContext.prototype.STRING = function () {
	return this.getToken(VtlParser.STRING, 0);
};

BasicScalarTypeContext.prototype.INTEGER = function () {
	return this.getToken(VtlParser.INTEGER, 0);
};

BasicScalarTypeContext.prototype.NUMBER = function () {
	return this.getToken(VtlParser.NUMBER, 0);
};

BasicScalarTypeContext.prototype.BOOLEAN = function () {
	return this.getToken(VtlParser.BOOLEAN, 0);
};

BasicScalarTypeContext.prototype.DATE = function () {
	return this.getToken(VtlParser.DATE, 0);
};

BasicScalarTypeContext.prototype.TIME = function () {
	return this.getToken(VtlParser.TIME, 0);
};

BasicScalarTypeContext.prototype.TIME_PERIOD = function () {
	return this.getToken(VtlParser.TIME_PERIOD, 0);
};

BasicScalarTypeContext.prototype.DURATION = function () {
	return this.getToken(VtlParser.DURATION, 0);
};

BasicScalarTypeContext.prototype.SCALAR = function () {
	return this.getToken(VtlParser.SCALAR, 0);
};

BasicScalarTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterBasicScalarType(this);
	}
};

BasicScalarTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitBasicScalarType(this);
	}
};

BasicScalarTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitBasicScalarType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.BasicScalarTypeContext = BasicScalarTypeContext;

VtlParser.prototype.basicScalarType = function () {
	var localctx = new BasicScalarTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 212, VtlParser.RULE_basicScalarType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1687;
		_la = this._input.LA(1);
		if (
			!(
				(((_la - 156) & ~0x1f) == 0 &&
					((1 << (_la - 156)) &
						((1 << (VtlParser.BOOLEAN - 156)) |
							(1 << (VtlParser.DATE - 156)) |
							(1 << (VtlParser.TIME_PERIOD - 156)) |
							(1 << (VtlParser.NUMBER - 156)) |
							(1 << (VtlParser.STRING - 156)) |
							(1 << (VtlParser.TIME - 156)) |
							(1 << (VtlParser.INTEGER - 156)))) !==
						0) ||
				_la === VtlParser.DURATION ||
				_la === VtlParser.SCALAR
			)
		) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

function RetainTypeContext(parser, parent, invokingState) {
	if (parent === undefined) {
		parent = null;
	}
	if (invokingState === undefined || invokingState === null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
	this.parser = parser;
	this.ruleIndex = VtlParser.RULE_retainType;
	return this;
}

RetainTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RetainTypeContext.prototype.constructor = RetainTypeContext;

RetainTypeContext.prototype.BOOLEAN_CONSTANT = function () {
	return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
};

RetainTypeContext.prototype.ALL = function () {
	return this.getToken(VtlParser.ALL, 0);
};

RetainTypeContext.prototype.enterRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.enterRetainType(this);
	}
};

RetainTypeContext.prototype.exitRule = function (listener) {
	if (listener instanceof VtlListener) {
		listener.exitRetainType(this);
	}
};

RetainTypeContext.prototype.accept = function (visitor) {
	if (visitor instanceof VtlVisitor) {
		return visitor.visitRetainType(this);
	} else {
		return visitor.visitChildren(this);
	}
};

VtlParser.RetainTypeContext = RetainTypeContext;

VtlParser.prototype.retainType = function () {
	var localctx = new RetainTypeContext(this, this._ctx, this.state);
	this.enterRule(localctx, 214, VtlParser.RULE_retainType);
	var _la = 0; // Token type
	try {
		this.enterOuterAlt(localctx, 1);
		this.state = 1689;
		_la = this._input.LA(1);
		if (!(_la === VtlParser.ALL || _la === VtlParser.BOOLEAN_CONSTANT)) {
			this._errHandler.recoverInline(this);
		} else {
			this._errHandler.reportMatch(this);
			this.consume();
		}
	} catch (re) {
		if (re instanceof antlr4.error.RecognitionException) {
			localctx.exception = re;
			this._errHandler.reportError(this, re);
			this._errHandler.recover(this, re);
		} else {
			throw re;
		}
	} finally {
		this.exitRule();
	}
	return localctx;
};

VtlParser.prototype.sempred = function (localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 2:
			return this.expr_sempred(localctx, predIndex);
		case 3:
			return this.exprComponent_sempred(localctx, predIndex);
		default:
			throw 'No predicate with index:' + ruleIndex;
	}
};

VtlParser.prototype.expr_sempred = function (localctx, predIndex) {
	switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 9);
		case 1:
			return this.precpred(this._ctx, 8);
		case 2:
			return this.precpred(this._ctx, 7);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		case 5:
			return this.precpred(this._ctx, 12);
		case 6:
			return this.precpred(this._ctx, 11);
		case 7:
			return this.precpred(this._ctx, 6);
		default:
			throw 'No predicate with index:' + predIndex;
	}
};

VtlParser.prototype.exprComponent_sempred = function (localctx, predIndex) {
	switch (predIndex) {
		case 8:
			return this.precpred(this._ctx, 9);
		case 9:
			return this.precpred(this._ctx, 8);
		case 10:
			return this.precpred(this._ctx, 7);
		case 11:
			return this.precpred(this._ctx, 5);
		case 12:
			return this.precpred(this._ctx, 4);
		case 13:
			return this.precpred(this._ctx, 6);
		default:
			throw 'No predicate with index:' + predIndex;
	}
};

exports.VtlParser = VtlParser;
